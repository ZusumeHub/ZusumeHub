local service = 3432;--Set your Platoboost Id 
local secret = "55acd596-9e84-4dbd-934e-9def6297d4d3"; --Set Your Platoboost Api key
local useNonce = true; 
local onMessage = function(message) game:GetService("StarterGui"):SetCore("ChatMakeSystemMessage", { Text = message; }) end;
local mainScript = "https://raw.githubusercontent.com/ZusumeHub/ZusumeHub/refs/heads/main/opws";

repeat task.wait(1) until game:IsLoaded() and game.Players.LocalPlayer;

-- Save/Load key functions
local function saveKey(key)
    if writefile then
        writefile("platoboost_key.txt", key)
    else
        if syn and syn.queue_on_teleport then
            syn.queue_on_teleport('_G.savedKey = "'..key..'"')
        elseif queue_on_teleport then
            queue_on_teleport('_G.savedKey = "'..key..'"')
        end
    end
end

local function loadSavedKey()
    local key = ""
    if readfile and pcall(function() readfile("platoboost_key.txt") end) then
        key = readfile("platoboost_key.txt")
    end
    if key == "" and _G.savedKey then
        key = _G.savedKey
    end
    return key
end

local requestSending = false;
local fSetClipboard, fRequest, fStringChar, fToString, fStringSub, fOsTime, fMathRandom, fMathFloor, fGetHwid = setclipboard or toclipboard, request or http_request or (syn and syn.request) or (http and http.request), string.char, tostring, string.sub, os.time, math.random, math.floor, gethwid or function() return game:GetService("Players").LocalPlayer.UserId end
local cachedLink, cachedTime = "", 0;
local HttpService = game:GetService("HttpService")

function lEncode(data)
    return HttpService:JSONEncode(data)
end
function lDecode(data)
    return HttpService:JSONDecode(data)
end
local function lDigest(input)
    local inputStr = tostring(input)    
    local hash = {}
    for i = 1, #inputStr do
        table.insert(hash, string.byte(inputStr, i))
    end
    local hashHex = ""
    for _, byte in ipairs(hash) do
        hashHex = hashHex .. string.format("%02x", byte)
    end    
    return hashHex
end
local host = "https://api.platoboost.com";
pcall(function()
    fRequest({
        Url = host .. "/public/connectivity",
        Method = "GET"
    })
end)

function cacheLink()
    if cachedTime + (10*60) < fOsTime() then
        local success, response = pcall(function()
            return fRequest({
                Url = host .. "/public/start",
                Method = "POST",
                Body = lEncode({
                    service = service,
                    identifier = lDigest(fGetHwid())
                }),
                Headers = {
                    ["Content-Type"] = "application/json"
                }
            })
        end)

        if success and response.StatusCode == 200 then
            local decoded = lDecode(response.Body);
            if decoded.success then
                cachedLink = decoded.data.url;
                cachedTime = fOsTime();
                return true, cachedLink;
            else
                onMessage(decoded.message);
            end
        end
    end
    return true, cachedLink;
end

cacheLink();

local generateNonce = function()
    local str = ""
    for _ = 1, 16 do
        str = str .. fStringChar(fMathFloor(fMathRandom() * (122 - 97 + 1)) + 97)
    end
    return str
end

for _ = 1, 5 do
    if generateNonce() == generateNonce() then
        error("Platoboost nonce error.");
    end
end

local copyLink = function()
    local success, link = cacheLink();    
    if success then
        if fSetClipboard then
            fSetClipboard(link);
            onMessage("Link copied to clipboard!")
        else
            onMessage("Visit: " .. link)
        end
    end
end

local redeemKey = function(key)
    local nonce = generateNonce();
    local endpoint = host .. "/public/redeem/" .. fToString(service);
    local body = {
        identifier = lDigest(fGetHwid()),
        key = key
    }
    if useNonce then body.nonce = nonce end

    local success, response = pcall(function()
        return fRequest({
            Url = endpoint,
            Method = "POST",
            Body = lEncode(body),
            Headers = {
                ["Content-Type"] = "application/json"
            }
        })
    end)

    if success and response.StatusCode == 200 then
        local decoded = lDecode(response.Body);
        if decoded.success then
            if decoded.data.valid then
                if useNonce and decoded.data.hash ~= lDigest("true" .. "-" .. nonce .. "-" .. secret) then
                    onMessage("Integrity check failed.");
                    return false;
                end    
                saveKey(key)
                return true;
            end
        else
            onMessage(decoded.message);
        end
    end
    return false;
end

local verifyKey = function(key)
    if requestSending then return false end
    requestSending = true;

    local nonce = generateNonce();
    local endpoint = host .. "/public/whitelist/" .. service .. "?identifier=" .. lDigest(fGetHwid()) .. "&key=" .. key
    if useNonce then endpoint = endpoint .. "&nonce=" .. nonce end
    
    local success, response = pcall(function()
        return fRequest({Url = endpoint, Method = "GET"})
    end)

    requestSending = false;
    if success and response.StatusCode == 200 then
        local decoded = lDecode(response.Body);
        if decoded.success then
            if decoded.data.valid then
                saveKey(key)
                return true;
            else
                return redeemKey(key);
            end
        else
            onMessage(decoded.message);
        end
    end
    return false;
end

-- Attempt to verify saved key first
local showGUI = true
local savedKey = loadSavedKey()
if savedKey and savedKey ~= "" then
    onMessage("Verifying saved key...")
    if verifyKey(savedKey) then
        onMessage("Key verified! Loading...")
        loadstring(game:HttpGet(mainScript))()
        showGUI = false
    else
        onMessage("Invalid saved key")
    end
end

if showGUI then
    -- GUI Remake with Gradient and Animation
task.spawn(function()
    local UserInputService = game:GetService("UserInputService")
    local TweenService = game:GetService("TweenService")

    local function createGradient(parent)
        local gradient = Instance.new("UIGradient")
        gradient.Color = ColorSequence.new{
            ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 170, 255)),
            ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 85, 255))
        }
        gradient.Rotation = 45
        gradient.Parent = parent
    end

    local function createCorner(parent, radius)
        local corner = Instance.new("UICorner")
        corner.CornerRadius = UDim.new(0, radius)
        corner.Parent = parent
    end

    local ScreenGui = Instance.new("ScreenGui")
    local Frame = Instance.new("Frame")
    local Topbar = Instance.new("Frame")
    local Exit = Instance.new("TextButton")
    local Minimize = Instance.new("TextButton")
    local Content = Instance.new("Frame")
    local TextBox = Instance.new("TextBox")
    local GetKey = Instance.new("TextButton")
    local CheckKey = Instance.new("TextButton")
    local StatusLabel = Instance.new("TextLabel")

    -- GUI parent
    ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    ScreenGui.ResetOnSpawn = false
    if syn and syn.protect_gui then
        syn.protect_gui(ScreenGui)
        ScreenGui.Parent = gethui()
    else
        ScreenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
    end

    -- Main Frame
    Frame.Parent = ScreenGui
    Frame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
    Frame.Size = UDim2.new(0, 220, 0, 140)
    Frame.Position = UDim2.new(0.4, 0, 0.4, 0)
    Frame.ClipsDescendants = true
    Frame.Active = true
    createCorner(Frame, 10)

    -- Topbar
    Topbar.Parent = Frame
    Topbar.Size = UDim2.new(1, 0, 0, 22)
    Topbar.BackgroundTransparency = 0.3
    Topbar.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    createCorner(Topbar, 10)

    -- Exit button
    Exit.Parent = Topbar
    Exit.Text = "X"
    Exit.Size = UDim2.new(0, 25, 1, 0)
    Exit.Position = UDim2.new(1, -25, 0, 0)
    Exit.BackgroundColor3 = Color3.fromRGB(255, 60, 60)
    Exit.TextColor3 = Color3.new(1, 1, 1)
    createCorner(Exit, 6)

    -- Minimize button
    Minimize.Parent = Topbar
    Minimize.Text = "-"
    Minimize.Size = UDim2.new(0, 25, 1, 0)
    Minimize.Position = UDim2.new(1, -50, 0, 0)
    Minimize.BackgroundColor3 = Color3.fromRGB(60, 255, 60)
    Minimize.TextColor3 = Color3.new(0, 0, 0)
    createCorner(Minimize, 6)

    -- Content
    Content.Name = "Content"
    Content.Parent = Frame
    Content.Size = UDim2.new(1, 0, 1, -22)
    Content.Position = UDim2.new(0, 0, 0, 22)
    Content.BackgroundTransparency = 1

    -- TextBox
    TextBox.Parent = Content
    TextBox.PlaceholderText = "Input Key"
    TextBox.Size = UDim2.new(0.9, 0, 0, 28)
    TextBox.Position = UDim2.new(0.05, 0, 0.05, 0)
    TextBox.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
    TextBox.TextColor3 = Color3.new(1, 1, 1)
    createCorner(TextBox, 6)

    -- GetKey button
    GetKey.Parent = Content
    GetKey.Text = "Get Key"
    GetKey.Size = UDim2.new(0.9, 0, 0, 25)
    GetKey.Position = UDim2.new(0.05, 0, 0.35, 0)
    GetKey.BackgroundColor3 = Color3.fromRGB(0, 170, 255)
    GetKey.TextColor3 = Color3.new(1, 1, 1)
    createCorner(GetKey, 6)
    createGradient(GetKey)

    -- CheckKey button
    CheckKey.Parent = Content
    CheckKey.Text = "Check Key"
    CheckKey.Size = UDim2.new(0.9, 0, 0, 25)
    CheckKey.Position = UDim2.new(0.05, 0, 0.55, 0)
    CheckKey.BackgroundColor3 = Color3.fromRGB(0, 170, 255)
    CheckKey.TextColor3 = Color3.new(1, 1, 1)
    createCorner(CheckKey, 6)
    createGradient(CheckKey)

    -- Status label
    StatusLabel.Parent = Content
    StatusLabel.Size = UDim2.new(0.9, 0, 0, 20)
    StatusLabel.Position = UDim2.new(0.05, 0, 0.78, 0)
    StatusLabel.BackgroundTransparency = 1
    StatusLabel.Text = ""
    StatusLabel.TextScaled = true
    StatusLabel.TextColor3 = Color3.new(1, 1, 1)

    -- Dragging
    local dragging = false
    local offset
    Topbar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            offset = input.Position - Frame.Position
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            Frame.Position = UDim2.new(0, input.Position.X - offset.X, 0, input.Position.Y - offset.Y)
        end
    end)

    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)

    -- Events
    Exit.MouseButton1Click:Connect(function()
        ScreenGui:Destroy()
    end)

    Minimize.MouseButton1Click:Connect(function()
        Content.Visible = not Content.Visible
        local size = Content.Visible and UDim2.new(0, 220, 0, 140) or UDim2.new(0, 220, 0, 22)
        TweenService:Create(Frame, TweenInfo.new(0.25), {Size = size}):Play()
    end)

    GetKey.MouseButton1Click:Connect(function()
        copyLink()
        StatusLabel.Text = "Link copied!"
        StatusLabel.TextColor3 = Color3.new(0, 1, 1)
    end)

    CheckKey.MouseButton1Click:Connect(function()
        if TextBox.Text == "" then
            StatusLabel.Text = "Enter key first!"
            StatusLabel.TextColor3 = Color3.new(1, 0, 0)
            return
        end

        StatusLabel.Text = "Checking..."
        StatusLabel.TextColor3 = Color3.new(1, 1, 0)

        if verifyKey(TextBox.Text) then
            StatusLabel.Text = "Success! Loading..."
            StatusLabel.TextColor3 = Color3.new(0, 1, 0)
            loadstring(game:HttpGet(mainScript))()
            ScreenGui:Destroy()
        else
            StatusLabel.Text = "Invalid key!"
            StatusLabel.TextColor3 = Color3.new(1, 0, 0)
        end
    end)

    if UserInputService.TouchEnabled then
        Frame.Size = UDim2.new(0, 240, 0, 160)
        TextBox.Size = UDim2.new(0.9, 0, 0, 30)
        GetKey.Size = UDim2.new(0.9, 0, 0, 30)
        CheckKey.Size = UDim2.new(0.9, 0, 0, 30)
    end
end)
