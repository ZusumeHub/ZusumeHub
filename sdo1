local Players = game:GetService("Players")
local UIS = game:GetService("UserInputService")
local ContextActionService = game:GetService("ContextActionService")
local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")
local TweenService = game:GetService("TweenService")
local CoreGui = game:GetService("CoreGui")
local HttpService = game:GetService("HttpService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

-- Modern GUI Library
local ModernGUILibrary = {}

-- Constants
local FONT = Enum.Font.GothamBold
local CORNER_RADIUS = UDim.new(0, 8)
local COLORS = {
    Background = Color3.fromRGB(20, 20, 25),
    Frame = Color3.fromRGB(30, 30, 35),
    TabContainer = Color3.fromRGB(25, 25, 30),
    TopBar = Color3.fromRGB(15, 15, 20),
    Text = Color3.fromRGB(255, 255, 255),
    TextSecondary = Color3.fromRGB(200, 200, 200),
    Accent = Color3.fromRGB(88, 101, 242),
    Success = Color3.fromRGB(67, 181, 129),
    Error = Color3.fromRGB(240, 71, 71),
    Warning = Color3.fromRGB(255, 162, 0),
    Input = Color3.fromRGB(40, 40, 45),
    Hover = Color3.fromRGB(50, 50, 55),
    Active = Color3.fromRGB(88, 101, 242),
    Separator = Color3.fromRGB(60, 60, 65)
}

-- Icon System
local Icons = {
    ["copy"] = "rbxassetid://7072706742",
    ["user-x"] = "rbxassetid://7072978559",
    ["rotate-cw"] = "rbxassetid://7072980973",
    ["leaf"] = "rbxassetid://7072980286",
    ["settings"] = "rbxassetid://7072980488",
    ["shopping-cart"] = "rbxassetid://7072980642",
    ["refresh-cw"] = "rbxassetid://7072980796",
    ["chevron-down"] = "rbxassetid://7072706742",
    ["chevron-up"] = "rbxassetid://7072706742",
    ["check"] = "rbxassetid://7072978559",
    ["x"] = "rbxassetid://7072978894",
    ["minus"] = "rbxassetid://7072980286",
    ["plus"] = "rbxassetid://7072980488"
}

-- Utility Functions
local function createCorner(parent, radius)
    local corner = Instance.new("UICorner")
    corner.CornerRadius = radius or CORNER_RADIUS
    corner.Parent = parent
    return corner
end

local function createGradient(parent, colors, rotation)
    local gradient = Instance.new("UIGradient")
    if colors then
        gradient.Color = colors
    end
    if rotation then
        gradient.Rotation = rotation
    end
    gradient.Parent = parent
    return gradient
end

local function createStroke(parent, color, thickness)
    local stroke = Instance.new("UIStroke")
    stroke.Color = color or COLORS.Separator
    stroke.Thickness = thickness or 1
    stroke.Parent = parent
    return stroke
end

local function tweenObject(object, info, properties)
    local tween = TweenService:Create(object, info, properties)
    tween:Play()
    return tween
end

-- Main Library Class
function ModernGUILibrary.new(config)
    local self = {}
    
    -- Configuration
    self.Title = config.Title or "Modern GUI"
    self.Description = config.Description or "Advanced GUI Library"
    self.Size = config.Size or UDim2.new(0, 450, 0, 350)
    self.MinimizeKey = config.MinimizeKey or Enum.KeyCode.M
    
    -- Variables
    self.tabs = {}
    self.activeTab = nil
    self.isMinimized = false
    self.originalSize = nil
    
    -- Create Main GUI
    self:CreateMainGUI()
    
    return self
end

function ModernGUILibrary:CreateMainGUI()
    -- Main ScreenGui
    self.ScreenGui = Instance.new("ScreenGui")
    self.ScreenGui.Name = "ModernGUI_" .. math.random(1000, 9999)
    self.ScreenGui.ResetOnSpawn = false
    self.ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    self.ScreenGui.Parent = PlayerGui
    
    -- Main Frame
    self.MainFrame = Instance.new("Frame")
    self.MainFrame.Name = "MainFrame"
    self.MainFrame.Size = self.Size
    self.MainFrame.Position = UDim2.new(0.5, -self.Size.X.Offset/2, 0.5, -self.Size.Y.Offset/2)
    self.MainFrame.BackgroundColor3 = COLORS.Background
    self.MainFrame.BorderSizePixel = 0
    self.MainFrame.ClipsDescendants = true
    self.MainFrame.Parent = self.ScreenGui
    
    createCorner(self.MainFrame, UDim.new(0, 12))
    createStroke(self.MainFrame, COLORS.Separator, 1)
    
    -- Drop Shadow Effect
    local shadow = Instance.new("ImageLabel")
    shadow.Name = "Shadow"
    shadow.Size = UDim2.new(1, 30, 1, 30)
    shadow.Position = UDim2.new(0, -15, 0, -15)
    shadow.BackgroundTransparency = 1
    shadow.Image = "rbxassetid://1316045217"
    shadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
    shadow.ImageTransparency = 0.8
    shadow.ScaleType = Enum.ScaleType.Slice
    shadow.SliceCenter = Rect.new(10, 10, 118, 118)
    shadow.ZIndex = self.MainFrame.ZIndex - 1
    shadow.Parent = self.MainFrame
    
    -- Top Bar
    self:CreateTopBar()
    
    -- Tab Container
    self:CreateTabContainer()
    
    -- Content Container
    self:CreateContentContainer()
    
    -- Footer
    self:CreateFooter()
    
    -- Setup Dragging
    self:SetupDragging()
    
    -- Setup Minimize Key
    self:SetupMinimizeKey()
end

function ModernGUILibrary:CreateTopBar()
    self.TopBar = Instance.new("Frame")
    self.TopBar.Name = "TopBar"
    self.TopBar.Size = UDim2.new(1, 0, 0, 40)
    self.TopBar.BackgroundColor3 = COLORS.TopBar
    self.TopBar.BorderSizePixel = 0
    self.TopBar.Parent = self.MainFrame
    
    createCorner(self.TopBar, UDim.new(0, 12))
    
    -- Gradient Effect
    createGradient(self.TopBar, ColorSequence.new{
        ColorSequenceKeypoint.new(0, COLORS.TopBar),
        ColorSequenceKeypoint.new(1, COLORS.Frame)
    }, 90)
    
    -- Title Container
    local titleContainer = Instance.new("Frame")
    titleContainer.Name = "TitleContainer"
    titleContainer.Size = UDim2.new(1, -50, 1, 0)
    titleContainer.BackgroundTransparency = 1
    titleContainer.Parent = self.TopBar
    
    -- Icon (if provided)
    if self.Icon then
        local iconLabel = Instance.new("ImageLabel")
        iconLabel.Name = "Icon"
        iconLabel.Size = UDim2.new(0, 24, 0, 24)
        iconLabel.Position = UDim2.new(0, 12, 0.5, -12)
        iconLabel.BackgroundTransparency = 1
        iconLabel.Image = self.Icon
        iconLabel.ImageColor3 = COLORS.Accent
        iconLabel.Parent = titleContainer
    end
    
    -- Title
    self.Title = Instance.new("TextLabel")
    self.Title.Name = "Title"
    self.Title.Size = UDim2.new(1, self.Icon and -50 or -20, 0, 20)
    self.Title.Position = UDim2.new(0, self.Icon and 45 or 15, 0, 4)
    self.Title.BackgroundTransparency = 1
    self.Title.TextColor3 = COLORS.Text
    self.Title.TextSize = 16
    self.Title.Font = FONT
    self.Title.Text = self.Title
    self.Title.TextXAlignment = Enum.TextXAlignment.Left
    self.Title.Parent = titleContainer
    
    -- Description
    self.DescriptionLabel = Instance.new("TextLabel")
    self.DescriptionLabel.Name = "Description"
    self.DescriptionLabel.Size = UDim2.new(1, self.Icon and -50 or -20, 0, 14)
    self.DescriptionLabel.Position = UDim2.new(0, self.Icon and 45 or 15, 0, 22)
    self.DescriptionLabel.BackgroundTransparency = 1
    self.DescriptionLabel.TextColor3 = COLORS.TextSecondary
    self.DescriptionLabel.TextSize = 12
    self.DescriptionLabel.Font = Enum.Font.Gotham
    self.DescriptionLabel.Text = self.Description
    self.DescriptionLabel.TextXAlignment = Enum.TextXAlignment.Left
    self.DescriptionLabel.Parent = titleContainer
    
    -- Minimize Button
    self.MinimizeButton = Instance.new("TextButton")
    self.MinimizeButton.Name = "MinimizeButton"
    self.MinimizeButton.Size = UDim2.new(0, 30, 0, 30)
    self.MinimizeButton.Position = UDim2.new(1, -35, 0.5, -15)
    self.MinimizeButton.BackgroundColor3 = COLORS.Input
    self.MinimizeButton.BorderSizePixel = 0
    self.MinimizeButton.Font = FONT
    self.MinimizeButton.TextColor3 = COLORS.Text
    self.MinimizeButton.Text = "âˆ’"
    self.MinimizeButton.TextSize = 18
    self.MinimizeButton.Parent = self.TopBar
    
    createCorner(self.MinimizeButton, UDim.new(0, 6))
    
    -- Minimize Button Hover Effects
    self.MinimizeButton.MouseEnter:Connect(function()
        tweenObject(self.MinimizeButton, TweenInfo.new(0.2), {BackgroundColor3 = COLORS.Hover})
    end)
    
    self.MinimizeButton.MouseLeave:Connect(function()
        tweenObject(self.MinimizeButton, TweenInfo.new(0.2), {BackgroundColor3 = COLORS.Input})
    end)
    
    self.MinimizeButton.MouseButton1Click:Connect(function()
        self:ToggleMinimize()
    end)
end

function ModernGUILibrary:CreateTabContainer()
    self.TabContainer = Instance.new("Frame")
    self.TabContainer.Name = "TabContainer"
    self.TabContainer.Size = UDim2.new(0, 120, 1, -70)
    self.TabContainer.Position = UDim2.new(0, 0, 0, 40)
    self.TabContainer.BackgroundColor3 = COLORS.TabContainer
    self.TabContainer.BorderSizePixel = 0
    self.TabContainer.Parent = self.MainFrame
    
    -- Tab List Layout
    self.TabListLayout = Instance.new("UIListLayout")
    self.TabListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    self.TabListLayout.Padding = UDim.new(0, 4)
    self.TabListLayout.Parent = self.TabContainer
    
    -- Tab Container Padding
    local tabPadding = Instance.new("UIPadding")
    tabPadding.PaddingTop = UDim.new(0, 8)
    tabPadding.PaddingLeft = UDim.new(0, 8)
    tabPadding.PaddingRight = UDim.new(0, 8)
    tabPadding.Parent = self.TabContainer
end

function ModernGUILibrary:CreateContentContainer()
    self.ContentContainer = Instance.new("Frame")
    self.ContentContainer.Name = "ContentContainer"
    self.ContentContainer.Size = UDim2.new(1, -120, 1, -70)
    self.ContentContainer.Position = UDim2.new(0, 120, 0, 40)
    self.ContentContainer.BackgroundTransparency = 1
    self.ContentContainer.Parent = self.MainFrame
    
    -- Scrolling Frame
    self.ScrollingFrame = Instance.new("ScrollingFrame")
    self.ScrollingFrame.Name = "ScrollingFrame"
    self.ScrollingFrame.Size = UDim2.new(1, 0, 1, 0)
    self.ScrollingFrame.BackgroundTransparency = 1
    self.ScrollingFrame.ScrollBarThickness = 4
    self.ScrollingFrame.ScrollBarImageColor3 = COLORS.Separator
    self.ScrollingFrame.BorderSizePixel = 0
    self.ScrollingFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
    self.ScrollingFrame.Parent = self.ContentContainer
    
    -- Scrolling Frame Padding
    local scrollPadding = Instance.new("UIPadding")
    scrollPadding.PaddingTop = UDim.new(0, 12)
    scrollPadding.PaddingLeft = UDim.new(0, 12)
    scrollPadding.PaddingRight = UDim.new(0, 12)
    scrollPadding.PaddingBottom = UDim.new(0, 12)
    scrollPadding.Parent = self.ScrollingFrame
end

function ModernGUILibrary:CreateFooter()
    self.Footer = Instance.new("Frame")
    self.Footer.Name = "Footer"
    self.Footer.Size = UDim2.new(1, 0, 0, 30)
    self.Footer.Position = UDim2.new(0, 0, 1, -30)
    self.Footer.BackgroundColor3 = COLORS.TabContainer
    self.Footer.BorderSizePixel = 0
    self.Footer.Parent = self.MainFrame
    
    -- Footer Separator
    local separator = Instance.new("Frame")
    separator.Name = "Separator"
    separator.Size = UDim2.new(1, 0, 0, 1)
    separator.BackgroundColor3 = COLORS.Separator
    separator.BorderSizePixel = 0
    separator.Parent = self.Footer
    
    -- Footer Text
    self.FooterLabel = Instance.new("TextLabel")
    self.FooterLabel.Name = "FooterLabel"
    self.FooterLabel.Size = UDim2.new(1, -20, 1, 0)
    self.FooterLabel.Position = UDim2.new(0, 10, 0, 0)
    self.FooterLabel.BackgroundTransparency = 1
    self.FooterLabel.TextColor3 = COLORS.TextSecondary
    self.FooterLabel.TextSize = 12
    self.FooterLabel.Font = Enum.Font.Gotham
    self.FooterLabel.Text = "Made with Modern GUI Library"
    self.FooterLabel.TextXAlignment = Enum.TextXAlignment.Left
    self.FooterLabel.Parent = self.Footer
end

function ModernGUILibrary:SetupDragging()
    local dragging = false
    local dragInput
    local dragStart
    local startPos
    
    local function updateDrag(input)
        local delta = input.Position - dragStart
        self.MainFrame.Position = UDim2.new(
            startPos.X.Scale, 
            startPos.X.Offset + delta.X, 
            startPos.Y.Scale, 
            startPos.Y.Offset + delta.Y
        )
    end
    
    self.TopBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = self.MainFrame.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    self.TopBar.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)
    
    UIS.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            updateDrag(input)
        end
    end)
end

function ModernGUILibrary:SetupMinimizeKey()
    UIS.InputBegan:Connect(function(input, gameProcessed)
        if not gameProcessed and input.KeyCode == self.MinimizeKey then
            self.ScreenGui.Enabled = not self.ScreenGui.Enabled
        end
    end)
end

function ModernGUILibrary:ToggleMinimize()
    if self.isMinimized then
        -- Restore
        tweenObject(self.MainFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quart), {Size = self.originalSize})
        self.TabContainer.Visible = true
        self.ContentContainer.Visible = true
        self.Footer.Visible = true
        self.MinimizeButton.Text = "âˆ’"
    else
        -- Minimize
        self.originalSize = self.MainFrame.Size
        tweenObject(self.MainFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quart), {Size = UDim2.new(0, self.Size.X.Offset, 0, 40)})
        self.TabContainer.Visible = false
        self.ContentContainer.Visible = false
        self.Footer.Visible = false
        self.MinimizeButton.Text = "+"
    end
    
    self.isMinimized = not self.isMinimized
end

-- Tab Management
function ModernGUILibrary:CreateTab(config)
    local tab = {
        Name = config.Name or "Tab",
        Icon = config.Icon,
        Library = self,
        Elements = {},
        ContentFrame = nil,
        TabButton = nil,
        IsActive = false,
        NextElementY = 0
    }
    
    -- Create Tab Button
    tab.TabButton = Instance.new("TextButton")
    tab.TabButton.Name = tab.Name .. "Tab"
    tab.TabButton.Size = UDim2.new(1, 0, 0, 36)
    tab.TabButton.BackgroundColor3 = COLORS.Frame
    tab.TabButton.BorderSizePixel = 0
    tab.TabButton.Font = FONT
    tab.TabButton.TextColor3 = COLORS.TextSecondary
    tab.TabButton.TextSize = 14
    tab.TabButton.Text = ""
    tab.TabButton.Parent = self.TabContainer
    
    createCorner(tab.TabButton, UDim.new(0, 8))
    
    -- Tab Icon and Label
    if tab.Icon and Icons[tab.Icon] then
        local iconLabel = Instance.new("ImageLabel")
        iconLabel.Name = "Icon"
        iconLabel.Size = UDim2.new(0, 18, 0, 18)
        iconLabel.Position = UDim2.new(0, 10, 0.5, -9)
        iconLabel.BackgroundTransparency = 1
        iconLabel.Image = Icons[tab.Icon]
        iconLabel.ImageColor3 = COLORS.TextSecondary
        iconLabel.Parent = tab.TabButton
        
        local textLabel = Instance.new("TextLabel")
        textLabel.Name = "TabLabel"
        textLabel.Size = UDim2.new(1, -38, 1, 0)
        textLabel.Position = UDim2.new(0, 32, 0, 0)
        textLabel.BackgroundTransparency = 1
        textLabel.Font = FONT
        textLabel.TextColor3 = COLORS.TextSecondary
        textLabel.TextSize = 14
        textLabel.Text = tab.Name
        textLabel.TextXAlignment = Enum.TextXAlignment.Left
        textLabel.Parent = tab.TabButton
    else
        tab.TabButton.Text = tab.Name
        tab.TabButton.TextXAlignment = Enum.TextXAlignment.Center
    end
    
    -- Create Content Frame
    tab.ContentFrame = Instance.new("Frame")
    tab.ContentFrame.Name = tab.Name .. "Content"
    tab.ContentFrame.Size = UDim2.new(1, 0, 1, 0)
    tab.ContentFrame.BackgroundTransparency = 1
    tab.ContentFrame.Visible = false
    tab.ContentFrame.Parent = self.ScrollingFrame
    
    -- Content Layout
    tab.ContentLayout = Instance.new("UIListLayout")
    tab.ContentLayout.SortOrder = Enum.SortOrder.LayoutOrder
    tab.ContentLayout.Padding = UDim.new(0, 8)
    tab.ContentLayout.Parent = tab.ContentFrame
    
    -- Tab Button Events
    tab.TabButton.MouseEnter:Connect(function()
        if not tab.IsActive then
            tweenObject(tab.TabButton, TweenInfo.new(0.2), {BackgroundColor3 = COLORS.Hover})
        end
    end)
    
    tab.TabButton.MouseLeave:Connect(function()
        if not tab.IsActive then
            tweenObject(tab.TabButton, TweenInfo.new(0.2), {BackgroundColor3 = COLORS.Frame})
        end
    end)
    
    tab.TabButton.MouseButton1Click:Connect(function()
        self:SetActiveTab(tab)
    end)
    
    -- Add to tabs list
    table.insert(self.tabs, tab)
    
    -- Set as active if first tab
    if #self.tabs == 1 then
        self:SetActiveTab(tab)
    end
    
    -- Tab Methods
    function tab:AddSection(text)
        return self.Library:CreateSection(self, text)
    end
    
    function tab:AddButton(config)
        return self.Library:CreateButton(self, config)
    end
    
    function tab:AddCheckbox(config)
        return self.Library:CreateCheckbox(self, config)
    end
    
    function tab:AddTextInput(config)
        return self.Library:CreateTextInput(self, config)
    end
    
    function tab:AddDropdown(config)
        return self.Library:CreateDropdown(self, config)
    end
    
    function tab:AddSlider(config)
        return self.Library:CreateSlider(self, config)
    end
    
    return tab
end

function ModernGUILibrary:SetActiveTab(tab)
    -- Deactivate current tab
    if self.activeTab then
        self.activeTab.IsActive = false
        self.activeTab.ContentFrame.Visible = false
        
        tweenObject(self.activeTab.TabButton, TweenInfo.new(0.3), {BackgroundColor3 = COLORS.Frame})
        
        -- Update tab button text color
        if self.activeTab.TabButton:FindFirstChild("TabLabel") then
            tweenObject(self.activeTab.TabButton.TabLabel, TweenInfo.new(0.3), {TextColor3 = COLORS.TextSecondary})
            tweenObject(self.activeTab.TabButton.Icon, TweenInfo.new(0.3), {ImageColor3 = COLORS.TextSecondary})
        else
            tweenObject(self.activeTab.TabButton, TweenInfo.new(0.3), {TextColor3 = COLORS.TextSecondary})
        end
        
        -- Remove highlight
        local highlight = self.activeTab.TabButton:FindFirstChild("ActiveHighlight")
        if highlight then
            tweenObject(highlight, TweenInfo.new(0.3), {BackgroundTransparency = 1})
            game:GetService("Debris"):AddItem(highlight, 0.3)
        end
    end
    
    -- Activate new tab
    tab.IsActive = true
    tab.ContentFrame.Visible = true
    self.activeTab = tab
    
    tweenObject(tab.TabButton, TweenInfo.new(0.3), {BackgroundColor3 = COLORS.Active})
    
    -- Update tab button text color
    if tab.TabButton:FindFirstChild("TabLabel") then
        tweenObject(tab.TabButton.TabLabel, TweenInfo.new(0.3), {TextColor3 = COLORS.Text})
        tweenObject(tab.TabButton.Icon, TweenInfo.new(0.3), {ImageColor3 = COLORS.Text})
    else
        tweenObject(tab.TabButton, TweenInfo.new(0.3), {TextColor3 = COLORS.Text})
    end
    
    -- Add highlight
    local highlight = Instance.new("Frame")
    highlight.Name = "ActiveHighlight"
    highlight.Size = UDim2.new(0, 3, 0.7, 0)
    highlight.Position = UDim2.new(0, 0, 0.15, 0)
    highlight.BackgroundColor3 = COLORS.Success
    highlight.BorderSizePixel = 0
    highlight.ZIndex = tab.TabButton.ZIndex + 1
    highlight.Parent = tab.TabButton
    
    createCorner(highlight, UDim.new(0, 2))
    
    -- Animate highlight
    highlight.Size = UDim2.new(0, 0, 0.7, 0)
    tweenObject(highlight, TweenInfo.new(0.3, Enum.EasingStyle.Back), {Size = UDim2.new(0, 3, 0.7, 0)})
    
    -- Update canvas size
    self:UpdateCanvasSize(tab)
end

function ModernGUILibrary:UpdateCanvasSize(tab)
    local contentSize = tab.ContentLayout.AbsoluteContentSize.Y
    self.ScrollingFrame.CanvasSize = UDim2.new(0, 0, 0, contentSize + 24)
end

-- Element Creation Functions
function ModernGUILibrary:CreateSection(tab, text)
    local sectionFrame = Instance.new("Frame")
    sectionFrame.Name = "Section"
    sectionFrame.Size = UDim2.new(1, 0, 0, 30)
    sectionFrame.BackgroundTransparency = 1
    sectionFrame.Parent = tab.ContentFrame
    
    local sectionLabel = Instance.new("TextLabel")
    sectionLabel.Name = "SectionLabel"
    sectionLabel.Size = UDim2.new(1, 0, 1, 0)
    sectionLabel.BackgroundTransparency = 1
    sectionLabel.TextColor3 = COLORS.Text
    sectionLabel.TextSize = 16
    sectionLabel.Font = FONT
    sectionLabel.Text = text
    sectionLabel.TextXAlignment = Enum.TextXAlignment.Left
    sectionLabel.Parent = sectionFrame
    
    local separator = Instance.new("Frame")
    separator.Name = "Separator"
    separator.Size = UDim2.new(1, 0, 0, 1)
    separator.Position = UDim2.new(0, 0, 1, -1)
    separator.BackgroundColor3 = COLORS.Separator
    separator.BorderSizePixel = 0
    separator.Parent = sectionFrame
    
    tab.ContentLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        self:UpdateCanvasSize(tab)
    end)
    
    return sectionFrame
end

function ModernGUILibrary:CreateButton(tab, config)
    local buttonContainer = Instance.new("Frame")
    buttonContainer.Name = "ButtonContainer"
    buttonContainer.Size = UDim2.new(1, 0, 0, 36)
    buttonContainer.BackgroundTransparency = 1
    buttonContainer.Parent = tab.ContentFrame
    
    local buttonFrame = Instance.new("TextButton")
    buttonFrame.Name = "Button"
    buttonFrame.Size = UDim2.new(1, 0, 1, 0)
    buttonFrame.BackgroundColor3 = COLORS.Frame
    buttonFrame.BorderSizePixel = 0
    buttonFrame.Font = FONT
    buttonFrame.TextColor3 = COLORS.Text
    buttonFrame.TextSize = 14
    buttonFrame.Text = config.Text or "Button"
    buttonFrame.Parent = buttonContainer
    
    createCorner(buttonFrame, UDim.new(0, 8))
    
    -- Button Icon
    if config.Icon and Icons[config.Icon] then
        local iconLabel = Instance.new("ImageLabel")
        iconLabel.Name = "Icon"
        iconLabel.Size = UDim2.new(0, 18, 0, 18)
        iconLabel.Position = UDim2.new(0, 12, 0.5, -9)
        iconLabel.BackgroundTransparency = 1
        iconLabel.Image = Icons[config.Icon]
        iconLabel.ImageColor3 = COLORS.Text
        iconLabel.Parent = buttonFrame
        
        -- Adjust text position
        buttonFrame.Text = ""
        local textLabel = Instance.new("TextLabel")
        textLabel.Name = "ButtonText"
        textLabel.Size = UDim2.new(1, -40, 1, 0)
        textLabel.Position = UDim2.new(0, 35, 0, 0)
        textLabel.BackgroundTransparency = 1
        textLabel.Font = FONT
        textLabel.TextColor3 = COLORS.Text
        textLabel.TextSize = 14
        textLabel.Text = config.Text or "Button"
        textLabel.TextXAlignment = Enum.TextXAlignment.Left
        textLabel.Parent = buttonFrame
    end
    
    -- Ripple Effect
    local ripple = Instance.new("Frame")
    ripple.Name = "Ripple"
    ripple.Size = UDim2.new(0, 0, 0, 0)
    ripple.Position = UDim2.new(0.5, 0, 0.5, 0)
    ripple.BackgroundColor3 = COLORS.Text
    ripple.BackgroundTransparency = 0.8
    ripple.BorderSizePixel = 0
    ripple.ZIndex = buttonFrame.ZIndex + 1
    ripple.Parent = buttonFrame
    
    createCorner(ripple, UDim.new(0.5, 0))
    
    -- Button Events
    buttonFrame.MouseEnter:Connect(function()
        tweenObject(buttonFrame, TweenInfo.new(0.2), {BackgroundColor3 = COLORS.Hover})
    end)
    
    buttonFrame.MouseLeave:Connect(function()
        tweenObject(buttonFrame, TweenInfo.new(0.2), {BackgroundColor3 = COLORS.Frame})
    end)
    
    buttonFrame.MouseButton1Click:Connect(function()
        -- Ripple effect
        ripple.Size = UDim2.new(0, 0, 0, 0)
        ripple.Position = UDim2.new(0.5, 0, 0.5, 0)
        ripple.BackgroundTransparency = 0.8
        
        local rippleTween = tweenObject(ripple, TweenInfo.new(0.5), {
            Size = UDim2.new(0, 100, 0, 100),
            Position = UDim2.new(0.5, -50, 0.5, -50),
            BackgroundTransparency = 1
        })
        
        if config.Callback then
            config.Callback()
        end
    end)
    
    tab.ContentLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        self:UpdateCanvasSize(tab)
    end)
    
    return buttonFrame
end

function ModernGUILibrary:CreateCheckbox(tab, config)
    local checkboxContainer = Instance.new("Frame")
    checkboxContainer.Name = "CheckboxContainer"
    checkboxContainer.Size = UDim2.new(1, 0, 0, 36)
    checkboxContainer.BackgroundTransparency = 1
    checkboxContainer.Parent = tab.ContentFrame
    
    local checkboxFrame = Instance.new("Frame")
    checkboxFrame.Name = "CheckboxFrame"
    checkboxFrame.Size = UDim2.new(1, 0, 1, 0)
    checkboxFrame.BackgroundColor3 = COLORS.Frame
    checkboxFrame.BorderSizePixel = 0
    checkboxFrame.Parent = checkboxContainer
    
    createCorner(checkboxFrame, UDim.new(0, 8))
    
    -- Checkbox Button
    local checkboxButton = Instance.new("TextButton")
    checkboxButton.Name = "CheckboxButton"
    checkboxButton.Size = UDim2.new(0, 20, 0, 20)
    checkboxButton.Position = UDim2.new(0, 12, 0.5, -10)
    checkboxButton.BackgroundColor3 = COLORS.Input
    checkboxButton.BorderSizePixel = 0
    checkboxButton.Text = ""
    checkboxButton.Parent = checkboxFrame
    
    createCorner(checkboxButton, UDim.new(0, 4))
    createStroke(checkboxButton, COLORS.Separator, 1)
    
    -- Checkmark
    local checkmark = Instance.new("ImageLabel")
    checkmark.Name = "Checkmark"
    checkmark.Size = UDim2.new(0, 14, 0, 14)
    checkmark.Position = UDim2.new(0.5, -7, 0.5, -7)
    checkmark.BackgroundTransparency = 1
    checkmark.Image = Icons["check"] or "rbxassetid://7072709490"
    checkmark.ImageColor3 = COLORS.Text
    checkmark.ImageTransparency = 1
    checkmark.Parent = checkboxButton
    
    -- Checkbox Label
    local checkboxLabel = Instance.new("TextLabel")
    checkboxLabel.Name = "CheckboxLabel"
    checkboxLabel.Size = UDim2.new(1, -45, 1, 0)
    checkboxLabel.Position = UDim2.new(0, 40, 0, 0)
    checkboxLabel.BackgroundTransparency = 1
    checkboxLabel.Font = FONT
    checkboxLabel.TextColor3 = COLORS.Text
    checkboxLabel.TextSize = 14
    checkboxLabel.Text = config.Text or "Checkbox"
    checkboxLabel.TextXAlignment = Enum.TextXAlignment.Left
    checkboxLabel.Parent = checkboxFrame
    
    -- State Management
    local isChecked = config.Default or false
    
    local function updateCheckbox()
        if isChecked then
            tweenObject(checkboxButton, TweenInfo.new(0.2), {BackgroundColor3 = COLORS.Success})
            tweenObject(checkmark, TweenInfo.new(0.2), {ImageTransparency = 0})
        else
            tweenObject(checkboxButton, TweenInfo.new(0.2), {BackgroundColor3 = COLORS.Input})
            tweenObject(checkmark, TweenInfo.new(0.2), {ImageTransparency = 1})
        end
    end
    
    -- Initial state
    updateCheckbox()
    
    -- Events
    checkboxButton.MouseButton1Click:Connect(function()
        isChecked = not isChecked
        updateCheckbox()
        
        if config.Callback then
            config.Callback(isChecked)
        end
    end)
    
    checkboxFrame.MouseEnter:Connect(function()
        tweenObject(checkboxFrame, TweenInfo.new(0.2), {BackgroundColor3 = COLORS.Hover})
    end)
    
    checkboxFrame.MouseLeave:Connect(function()
        tweenObject(checkboxFrame, TweenInfo.new(0.2), {BackgroundColor3 = COLORS.Frame})
    end)
    
    -- Methods
    local methods = {}
    
    function methods.setState(state)
        isChecked = state
        updateCheckbox()
        if config.Callback then
            config.Callback(isChecked)
        end
    end
    
    function methods.getState()
        return isChecked
    end
    
    tab.ContentLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        self:UpdateCanvasSize(tab)
    end)
    
    return checkboxButton, methods
end

function ModernGUILibrary:CreateTextInput(tab, config)
    local inputContainer = Instance.new("Frame")
    inputContainer.Name = "InputContainer"
    inputContainer.Size = UDim2.new(1, 0, 0, 60)
    inputContainer.BackgroundTransparency = 1
    inputContainer.Parent = tab.ContentFrame
    
    local inputFrame = Instance.new("Frame")
    inputFrame.Name = "InputFrame"
    inputFrame.Size = UDim2.new(1, 0, 1, 0)
    inputFrame.BackgroundColor3 = COLORS.Frame
    inputFrame.BorderSizePixel = 0
    inputFrame.Parent = inputContainer
    
    createCorner(inputFrame, UDim.new(0, 8))
    
    -- Input Label
    local inputLabel = Instance.new("TextLabel")
    inputLabel.Name = "InputLabel"
    inputLabel.Size = UDim2.new(1, -20, 0, 20)
    inputLabel.Position = UDim2.new(0, 10, 0, 5)
    inputLabel.BackgroundTransparency = 1
    inputLabel.Font = FONT
    inputLabel.TextColor3 = COLORS.Text
    inputLabel.TextSize = 14
    inputLabel.Text = config.Text or "Input"
    inputLabel.TextXAlignment = Enum.TextXAlignment.Left
    inputLabel.Parent = inputFrame
    
    -- Text Box
    local textBox = Instance.new("TextBox")
    textBox.Name = "TextBox"
    textBox.Size = UDim2.new(1, -20, 0, 25)
    textBox.Position = UDim2.new(0, 10, 0, 25)
    textBox.BackgroundColor3 = COLORS.Input
    textBox.BorderSizePixel = 0
    textBox.Font = Enum.Font.Gotham
    textBox.TextColor3 = COLORS.Text
    textBox.TextSize = 13
    textBox.PlaceholderText = config.Placeholder or "Enter text..."
    textBox.PlaceholderColor3 = COLORS.TextSecondary
    textBox.Text = config.Default or ""
    textBox.ClearTextOnFocus = false
    textBox.Parent = inputFrame
    
    createCorner(textBox, UDim.new(0, 6))
    createStroke(textBox, COLORS.Separator, 1)
    
    -- Focus Effects
    textBox.Focused:Connect(function()
        tweenObject(textBox, TweenInfo.new(0.2), {BackgroundColor3 = COLORS.Hover})
        local stroke = textBox:FindFirstChild("UIStroke")
        if stroke then
            tweenObject(stroke, TweenInfo.new(0.2), {Color = COLORS.Accent})
        end
    end)
    
    textBox.FocusLost:Connect(function(enterPressed)
        tweenObject(textBox, TweenInfo.new(0.2), {BackgroundColor3 = COLORS.Input})
        local stroke = textBox:FindFirstChild("UIStroke")
        if stroke then
            tweenObject(stroke, TweenInfo.new(0.2), {Color = COLORS.Separator})
        end
        
        if enterPressed and config.Callback then
            config.Callback(textBox.Text)
        end
    end)
    
    -- Methods
    local methods = {}
    
    function methods.setText(text)
        textBox.Text = text
    end
    
    function methods.getText()
        return textBox.Text
    end
    
    tab.ContentLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        self:UpdateCanvasSize(tab)
    end)
    
    return textBox, methods
end

function ModernGUILibrary:CreateDropdown(tab, config)
    local dropdownContainer = Instance.new("Frame")
    dropdownContainer.Name = "DropdownContainer"
    dropdownContainer.Size = UDim2.new(1, 0, 0, 60)
    dropdownContainer.BackgroundTransparency = 1
    dropdownContainer.Parent = tab.ContentFrame
    
    local dropdownFrame = Instance.new("Frame")
    dropdownFrame.Name = "DropdownFrame"
    dropdownFrame.Size = UDim2.new(1, 0, 1, 0)
    dropdownFrame.BackgroundColor3 = COLORS.Frame
    dropdownFrame.BorderSizePixel = 0
    dropdownFrame.Parent = dropdownContainer
    
    createCorner(dropdownFrame, UDim.new(0, 8))
    
    -- Dropdown Label
    local dropdownLabel = Instance.new("TextLabel")
    dropdownLabel.Name = "DropdownLabel"
    dropdownLabel.Size = UDim2.new(1, -20, 0, 20)
    dropdownLabel.Position = UDim2.new(0, 10, 0, 5)
    dropdownLabel.BackgroundTransparency = 1
    dropdownLabel.Font = FONT
    dropdownLabel.TextColor3 = COLORS.Text
    dropdownLabel.TextSize = 14
    dropdownLabel.Text = config.Text or "Dropdown"
    dropdownLabel.TextXAlignment = Enum.TextXAlignment.Left
    dropdownLabel.Parent = dropdownFrame
    
    -- Dropdown Button
    local dropdownButton = Instance.new("TextButton")
    dropdownButton.Name = "DropdownButton"
    dropdownButton.Size = UDim2.new(1, -20, 0, 25)
    dropdownButton.Position = UDim2.new(0, 10, 0, 25)
    dropdownButton.BackgroundColor3 = COLORS.Input
    dropdownButton.BorderSizePixel = 0
    dropdownButton.Font = Enum.Font.Gotham
    dropdownButton.TextColor3 = COLORS.Text
    dropdownButton.TextSize = 13
    dropdownButton.Text = config.Default or "Select..."
    dropdownButton.TextXAlignment = Enum.TextXAlignment.Left
    dropdownButton.Parent = dropdownFrame
    
    createCorner(dropdownButton, UDim.new(0, 6))
    createStroke(dropdownButton, COLORS.Separator, 1)
    
    -- Dropdown Arrow
    local arrow = Instance.new("ImageLabel")
    arrow.Name = "Arrow"
    arrow.Size = UDim2.new(0, 12, 0, 12)
    arrow.Position = UDim2.new(1, -20, 0.5, -6)
    arrow.BackgroundTransparency = 1
    arrow.Image = Icons["chevron-down"] or "rbxassetid://7072706796"
    arrow.ImageColor3 = COLORS.TextSecondary
    arrow.Parent = dropdownButton
    
    -- Add padding to text
    local textPadding = Instance.new("UIPadding")
    textPadding.PaddingLeft = UDim.new(0, 8)
    textPadding.PaddingRight = UDim.new(0, 28)
    textPadding.Parent = dropdownButton
    
    -- Dropdown List
    local dropdownList = Instance.new("Frame")
    dropdownList.Name = "DropdownList"
    dropdownList.Size = UDim2.new(1, -20, 0, 0)
    dropdownList.Position = UDim2.new(0, 10, 0, 52)
    dropdownList.BackgroundColor3 = COLORS.Input
    dropdownList.BorderSizePixel = 0
    dropdownList.Visible = false
    dropdownList.ZIndex = dropdownFrame.ZIndex + 10
    dropdownList.Parent = dropdownFrame
    
    createCorner(dropdownList, UDim.new(0, 6))
    createStroke(dropdownList, COLORS.Separator, 1)
    
    -- Dropdown ScrollingFrame
    local scrollingFrame = Instance.new("ScrollingFrame")
    scrollingFrame.Name = "ScrollingFrame"
    scrollingFrame.Size = UDim2.new(1, 0, 1, 0)
    scrollingFrame.BackgroundTransparency = 1
    scrollingFrame.ScrollBarThickness = 4
    scrollingFrame.ScrollBarImageColor3 = COLORS.Separator
    scrollingFrame.BorderSizePixel = 0
    scrollingFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
    scrollingFrame.Parent = dropdownList
    
    -- List Layout
    local listLayout = Instance.new("UIListLayout")
    listLayout.SortOrder = Enum.SortOrder.LayoutOrder
    listLayout.Parent = scrollingFrame
    
    -- State Management
    local isOpen = false
    local selectedValue = config.Default or ""
    local options = config.Options or {}
    
    -- Create Option Buttons
    local function createOptions()
        -- Clear existing options
        for _, child in pairs(scrollingFrame:GetChildren()) do
            if child:IsA("TextButton") then
                child:Destroy()
            end
        end
        
        for i, option in ipairs(options) do
            local optionButton = Instance.new("TextButton")
            optionButton.Name = "Option" .. i
            optionButton.Size = UDim2.new(1, 0, 0, 30)
            optionButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
            optionButton.BackgroundTransparency = 1
            optionButton.BorderSizePixel = 0
            optionButton.Font = Enum.Font.Gotham
            optionButton.TextColor3 = COLORS.Text
            optionButton.TextSize = 13
            optionButton.Text = option
            optionButton.TextXAlignment = Enum.TextXAlignment.Left
            optionButton.Parent = scrollingFrame
            
            -- Option padding
            local optionPadding = Instance.new("UIPadding")
            optionPadding.PaddingLeft = UDim.new(0, 8)
            optionPadding.Parent = optionButton
            
            -- Option Events
            optionButton.MouseEnter:Connect(function()
                tweenObject(optionButton, TweenInfo.new(0.2), {BackgroundTransparency = 0.9})
            end)
            
            optionButton.MouseLeave:Connect(function()
                tweenObject(optionButton, TweenInfo.new(0.2), {BackgroundTransparency = 1})
            end)
            
            optionButton.MouseButton1Click:Connect(function()
                selectedValue = option
                dropdownButton.Text = option
                
                -- Close dropdown
                isOpen = false
                dropdownList.Visible = false
                tweenObject(arrow, TweenInfo.new(0.2), {Rotation = 0})
                
                if config.Callback then
                    config.Callback(option)
                end
            end)
        end
        
        -- Update canvas size
        local contentSize = listLayout.AbsoluteContentSize.Y
        scrollingFrame.CanvasSize = UDim2.new(0, 0, 0, contentSize)
        
        -- Update dropdown list size
        local maxHeight = math.min(120, contentSize)
        dropdownList.Size = UDim2.new(1, -20, 0, maxHeight)
        
        -- Update container size to accommodate dropdown when open
        if isOpen then
            dropdownContainer.Size = UDim2.new(1, 0, 0, 60 + maxHeight + 5)
        end
    end
    
    -- Initialize options
    createOptions()
    
    -- Dropdown Events
    dropdownButton.MouseButton1Click:Connect(function()
        isOpen = not isOpen
        dropdownList.Visible = isOpen
        
        if isOpen then
            local maxHeight = math.min(120, listLayout.AbsoluteContentSize.Y)
            dropdownContainer.Size = UDim2.new(1, 0, 0, 60 + maxHeight + 5)
            tweenObject(arrow, TweenInfo.new(0.2), {Rotation = 180})
        else
            dropdownContainer.Size = UDim2.new(1, 0, 0, 60)
            tweenObject(arrow, TweenInfo.new(0.2), {Rotation = 0})
        end
    end)
    
    dropdownButton.MouseEnter:Connect(function()
        tweenObject(dropdownButton, TweenInfo.new(0.2), {BackgroundColor3 = COLORS.Hover})
    end)
    
    dropdownButton.MouseLeave:Connect(function()
        tweenObject(dropdownButton, TweenInfo.new(0.2), {BackgroundColor3 = COLORS.Input})
    end)
    
    -- Methods
    local methods = {}
    
    function methods.setOptions(newOptions, newDefault)
        options = newOptions or {}
        if newDefault then
            selectedValue = newDefault
            dropdownButton.Text = newDefault
        end
        createOptions()
    end
    
    function methods.getSelected()
        return selectedValue
    end
    
    function methods.setSelected(value)
        if table.find(options, value) then
            selectedValue = value
            dropdownButton.Text = value
            if config.Callback then
                config.Callback(value)
            end
        end
    end
    
    tab.ContentLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        self:UpdateCanvasSize(tab)
    end)
    
    return dropdownButton, methods
end

-- Main Library Functions
function TeleportGUILibrary.MakeTab(config)
    -- Create library instance if it doesn't exist
    if not TeleportGUILibrary.Instance then
        TeleportGUILibrary.Instance = ModernGUILibrary.new({
            Title = "GROW A GARDEN V2",
            Description = "Advanced GUI Library",
            Size = UDim2.new(0, 450, 0, 350)
        })
        
        -- Expose ContentFrame for compatibility
        TeleportGUILibrary.ContentFrame = TeleportGUILibrary.Instance.ContentContainer
    end
    
    return TeleportGUILibrary.Instance:CreateTab(config)
end

-- Notification System
function TeleportGUILibrary.createNotification(message, type)
    local notificationGui = Instance.new("ScreenGui")
    notificationGui.Name = "NotificationGui"
    notificationGui.ResetOnSpawn = false
    notificationGui.Parent = PlayerGui
    
    local notification = Instance.new("Frame")
    notification.Name = "Notification"
    notification.Size = UDim2.new(0, 300, 0, 60)
    notification.Position = UDim2.new(1, 10, 0, 10)
    notification.BackgroundColor3 = COLORS.Frame
    notification.BorderSizePixel = 0
    notification.Parent = notificationGui
    
    createCorner(notification, UDim.new(0, 8))
    createStroke(notification, COLORS.Separator, 1)
    
    -- Type-based colors
    local typeColors = {
        success = COLORS.Success,
        error = COLORS.Error,
        warning = COLORS.Warning,
        info = COLORS.Accent
    }
    
    local typeColor = typeColors[type] or COLORS.Accent
    
    -- Color strip
    local colorStrip = Instance.new("Frame")
    colorStrip.Name = "ColorStrip"
    colorStrip.Size = UDim2.new(0, 4, 1, 0)
    colorStrip.BackgroundColor3 = typeColor
    colorStrip.BorderSizePixel = 0
    colorStrip.Parent = notification
    
    createCorner(colorStrip, UDim.new(0, 2))
    
    -- Notification text
    local notificationText = Instance.new("TextLabel")
    notificationText.Name = "NotificationText"
    notificationText.Size = UDim2.new(1, -60, 1, 0)
    notificationText.Position = UDim2.new(0, 15, 0, 0)
    notificationText.BackgroundTransparency = 1
    notificationText.Font = Enum.Font.Gotham
    notificationText.TextColor3 = COLORS.Text
    notificationText.TextSize = 14
    notificationText.Text = message
    notificationText.TextXAlignment = Enum.TextXAlignment.Left
    notificationText.TextWrapped = true
    notificationText.Parent = notification
    
    -- Close button
    local closeButton = Instance.new("TextButton")
    closeButton.Name = "CloseButton"
    closeButton.Size = UDim2.new(0, 30, 0, 30)
    closeButton.Position = UDim2.new(1, -35, 0.5, -15)
    closeButton.BackgroundColor3 = COLORS.Input
    closeButton.BorderSizePixel = 0
    closeButton.Font = FONT
    closeButton.TextColor3 = COLORS.Text
    closeButton.Text = "Ã—"
    closeButton.TextSize = 18
    closeButton.Parent = notification
    
    createCorner(closeButton, UDim.new(0, 6))
    
    -- Animate in
    tweenObject(notification, TweenInfo.new(0.3, Enum.EasingStyle.Back), {Position = UDim2.new(1, -310, 0, 10)})
    
    -- Auto-remove after 5 seconds
    local autoRemove = coroutine.create(function()
        wait(5)
        -- Animate out
        tweenObject(notification, TweenInfo.new(0.3), {Position = UDim2.new(1, 10, 0, 10)})
        wait(0.3)
        notificationGui:Destroy()
    end)
    
    coroutine.resume(autoRemove)
    
    -- Manual close
    closeButton.MouseButton1Click:Connect(function()
        coroutine.close(autoRemove)
        tweenObject(notification, TweenInfo.new(0.3), {Position = UDim2.new(1, 10, 0, 10)})
        wait(0.3)
        notificationGui:Destroy()
    end)
    
    closeButton.MouseEnter:Connect(function()
        tweenObject(closeButton, TweenInfo.new(0.2), {BackgroundColor3 = COLORS.Hover})
    end)
    
    closeButton.MouseLeave:Connect(function()
        tweenObject(closeButton, TweenInfo.new(0.2), {BackgroundColor3 = COLORS.Input})
    end)
end

-- Tab Methods for compatibility with original script
local function addTabMethods(tab)
    function tab:AddDropdown(id, text, options, default, description, callback)
        return self:AddDropdown({
            Text = text,
            Options = options,
            Default = default,
            Callback = callback
        })
    end
    
    function tab:AddButton(id, text, description, callback, icon)
        return self:AddButton({
            Text = text,
            Icon = icon,
            Callback = callback
        })
    end
    
    function tab:AddCheckbox(id, text, description, callback)
        return self:AddCheckbox({
            Text = text,
            Callback = callback
        })
    end
    
    function tab:AddTextInput(id, text, default, description, callback)
        return self:AddTextInput({
            Text = text,
            Default = default,
            Callback = callback
        })
    end
end

-- Override CreateTab to add compatibility methods
local originalCreateTab = ModernGUILibrary.CreateTab
function ModernGUILibrary:CreateTab(config)
    local tab = originalCreateTab(self, config)
    addTabMethods(tab)
    return tab
end

return TeleportGUILibrary