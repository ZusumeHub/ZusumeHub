-- XenoLib UI Library
-- Kompatibel dengan Xeno Executor
local XenoLib = {}

local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local CoreGui = game:GetService("CoreGui")
local HttpService = game:GetService("HttpService")

local Player = Players.LocalPlayer
local Mouse = Player:GetMouse()

-- Constants
local ACCENT_COLOR = Color3.fromRGB(0, 120, 255)
local BACKGROUND_COLOR = Color3.fromRGB(30, 30, 30)
local TOPBAR_COLOR = Color3.fromRGB(25, 25, 25)
local ELEMENT_COLOR = Color3.fromRGB(40, 40, 40)
local TEXT_COLOR = Color3.fromRGB(255, 255, 255)
local GRAY_TEXT_COLOR = Color3.fromRGB(150, 150, 150)

-- Utility Functions
local function Create(instanceType)
    return function(properties)
        local instance = Instance.new(instanceType)
        for k, v in pairs(properties or {}) do
            if k ~= "Parent" then
                instance[k] = v
            end
        end
        if properties.Parent then
            instance.Parent = properties.Parent
        end
        return instance
    end
end

local function Tween(instance, properties, duration, style, direction)
    style = style or Enum.EasingStyle.Quad
    direction = direction or Enum.EasingDirection.Out
    
    local tween = TweenService:Create(
        instance,
        TweenInfo.new(duration, style, direction),
        properties
    )
    tween:Play()
    return tween
end

local function IsInBounds(component, x, y)
    local posX, posY = component.AbsolutePosition.X, component.AbsolutePosition.Y
    local sizeX, sizeY = component.AbsoluteSize.X, component.AbsoluteSize.Y
    
    return x >= posX and x <= posX + sizeX and y >= posY and y <= posY + sizeY
end

-- Mouse click handler for Xeno
local function ConnectClick(component, callback)
    -- Use multiple input methods for better compatibility
    local connection1 = UserInputService.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            local mousePos = UserInputService:GetMouseLocation()
            if IsInBounds(component, mousePos.X, mousePos.Y) then
                callback()
            end
        elseif input.UserInputType == Enum.UserInputType.Touch then
            local touchPos = input.Position
            if IsInBounds(component, touchPos.X, touchPos.Y) then
                callback()
            end
        end
    end)
    
    -- Direct mouse click connection as backup
    local connection2 = component.MouseButton1Click:Connect(callback)
    
    -- Store connections to clean up later
    if not component:FindFirstChild("EventConnections") then
        local folder = Create("Folder")({
            Name = "EventConnections",
            Parent = component
        })
    end
    
    table.insert(component.EventConnections:GetChildren(), connection1)
    table.insert(component.EventConnections:GetChildren(), connection2)
end

-- Load settings
local function LoadConfig(configFolder, windowName)
    local success, result = pcall(function()
        if not isfolder(configFolder) then
            makefolder(configFolder)
            return {}
        end
        
        local fileName = configFolder .. "/" .. windowName .. ".json"
        if isfile(fileName) then
            return HttpService:JSONDecode(readfile(fileName))
        end
        return {}
    end)
    
    if success then
        return result
    else
        warn("Failed to load config: " .. tostring(result))
        return {}
    end
end

-- Save settings
local function SaveConfig(configFolder, windowName, data)
    local success, result = pcall(function()
        if not isfolder(configFolder) then
            makefolder(configFolder)
        end
        
        local fileName = configFolder .. "/" .. windowName .. ".json"
        writefile(fileName, HttpService:JSONEncode(data))
    end)
    
    if not success then
        warn("Failed to save config: " .. tostring(result))
    end
end

-- Main UI Creation
function XenoLib:MakeWindow(config)
    config = config or {}
    local windowName = config.Name or "XenoLib Window"
    local configFolder = config.ConfigFolder or "XenoLib"
    local hidePremium = config.HidePremium or false
    local saveConfig = config.SaveConfig or false
    
    -- Load saved configuration if enabled
    local savedConfig = {}
    if saveConfig then
        savedConfig = LoadConfig(configFolder, windowName)
    end
    
    -- Main Container
    local ScreenGui = Create("ScreenGui")({
        Name = "XenoLib_" .. windowName,
        DisplayOrder = 100,
        ResetOnSpawn = false
    })
    
    -- Try to parent to CoreGui for better persistence
    pcall(function()
        if syn then
            syn.protect_gui(ScreenGui)
            ScreenGui.Parent = CoreGui
        else
            ScreenGui.Parent = CoreGui
        end
    end)
    
    if not ScreenGui.Parent then
        ScreenGui.Parent = Player:WaitForChild("PlayerGui")
    end
    
    -- Main Frame
    local MainFrame = Create("Frame")({
        Name = "MainFrame",
        Parent = ScreenGui,
        BackgroundColor3 = BACKGROUND_COLOR,
        BorderSizePixel = 0,
        Position = UDim2.new(0.5, -250, 0.5, -175),
        Size = UDim2.new(0, 500, 0, 350),
        ClipsDescendants = true,
        Active = true,
        Draggable = true -- Enable default Roblox dragging for better compatibility
    })
    
    local Corner = Create("UICorner")({
        CornerRadius = UDim.new(0, 6),
        Parent = MainFrame
    })
    
    -- Topbar
    local Topbar = Create("Frame")({
        Name = "Topbar",
        Parent = MainFrame,
        BackgroundColor3 = TOPBAR_COLOR,
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 0, 30)
    })
    
    local TopbarCorner = Create("UICorner")({
        CornerRadius = UDim.new(0, 6),
        Parent = Topbar
    })
    
    -- Title
    local Title = Create("TextLabel")({
        Name = "Title",
        Parent = Topbar,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 10, 0, 0),
        Size = UDim2.new(1, -20, 1, 0),
        Font = Enum.Font.GothamBold,
        Text = windowName,
        TextColor3 = TEXT_COLOR,
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Left
    })
    
    -- Close Button
    local CloseButton = Create("TextButton")({
        Name = "CloseButton",
        Parent = Topbar,
        BackgroundTransparency = 1,
        Position = UDim2.new(1, -30, 0, 0),
        Size = UDim2.new(0, 30, 1, 0),
        Font = Enum.Font.GothamBold,
        Text = "X",
        TextColor3 = TEXT_COLOR,
        TextSize = 14
    })
    
    ConnectClick(CloseButton, function()
        ScreenGui:Destroy()
    end)
    
    -- Tabs Container
    local TabsContainer = Create("Frame")({
        Name = "TabsContainer",
        Parent = MainFrame,
        BackgroundColor3 = TOPBAR_COLOR,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 0, 30),
        Size = UDim2.new(0, 120, 1, -30)
    })
    
    local TabsListLayout = Create("UIListLayout")({
        Parent = TabsContainer,
        Padding = UDim.new(0, 5),
        SortOrder = Enum.SortOrder.LayoutOrder
    })
    
    local TabsPadding = Create("UIPadding")({
        Parent = TabsContainer,
        PaddingTop = UDim.new(0, 10)
    })
    
    -- Content Container
    local ContentContainer = Create("Frame")({
        Name = "ContentContainer",
        Parent = MainFrame,
        BackgroundColor3 = BACKGROUND_COLOR,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 120, 0, 30),
        Size = UDim2.new(1, -120, 1, -30),
        ClipsDescendants = true
    })
    
    -- Window Methods & Properties
    local Window = {
        Gui = ScreenGui,
        MainFrame = MainFrame,
        Tabs = {},
        ActiveTab = nil,
        ConfigFolder = configFolder,
        Name = windowName,
        SaveConfig = saveConfig,
        SavedConfig = savedConfig
    }
    
    -- Create Tab Method
    function Window:MakeTab(tabConfig)
        tabConfig = tabConfig or {}
        local tabName = tabConfig.Name or "Tab"
        local tabIcon = tabConfig.Icon or ""
        
        -- Tab Button
        local TabButton = Create("TextButton")({
            Name = tabName .. "Button",
            Parent = TabsContainer,
            BackgroundColor3 = ELEMENT_COLOR,
            Size = UDim2.new(1, -20, 0, 30),
            Font = Enum.Font.Gotham,
            Text = tabName,
            TextColor3 = TEXT_COLOR,
            TextSize = 14,
            BorderSizePixel = 0,
            AutoButtonColor = false
        })
        
        local TabButtonCorner = Create("UICorner")({
            CornerRadius = UDim.new(0, 4),
            Parent = TabButton
        })
        
        local TabButtonPadding = Create("UIPadding")({
            Parent = TabButton,
            PaddingLeft = UDim.new(0, 10)
        })
        
        -- Tab Content
        local TabContent = Create("ScrollingFrame")({
            Name = tabName .. "Content",
            Parent = ContentContainer,
            BackgroundTransparency = 1,
            Size = UDim2.new(1, 0, 1, 0),
            CanvasSize = UDim2.new(0, 0, 0, 0),
            ScrollBarThickness = 4,
            ScrollBarImageColor3 = ACCENT_COLOR,
            BorderSizePixel = 0,
            Visible = false,
            AutomaticCanvasSize = Enum.AutomaticSize.Y
        })
        
        local TabContentLayout = Create("UIListLayout")({
            Parent = TabContent,
            Padding = UDim.new(0, 10),
            SortOrder = Enum.SortOrder.LayoutOrder
        })
        
        local TabContentPadding = Create("UIPadding")({
            Parent = TabContent,
            PaddingTop = UDim.new(0, 10),
            PaddingLeft = UDim.new(0, 10),
            PaddingRight = UDim.new(0, 10)
        })
        
        -- Tab Object
        local Tab = {
            Button = TabButton,
            Content = TabContent,
            Name = tabName,
            Sections = {}
        }
        
        -- Select Tab Method
        function Tab:Select()
            for _, otherTab in pairs(Window.Tabs) do
                otherTab.Content.Visible = false
                otherTab.Button.BackgroundColor3 = ELEMENT_COLOR
            end
            
            Tab.Content.Visible = true
            Tab.Button.BackgroundColor3 = ACCENT_COLOR
            Window.ActiveTab = Tab
        end
        
        -- Add Section Method
        function Tab:AddSection(sectionConfig)
            sectionConfig = sectionConfig or {}
            local sectionName = sectionConfig.Name or "Section"
            
            local Section = Create("Frame")({
                Name = sectionName .. "Section",
                Parent = TabContent,
                BackgroundColor3 = ELEMENT_COLOR,
                Size = UDim2.new(1, 0, 0, 36), -- Will be auto-sized by UIListLayout
                AutomaticSize = Enum.AutomaticSize.Y,
                BorderSizePixel = 0
            })
            
            local SectionCorner = Create("UICorner")({
                CornerRadius = UDim.new(0, 4),
                Parent = Section
            })
            
            local SectionTitle = Create("TextLabel")({
                Name = "Title",
                Parent = Section,
                BackgroundTransparency = 1,
                Size = UDim2.new(1, 0, 0, 26),
                Font = Enum.Font.GothamBold,
                Text = sectionName,
                TextColor3 = TEXT_COLOR,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Center
            })
            
            local SectionContent = Create("Frame")({
                Name = "Content",
                Parent = Section,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 0, 0, 26),
                Size = UDim2.new(1, 0, 0, 0),
                AutomaticSize = Enum.AutomaticSize.Y
            })
            
            local SectionContentLayout = Create("UIListLayout")({
                Parent = SectionContent,
                Padding = UDim.new(0, 8),
                SortOrder = Enum.SortOrder.LayoutOrder
            })
            
            local SectionContentPadding = Create("UIPadding")({
                Parent = SectionContent,
                PaddingTop = UDim.new(0, 5),
                PaddingLeft = UDim.new(0, 5),
                PaddingRight = UDim.new(0, 5),
                PaddingBottom = UDim.new(0, 5)
            })
            
            -- Section Object
            local SectionObj = {
                Frame = Section,
                Content = SectionContent,
                Name = sectionName,
                Items = {}
            }
            
            -- Add Button
            function SectionObj:AddButton(buttonConfig)
                buttonConfig = buttonConfig or {}
                local buttonName = buttonConfig.Name or "Button"
                local callback = buttonConfig.Callback or function() end
                
                local Button = Create("TextButton")({
                    Name = buttonName .. "Button",
                    Parent = SectionContent,
                    BackgroundColor3 = BACKGROUND_COLOR,
                    Size = UDim2.new(1, 0, 0, 30),
                    Font = Enum.Font.Gotham,
                    Text = buttonName,
                    TextColor3 = TEXT_COLOR,
                    TextSize = 14,
                    BorderSizePixel = 0,
                    AutoButtonColor = false
                })
                
                local ButtonCorner = Create("UICorner")({
                    CornerRadius = UDim.new(0, 4),
                    Parent = Button
                })
                
                ConnectClick(Button, function()
                    Tween(Button, {BackgroundColor3 = ACCENT_COLOR}, 0.1)
                    callback()
                    Tween(Button, {BackgroundColor3 = BACKGROUND_COLOR}, 0.1)
                end)
                
                return Button
            end
            
            -- Add Toggle
            function SectionObj:AddToggle(toggleConfig)
                toggleConfig = toggleConfig or {}
                local toggleName = toggleConfig.Name or "Toggle"
                local default = toggleConfig.Default or false
                local callback = toggleConfig.Callback or function() end
                
                -- Check saved config
                if Window.SaveConfig and Window.SavedConfig[toggleName] ~= nil then
                    default = Window.SavedConfig[toggleName]
                end
                
                local Toggle = Create("Frame")({
                    Name = toggleName .. "Toggle",
                    Parent = SectionContent,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 30)
                })
                
                local ToggleLabel = Create("TextLabel")({
                    Name = "Label",
                    Parent = Toggle,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 0, 0, 0),
                    Size = UDim2.new(1, -40, 1, 0),
                    Font = Enum.Font.Gotham,
                    Text = toggleName,
                    TextColor3 = TEXT_COLOR,
                    TextSize = 14,
                    TextXAlignment = Enum.TextXAlignment.Left
                })
                
                local ToggleButton = Create("Frame")({
                    Name = "Button",
                    Parent = Toggle,
                    BackgroundColor3 = default and ACCENT_COLOR or BACKGROUND_COLOR,
                    Position = UDim2.new(1, -32, 0.5, -10),
                    Size = UDim2.new(0, 32, 0, 16),
                    BorderSizePixel = 0
                })
                
                local ToggleButtonCorner = Create("UICorner")({
                    CornerRadius = UDim.new(1, 0),
                    Parent = ToggleButton
                })
                
                local ToggleCircle = Create("Frame")({
                    Name = "Circle",
                    Parent = ToggleButton,
                    BackgroundColor3 = TEXT_COLOR,
                    Position = default and UDim2.new(1, -14, 0.5, -6) or UDim2.new(0, 2, 0.5, -6),
                    Size = UDim2.new(0, 12, 0, 12),
                    BorderSizePixel = 0
                })
                
                local ToggleCircleCorner = Create("UICorner")({
                    CornerRadius = UDim.new(1, 0),
                    Parent = ToggleCircle
                })
                
                -- Toggle Object
                local ToggleObj = {
                    Frame = Toggle,
                    Button = ToggleButton,
                    Circle = ToggleCircle,
                    Value = default
                }
                
                -- Save initial config
                if Window.SaveConfig then
                    Window.SavedConfig[toggleName] = default
                    SaveConfig(Window.ConfigFolder, Window.Name, Window.SavedConfig)
                end
                
                -- Toggle Function
                function ToggleObj:SetValue(value)
                    ToggleObj.Value = value
                    
                    if value then
                        Tween(ToggleButton, {BackgroundColor3 = ACCENT_COLOR}, 0.1)
                        Tween(ToggleCircle, {Position = UDim2.new(1, -14, 0.5, -6)}, 0.1)
                    else
                        Tween(ToggleButton, {BackgroundColor3 = BACKGROUND_COLOR}, 0.1)
                        Tween(ToggleCircle, {Position = UDim2.new(0, 2, 0.5, -6)}, 0.1)
                    end
                    
                    callback(value)
                    
                    -- Save config on change
                    if Window.SaveConfig then
                        Window.SavedConfig[toggleName] = value
                        SaveConfig(Window.ConfigFolder, Window.Name, Window.SavedConfig)
                    end
                end
                
                -- Toggle Click
                ConnectClick(Toggle, function()
                    ToggleObj:SetValue(not ToggleObj.Value)
                end)
                
                -- Set initial value
                ToggleObj:SetValue(default)
                callback(default)
                
                return ToggleObj
            end
            
            -- Add Slider
            function SectionObj:AddSlider(sliderConfig)
                sliderConfig = sliderConfig or {}
                local sliderName = sliderConfig.Name or "Slider"
                local min = sliderConfig.Min or 0
                local max = sliderConfig.Max or 100
                local default = sliderConfig.Default or min
                local increment = sliderConfig.Increment or 1
                local valueName = sliderConfig.ValueName or ""
                local callback = sliderConfig.Callback or function() end
                
                -- Check saved config
                if Window.SaveConfig and Window.SavedConfig[sliderName] ~= nil then
                    default = Window.SavedConfig[sliderName]
                end
                
                -- Clamp default value
                default = math.clamp(default, min, max)
                
                local Slider = Create("Frame")({
                    Name = sliderName .. "Slider",
                    Parent = SectionContent,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 45)
                })
                
                local SliderLabel = Create("TextLabel")({
                    Name = "Label",
                    Parent = Slider,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 20),
                    Font = Enum.Font.Gotham,
                    Text = sliderName,
                    TextColor3 = TEXT_COLOR,
                    TextSize = 14,
                    TextXAlignment = Enum.TextXAlignment.Left
                })
                
                local SliderValue = Create("TextLabel")({
                    Name = "Value",
                    Parent = Slider,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(1, -50, 0, 0),
                    Size = UDim2.new(0, 50, 0, 20),
                    Font = Enum.Font.Gotham,
                    Text = tostring(default) .. " " .. valueName,
                    TextColor3 = TEXT_COLOR,
                    TextSize = 14,
                    TextXAlignment = Enum.TextXAlignment.Right
                })
                
                local SliderBackground = Create("Frame")({
                    Name = "Background",
                    Parent = Slider,
                    BackgroundColor3 = BACKGROUND_COLOR,
                    Position = UDim2.new(0, 0, 0, 25),
                    Size = UDim2.new(1, 0, 0, 10),
                    BorderSizePixel = 0
                })
                
                local SliderBackgroundCorner = Create("UICorner")({
                    CornerRadius = UDim.new(0, 4),
                    Parent = SliderBackground
                })
                
                local SliderFill = Create("Frame")({
                    Name = "Fill",
                    Parent = SliderBackground,
                    BackgroundColor3 = ACCENT_COLOR,
                    Size = UDim2.new((default - min) / (max - min), 0, 1, 0),
                    BorderSizePixel = 0
                })
                
                local SliderFillCorner = Create("UICorner")({
                    CornerRadius = UDim.new(0, 4),
                    Parent = SliderFill
                })
                
                -- Slider Object
                local SliderObj = {
                    Frame = Slider,
                    Background = SliderBackground,
                    Fill = SliderFill,
                    Value = default,
                    Min = min,
                    Max = max,
                    Increment = increment
                }
                
                -- Save initial config
                if Window.SaveConfig then
                    Window.SavedConfig[sliderName] = default
                    SaveConfig(Window.ConfigFolder, Window.Name, Window.SavedConfig)
                end
                
                -- Set Value Function
                function SliderObj:SetValue(value)
                    -- Round to increment
                    value = min + (math.floor((value - min) / increment + 0.5) * increment)
                    -- Clamp value
                    value = math.clamp(value, min, max)
                    
                    SliderObj.Value = value
                    SliderValue.Text = tostring(value) .. " " .. valueName
                    SliderFill.Size = UDim2.new((value - min) / (max - min), 0, 1, 0)
                    
                    callback(value)
                    
                    -- Save config on change
                    if Window.SaveConfig then
                        Window.SavedConfig[sliderName] = value
                        SaveConfig(Window.ConfigFolder, Window.Name, Window.SavedConfig)
                    end
                end
                
                -- Handle Slider Drag
                local isDragging = false
                
                UserInputService.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                        local position = UserInputService:GetMouseLocation()
                        if IsInBounds(SliderBackground, position.X, position.Y) then
                            isDragging = true
                        end
                    end
                end)
                
                UserInputService.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                        isDragging = false
                    end
                end)
                
                RunService.RenderStepped:Connect(function()
                    if isDragging then
                        local mousePos = UserInputService:GetMouseLocation()
                        local relativeX = mousePos.X - SliderBackground.AbsolutePosition.X
                        local percent = math.clamp(relativeX / SliderBackground.AbsoluteSize.X, 0, 1)
                        local value = min + ((max - min) * percent)
                        SliderObj:SetValue(value)
                    end
                end)
                
                SliderObj:SetValue(default)
                
                return SliderObj
            end
            
            -- Add Dropdown
            function SectionObj:AddDropdown(dropdownConfig)
                dropdownConfig = dropdownConfig or {}
                local dropdownName = dropdownConfig.Name or "Dropdown"
                local options = dropdownConfig.Options or {}
                local default = dropdownConfig.Default or nil
                local callback = dropdownConfig.Callback or function() end
                
                -- Check saved config
                if Window.SaveConfig and Window.SavedConfig[dropdownName] ~= nil then
                    default = Window.SavedConfig[dropdownName]
                end
                
                local Dropdown = Create("Frame")({
                    Name = dropdownName .. "Dropdown",
                    Parent = SectionContent,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 30),
                    ClipsDescendants = true
                })
                
                local DropdownLabel = Create("TextLabel")({
                    Name = "Label",
                    Parent = Dropdown,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 20),
                    Font = Enum.Font.Gotham,
                    Text = dropdownName,
                    TextColor3 = TEXT_COLOR,
                    TextSize = 14,
                    TextXAlignment = Enum.TextXAlignment.Left
                })
                
                local DropdownButton = Create("TextButton")({
                    Name = "Button",
                    Parent = Dropdown,
                    BackgroundColor3 = BACKGROUND_COLOR,
                    Position = UDim2.new(0, 0, 0, 20),
                    Size = UDim2.new(1, 0, 0, 30),
                    Font = Enum.Font.Gotham,
                    Text = default or "Select...",
                    TextColor3 = default and TEXT_COLOR or GRAY_TEXT_COLOR,
                    TextSize = 14,
                    BorderSizePixel = 0,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    AutoButtonColor = false
                })
                
                local DropdownButtonPadding = Create("UIPadding")({
                    Parent = DropdownButton,
                    PaddingLeft = UDim.new(0, 5)
                })
                
                local DropdownButtonCorner = Create("UICorner")({
                    CornerRadius = UDim.new(0, 4),
                    Parent = DropdownButton
                })
                
                local DropdownContainer = Create("Frame")({
                    Name = "Container",
                    Parent = Dropdown,
                    BackgroundColor3 = ELEMENT_COLOR,
                    Position = UDim2.new(0, 0, 0, 55),
                    Size = UDim2.new(1, 0, 0, 0), -- Will expand when opened
                    BorderSizePixel = 0,
                    Visible = false
                })
                
                local DropdownContainerCorner = Create("UICorner")({
                    CornerRadius = UDim.new(0, 4),
                    Parent = DropdownContainer
                })
                
                local DropdownContainerLayout = Create("UIListLayout")({
                    Parent = DropdownContainer,
                    Padding = UDim.new(0, 2),
                    SortOrder = Enum.SortOrder.LayoutOrder
                })
                
                -- Populate options
                for i, option in ipairs(options) do
                    local OptionButton = Create("TextButton")({
                        Name = "Option_" .. option,
                        Parent = DropdownContainer,
                        BackgroundTransparency = 1,
                        Size = UDim2.new(1, 0, 0, 25),
                        Font = Enum.Font.Gotham,
                        Text = option,
                        TextColor3 = TEXT_COLOR,
                        TextSize = 14
                    })
                    
                    -- Option click handler
                    ConnectClick(OptionButton, function()
                        DropdownButton.Text = option
                        DropdownButton.TextColor3 = TEXT_COLOR
                        
                        -- Close dropdown
                        Tween(Dropdown, {Size = UDim2.new(1, 0, 0, 50)}, 0.2)
                        Tween(DropdownContainer, {Size = UDim2.new(1, 0, 0, 0)}, 0.2)
                        
                        task.wait(0.2)
                        