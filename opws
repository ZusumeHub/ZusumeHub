local Players = game:GetService("Players")
local UIS = game:GetService("UserInputService")
local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")

-- Create GUI
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "TeleportGUI"
ScreenGui.ResetOnSpawn = false
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
ScreenGui.Parent = PlayerGui

-- Main Frame
local MainFrame = Instance.new("Frame")
MainFrame.Name = "MainFrame"
MainFrame.Size = UDim2.new(0, 250, 0, 220) -- Made taller to accommodate dropdown
MainFrame.Position = UDim2.new(0.5, -125, 0.5, -110)
MainFrame.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
MainFrame.BorderSizePixel = 0
MainFrame.ClipsDescendants = true
MainFrame.Parent = ScreenGui

-- Round the corners
local UICorner = Instance.new("UICorner")
UICorner.CornerRadius = UDim.new(0, 10)
UICorner.Parent = MainFrame

-- Top Bar
local TopBar = Instance.new("Frame")
TopBar.Name = "TopBar"
TopBar.Size = UDim2.new(1, 0, 0, 30)
TopBar.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
TopBar.BorderSizePixel = 0
TopBar.Parent = MainFrame

-- Title
local Title = Instance.new("TextLabel")
Title.Name = "Title"
Title.Size = UDim2.new(1, -60, 1, 0)
Title.Position = UDim2.new(0, 10, 0, 0)
Title.BackgroundTransparency = 1
Title.TextColor3 = Color3.fromRGB(255, 255, 255)
Title.TextSize = 16
Title.Font = Enum.Font.GothamBold
Title.Text = "Quest Teleporter"
Title.TextXAlignment = Enum.TextXAlignment.Left
Title.Parent = TopBar

-- Close Button
local CloseButton = Instance.new("TextButton")
CloseButton.Name = "CloseButton"
CloseButton.Size = UDim2.new(0, 25, 0, 25)
CloseButton.Position = UDim2.new(1, -28, 0, 2)
CloseButton.BackgroundColor3 = Color3.fromRGB(255, 70, 70)
CloseButton.BorderSizePixel = 0
CloseButton.Font = Enum.Font.GothamBold
CloseButton.TextColor3 = Color3.fromRGB(255, 255, 255)
CloseButton.Text = "X"
CloseButton.TextSize = 14
CloseButton.Parent = TopBar

-- Round the close button
local CloseCorner = Instance.new("UICorner")
CloseCorner.CornerRadius = UDim.new(0, 5)
CloseCorner.Parent = CloseButton

-- Minimize Button
local MinimizeButton = Instance.new("TextButton")
MinimizeButton.Name = "MinimizeButton"
MinimizeButton.Size = UDim2.new(0, 25, 0, 25)
MinimizeButton.Position = UDim2.new(1, -58, 0, 2)
MinimizeButton.BackgroundColor3 = Color3.fromRGB(70, 70, 255)
MinimizeButton.BorderSizePixel = 0
MinimizeButton.Font = Enum.Font.GothamBold
MinimizeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
MinimizeButton.Text = "-"
MinimizeButton.TextSize = 16
MinimizeButton.Parent = TopBar

-- Round the minimize button
local MinimizeCorner = Instance.new("UICorner")
MinimizeCorner.CornerRadius = UDim.new(0, 5)
MinimizeCorner.Parent = MinimizeButton

-- Content Frame
local ContentFrame = Instance.new("Frame")
ContentFrame.Name = "ContentFrame"
ContentFrame.Size = UDim2.new(1, 0, 1, -30)
ContentFrame.Position = UDim2.new(0, 0, 0, 30)
ContentFrame.BackgroundTransparency = 1
ContentFrame.Parent = MainFrame

-- Dropdown Label
local DropdownLabel = Instance.new("TextLabel")
DropdownLabel.Name = "DropdownLabel"
DropdownLabel.Size = UDim2.new(0.8, 0, 0, 30)
DropdownLabel.Position = UDim2.new(0.1, 0, 0.05, 0)
DropdownLabel.BackgroundTransparency = 1
DropdownLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
DropdownLabel.TextSize = 14
DropdownLabel.Font = Enum.Font.GothamSemibold
DropdownLabel.Text = "Teleportation"
DropdownLabel.TextXAlignment = Enum.TextXAlignment.Left
DropdownLabel.Parent = ContentFrame

-- Dropdown Frame (container for dropdown button and list)
local DropdownContainer = Instance.new("Frame")
DropdownContainer.Name = "DropdownContainer"
DropdownContainer.Size = UDim2.new(0.8, 0, 0, 35)
DropdownContainer.Position = UDim2.new(0.1, 0, 0.2, 0)
DropdownContainer.BackgroundTransparency = 1
DropdownContainer.BorderSizePixel = 0
DropdownContainer.ZIndex = 2
DropdownContainer.Parent = ContentFrame

-- Dropdown Button Frame
local DropdownFrame = Instance.new("Frame")
DropdownFrame.Name = "DropdownFrame"
DropdownFrame.Size = UDim2.new(1, 0, 0, 35)
DropdownFrame.Position = UDim2.new(0, 0, 0, 0)
DropdownFrame.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
DropdownFrame.BorderSizePixel = 0
DropdownFrame.ZIndex = 2
DropdownFrame.Parent = DropdownContainer

-- Round the dropdown frame
local DropdownCorner = Instance.new("UICorner")
DropdownCorner.CornerRadius = UDim.new(0, 6)
DropdownCorner.Parent = DropdownFrame

-- Dropdown Button
local DropdownButton = Instance.new("TextButton")
DropdownButton.Name = "DropdownButton"
DropdownButton.Size = UDim2.new(1, 0, 1, 0)
DropdownButton.BackgroundTransparency = 1
DropdownButton.Font = Enum.Font.Gotham
DropdownButton.TextColor3 = Color3.fromRGB(255, 255, 255)
DropdownButton.Text = "Select destination..."
DropdownButton.TextSize = 14
DropdownButton.TextXAlignment = Enum.TextXAlignment.Left
DropdownButton.TextTruncate = Enum.TextTruncate.AtEnd
DropdownButton.ZIndex = 2
DropdownButton.Parent = DropdownFrame

-- Dropdown Padding
local Padding = Instance.new("UIPadding")
Padding.PaddingLeft = UDim.new(0, 10)
Padding.Parent = DropdownButton

-- Dropdown Arrow
local DropdownArrow = Instance.new("TextLabel")
DropdownArrow.Name = "DropdownArrow"
DropdownArrow.Size = UDim2.new(0, 25, 1, 0)
DropdownArrow.Position = UDim2.new(1, -25, 0, 0)
DropdownArrow.BackgroundTransparency = 1
DropdownArrow.TextColor3 = Color3.fromRGB(200, 200, 200)
DropdownArrow.TextSize = 16
DropdownArrow.Font = Enum.Font.GothamBold
DropdownArrow.Text = "â–¼"
DropdownArrow.ZIndex = 2
DropdownArrow.Parent = DropdownFrame

-- Create dropdown list (options container)
local DropdownList = Instance.new("Frame")
DropdownList.Name = "DropdownList"
DropdownList.Size = UDim2.new(1, 0, 0, 105) -- Increased height for 3 options (35 height each)
DropdownList.Position = UDim2.new(0, 0, 1, 0) -- Position right below dropdown button
DropdownList.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
DropdownList.BorderSizePixel = 0
DropdownList.Visible = false
DropdownList.ZIndex = 3 -- Higher zIndex to appear above other elements
DropdownList.Parent = DropdownFrame

-- Round the dropdown list corners
local DropdownListCorner = Instance.new("UICorner")
DropdownListCorner.CornerRadius = UDim.new(0, 6)
DropdownListCorner.Parent = DropdownList

-- Dropdown options list layout
local OptionsLayout = Instance.new("UIListLayout")
OptionsLayout.FillDirection = Enum.FillDirection.Vertical
OptionsLayout.SortOrder = Enum.SortOrder.LayoutOrder
OptionsLayout.Padding = UDim.new(0, 1)
OptionsLayout.Parent = DropdownList

-- Create option buttons
local optionHeight = 35

-- Option 1: Teleport to next quest
local Option1 = Instance.new("TextButton")
Option1.Name = "Option1"
Option1.Size = UDim2.new(1, 0, 0, optionHeight - 1)
Option1.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
Option1.BorderSizePixel = 0
Option1.Font = Enum.Font.Gotham
Option1.TextColor3 = Color3.fromRGB(255, 255, 255)
Option1.Text = "Teleport to next quest"
Option1.TextSize = 14
Option1.TextXAlignment = Enum.TextXAlignment.Left
Option1.ZIndex = 3
Option1.LayoutOrder = 1
Option1.Parent = DropdownList

-- Option 1 padding
local Option1Padding = Instance.new("UIPadding")
Option1Padding.PaddingLeft = UDim.new(0, 10)
Option1Padding.Parent = Option1

-- Option 2: Teleport to training skill
local Option2 = Instance.new("TextButton")
Option2.Name = "Option2"
Option2.Size = UDim2.new(1, 0, 0, optionHeight - 1)
Option2.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
Option2.BorderSizePixel = 0
Option2.Font = Enum.Font.Gotham
Option2.TextColor3 = Color3.fromRGB(255, 255, 255)
Option2.Text = "Teleport to training skill"
Option2.TextSize = 14
Option2.TextXAlignment = Enum.TextXAlignment.Left
Option2.ZIndex = 3
Option2.LayoutOrder = 2
Option2.Parent = DropdownList

-- Option 2 padding
local Option2Padding = Instance.new("UIPadding")
Option2Padding.PaddingLeft = UDim.new(0, 10)
Option2Padding.Parent = Option2

-- Option 3: Teleport to Drop Supplies (NEW)
local Option3 = Instance.new("TextButton")
Option3.Name = "Option3"
Option3.Size = UDim2.new(1, 0, 0, optionHeight - 1)
Option3.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
Option3.BorderSizePixel = 0
Option3.Font = Enum.Font.Gotham
Option3.TextColor3 = Color3.fromRGB(255, 255, 255)
Option3.Text = "Teleport to Drop Supplies"
Option3.TextSize = 14
Option3.TextXAlignment = Enum.TextXAlignment.Left
Option3.ZIndex = 3
Option3.LayoutOrder = 3
Option3.Parent = DropdownList

-- Option 3 padding
local Option3Padding = Instance.new("UIPadding")
Option3Padding.PaddingLeft = UDim.new(0, 10)
Option3Padding.Parent = Option3

-- Apply Button
local ApplyButton = Instance.new("TextButton")
ApplyButton.Name = "ApplyButton"
ApplyButton.Size = UDim2.new(0.8, 0, 0, 40)
ApplyButton.Position = UDim2.new(0.1, 0, 0.4, 0)
ApplyButton.BackgroundColor3 = Color3.fromRGB(70, 200, 120)
ApplyButton.BorderSizePixel = 0
ApplyButton.Font = Enum.Font.GothamBold
ApplyButton.TextColor3 = Color3.fromRGB(255, 255, 255)
ApplyButton.Text = "Apply"
ApplyButton.TextSize = 14
ApplyButton.Parent = ContentFrame

-- Round the apply button
local ApplyCorner = Instance.new("UICorner")
ApplyCorner.CornerRadius = UDim.new(0, 8)
ApplyCorner.Parent = ApplyButton

-- AutoAttack Button (renamed from ToggleButton)
local AutoAttackButton = Instance.new("TextButton")
AutoAttackButton.Name = "AutoAttackButton"
AutoAttackButton.Size = UDim2.new(0.8, 0, 0, 40)
AutoAttackButton.Position = UDim2.new(0.1, 0, 0.65, 0)
AutoAttackButton.BackgroundColor3 = Color3.fromRGB(200, 70, 70)
AutoAttackButton.BorderSizePixel = 0
AutoAttackButton.Font = Enum.Font.GothamBold
AutoAttackButton.TextColor3 = Color3.fromRGB(255, 255, 255)
AutoAttackButton.Text = "AutoAttack: OFF"
AutoAttackButton.TextSize = 14
AutoAttackButton.Parent = ContentFrame

-- Round the autoattack button
local AutoAttackCorner = Instance.new("UICorner")
AutoAttackCorner.CornerRadius = UDim.new(0, 8)
AutoAttackCorner.Parent = AutoAttackButton

-- Status Label
local StatusLabel = Instance.new("TextLabel")
StatusLabel.Name = "StatusLabel"
StatusLabel.Size = UDim2.new(0.8, 0, 0, 25)
StatusLabel.Position = UDim2.new(0.1, 0, 0.85, 0)
StatusLabel.BackgroundTransparency = 1
StatusLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
StatusLabel.TextSize = 12
StatusLabel.Font = Enum.Font.Gotham
StatusLabel.Text = "Ready"
StatusLabel.TextXAlignment = Enum.TextXAlignment.Center
StatusLabel.Parent = ContentFrame

-- Toggle Status
local autoAttackStatus = false

-- Minimize Status
local isMinimized = false
local originalSize = MainFrame.Size

-- Selected teleport option
local selectedOption = nil

-- Auto Attack Connection
local autoAttackConnection = nil

-- Make GUI draggable
local dragging
local dragInput
local dragStart
local startPos

local function updateDrag(input)
    local delta = input.Position - dragStart
    MainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
end

TopBar.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        startPos = MainFrame.Position
        
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

TopBar.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
        dragInput = input
    end
end)

UIS.InputChanged:Connect(function(input)
    if input == dragInput and dragging then
        updateDrag(input)
    end
end)

-- Close GUI function
CloseButton.MouseButton1Click:Connect(function()
    ScreenGui.Enabled = false
    
    -- Clean up auto attack when closing GUI
    if autoAttackConnection then
        autoAttackConnection:Disconnect()
        autoAttackConnection = nil
    end
end)

-- Minimize function
MinimizeButton.MouseButton1Click:Connect(function()
    if isMinimized then
        -- Restore
        MainFrame:TweenSize(originalSize, Enum.EasingDirection.Out, Enum.EasingStyle.Quart, 0.3, true)
        ContentFrame.Visible = true
        MinimizeButton.Text = "-"
    else
        -- Minimize
        originalSize = MainFrame.Size
        MainFrame:TweenSize(UDim2.new(0, 250, 0, 30), Enum.EasingDirection.Out, Enum.EasingStyle.Quart, 0.3, true)
        ContentFrame.Visible = false
        MinimizeButton.Text = "+"
    end
    isMinimized = not isMinimized
end)

-- ENHANCED: Function to check if a mob is alive using multiple methods
local function isMobAlive(mobPrimaryPart)
    -- Method 1: Check via MODEL path
    if mobPrimaryPart and mobPrimaryPart:FindFirstChild("MODEL") then
        local head = mobPrimaryPart.MODEL:FindFirstChild("Head")
        if head then
            local gui = head:FindFirstChild("GUI")
            if gui and gui:FindFirstChild("GUI/UnitGUI") then
                local frame = gui["GUI/UnitGUI"]:FindFirstChild("Frame")
                if frame and frame:FindFirstChild("HP") then
                    return frame.HP.Visible
                end
            end
        end
    end
    
    -- Method 2: Direct check via HumanoidRootPart path
    if mobPrimaryPart and mobPrimaryPart:FindFirstChild("MODEL") then
        local hrp = mobPrimaryPart.MODEL:FindFirstChild("HumanoidRootPart")
        if hrp then
            local gui = hrp:FindFirstChild("GUI")
            if gui and gui:FindFirstChild("GUI/UnitGUI") then
                local frame = gui["GUI/UnitGUI"]:FindFirstChild("Frame")
                if frame and frame:FindFirstChild("HP") then
                    return frame.HP.Visible
                end
            end
        end
    end
    
    return false
end

-- Function to find the closest mob
local function findClosestMob()
    local closestMob = nil
    local closestDistance = math.huge
    local character = LocalPlayer.Character
    if not character or not character:FindFirstChild("HumanoidRootPart") then return nil end
    
    local hrp = character.HumanoidRootPart
    
    if workspace:FindFirstChild("Units") then
        for _, unit in pairs(workspace.Units:GetChildren()) do
            if unit:IsA("BasePart") and unit ~= hrp and isMobAlive(unit) then
                local distance = (unit.Position - hrp.Position).Magnitude
                if distance < closestDistance then
                    closestDistance = distance
                    closestMob = unit
                end
            end
        end
    end
    
    return closestMob
end

-- Auto Attack Function
local function performAutoAttack()
    if not autoAttackStatus then return end
    
    local character = LocalPlayer.Character
    if not character or not character:FindFirstChild("HumanoidRootPart") then return end
    
    local hrp = character.HumanoidRootPart
    local closestMob = findClosestMob()
    
    if closestMob then
        -- Create the args table with the required structure
        local args = {
            [1] = {
                ["Type"] = "Hit",
                ["From"] = Vector3.new(hrp.Position.X, hrp.Position.Y, hrp.Position.Z),
                ["Slot"] = "Light",
                ["UID"] = closestMob.Name -- The unique ID from the unit in workspace.Units
            }
        }
        
        -- Fire the remote event to perform attack
        game:GetService("ReplicatedStorage").Remote.CharacterRE:FireServer(unpack(args))
        
        StatusLabel.Text = "Attacking: " .. closestMob.Name
        StatusLabel.TextColor3 = Color3.fromRGB(255, 150, 100)
    else
        StatusLabel.Text = "No targets found"
        StatusLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
    end
end

-- AutoAttack toggle function
AutoAttackButton.MouseButton1Click:Connect(function()
    autoAttackStatus = not autoAttackStatus
    
    if autoAttackStatus then
        AutoAttackButton.Text = "AutoAttack: ON"
        AutoAttackButton.BackgroundColor3 = Color3.fromRGB(70, 200, 70)
        
        -- Start the auto attack loop
        if autoAttackConnection then
            autoAttackConnection:Disconnect()
        end
        
        -- Run the auto attack function repeatedly
        autoAttackConnection = game:GetService("RunService").Heartbeat:Connect(function()
            performAutoAttack()
        end)
        
        StatusLabel.Text = "Auto Attack enabled"
        StatusLabel.TextColor3 = Color3.fromRGB(100, 255, 100)
    else
        AutoAttackButton.Text = "AutoAttack: OFF"
        AutoAttackButton.BackgroundColor3 = Color3.fromRGB(200, 70, 70)
        
        -- Stop the auto attack loop
        if autoAttackConnection then
            autoAttackConnection:Disconnect()
            autoAttackConnection = nil
        end
        
        StatusLabel.Text = "Auto Attack disabled"
        StatusLabel.TextColor3 = Color3.fromRGB(255, 100, 100)
        
        -- Reset status color after delay
        wait(2)
        StatusLabel.Text = "Ready"
        StatusLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
    end
end)

-- Dropdown toggle function
local isDropdownOpen = false

DropdownButton.MouseButton1Click:Connect(function()
    if isDropdownOpen then
        -- Close dropdown
        DropdownList.Visible = false
        DropdownArrow.Text = "â–¼"
    else
        -- Open dropdown
        DropdownList.Visible = true
        DropdownArrow.Text = "â–²"
    end
    
    isDropdownOpen = not isDropdownOpen
end)

-- Option click handlers
Option1.MouseButton1Click:Connect(function()
    selectedOption = "Teleport to next quest"
    DropdownButton.Text = selectedOption
    DropdownList.Visible = false
    DropdownArrow.Text = "â–¼"
    isDropdownOpen = false
    StatusLabel.Text = "Selected: " .. selectedOption
end)

Option2.MouseButton1Click:Connect(function()
    selectedOption = "Teleport to training skill"
    DropdownButton.Text = selectedOption
    DropdownList.Visible = false
    DropdownArrow.Text = "â–¼"
    isDropdownOpen = false
    StatusLabel.Text = "Selected: " .. selectedOption
end)

-- New Option3 click handler for Drop Supplies
Option3.MouseButton1Click:Connect(function()
    selectedOption = "Teleport to Drop Supplies"
    DropdownButton.Text = selectedOption
    DropdownList.Visible = false
    DropdownArrow.Text = "â–¼"
    isDropdownOpen = false
    StatusLabel.Text = "Selected: " .. selectedOption
end)

-- Function to find PrimaryPart in Drop folder
local function findDropPrimaryPart()
    local dropFolder = workspace:FindFirstChild("Drop")
    if dropFolder and dropFolder:IsA("Folder") then
        -- Find the PrimaryPart within Drop folder
        for _, child in pairs(dropFolder:GetChildren()) do
            if child:IsA("BasePart") and child.Name ~= "Drop" then
                return child
            end
        end
    end
    return nil
end

-- Apply button function
ApplyButton.MouseButton1Click:Connect(function()
    -- Add visual feedback when button is clicked
    local originalColor = ApplyButton.BackgroundColor3
    ApplyButton.BackgroundColor3 = Color3.fromRGB(50, 150, 90)
    
    if selectedOption then
        if selectedOption == "Teleport to next quest" then
            -- Get the CFrame from StoryPromptREMOTE
            local storyPrompt = workspace:FindFirstChild("StoryPromptREMOTE")
            if storyPrompt and storyPrompt:IsA("BasePart") then
                -- Teleport the player to the quest location
                if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                    LocalPlayer.Character.HumanoidRootPart.CFrame = storyPrompt.CFrame
                    StatusLabel.Text = "Teleported to next quest"
                    StatusLabel.TextColor3 = Color3.fromRGB(100, 255, 100)
                end
            else
                StatusLabel.Text = "Error: Quest location not found"
                StatusLabel.TextColor3 = Color3.fromRGB(255, 100, 100)
            end
        elseif selectedOption == "Teleport to training skill" then
            -- Teleport to training skill location
            if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(2013.29, -193.87, 80.82)
                StatusLabel.Text = "Teleported to training skill"
                StatusLabel.TextColor3 = Color3.fromRGB(100, 255, 100)
            end
        elseif selectedOption == "Teleport to Drop Supplies" then
            -- UPDATED: Find and teleport to PrimaryPart in Drop folder
            local primaryPart = findDropPrimaryPart()
            if primaryPart then
                if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                    -- Get the PrimaryPart's CFrame and add 5 to the Y position
                    local dropCFrame = primaryPart.CFrame
                    local newPosition = Vector3.new(dropCFrame.X, dropCFrame.Y + 5, dropCFrame.Z)
                    LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(newPosition)
                    StatusLabel.Text = "Teleported to Drop Supplies"
                    StatusLabel.TextColor3 = Color3.fromRGB(100, 255, 100)
                end
            else
                StatusLabel.Text = "Error: Drop Supplies not found"
                StatusLabel.TextColor3 = Color3.fromRGB(255, 100, 100)
            end
        end
    else
        StatusLabel.Text = "Please select a destination"
        StatusLabel.TextColor3 = Color3.fromRGB(255, 200, 100)
    end
    
    -- Restore button color after a short delay
    wait(0.2)
    ApplyButton.BackgroundColor3 = originalColor
    
    -- Reset status label color after delay
    wait(2)
    StatusLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
end)

-- Make the GUI reappear with a keybind (Press "M" to toggle visibility)
UIS.InputEnded:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.M then
        ScreenGui.Enabled = not ScreenGui.Enabled
    end
end)