-- Configuration and Services
local player = game.Players.LocalPlayer
local HttpService = game:GetService("HttpService")
local RunService = game:GetService("RunService")
local StarterGui = game:GetService("StarterGui")
local VirtualUser = game:GetService('VirtualUser')
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TweenService = game:GetService("TweenService")
local VirtualInputManager = game:GetService("VirtualInputManager")
local VirtualInput = game:GetService("VirtualInputManager")

local Players = game:GetService("Players")
local localPlayer = Players.LocalPlayer

-- Load OrionLib
local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/GRPGaming/Key-System/refs/heads/Xycer-Hub-Script/ZusumeLib(Slider)')))()
local Window = OrionLib:MakeWindow({Name = "Zusume Hub", HidePremium = false, SaveConfig = true, ConfigFolder = "OrionTest"})

-- Tab: Global
local TabGlobal = Window:MakeTab({
    Name = "GLOBAL",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

-- Tab: Misc
local TabMisc = Window:MakeTab({
    Name = "Misc",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

-- Tab: Hacks
local TabHacks = Window:MakeTab({
    Name = "Hacks",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

-- Tab: Teleportation
local TabTeleportation = Window:MakeTab({
    Name = "Teleportation",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

-- Tab: Mining
local TabMining = Window:MakeTab({
    Name = "AutoHarvest",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

-- Tab: Quest
local TabQuest = Window:MakeTab({
    Name = "AutoQuest",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

-- Tab: Fish
local TabFish = Window:MakeTab({
    Name = "AutoFish",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})


-- Tab: Troll
local TabTroll = Window:MakeTab({
    Name = "Troll",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

-- Tab: Autofarm
local TabAutofarm = Window:MakeTab({
    Name = "Autofarm",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

-- Tab: AutoCollect
local TabAutoCollect = Window:MakeTab({
    Name = "AutoCollect",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

-- Tab: Graphic
local TabGraphic = Window:MakeTab({
    Name = "Graphic",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

TabGlobal:AddParagraph("GLOBAL MESSAGE","This feature still in the proggress! /n This feature still in the proggress! /n This feature still in the proggress! /n This feature still in the proggress! /n This feature still in the proggress! /n This feature still in the proggress! /n")
TabGlobal:AddParagraph("HOW TO USE","• Active WallHack & Freezer When you Start Mining                                                       • Select 2 usefull skill when Autofarming to prevent high mana consumtion")

-------------------------------
-- Variabel Global
-------------------------------
local toggleEnabledfish = false
local selectedZone = "Common Fish"
-------------------------------
-- Fungsi bantu: Ambil teks dari keyframe (dari properti KeyText)
-------------------------------
local function getKeyText(frame)
    local kt = frame:FindFirstChild("KeyText")
    if kt and kt:IsA("TextLabel") then
        return tostring(kt.Text)
    end
    return "Not Found"
end

-------------------------------
-- Fungsi: Ambil nearest HarvestModel dari workspace.Game.Harvest
-------------------------------
local function getNearestHarvestModel()
    local harvestFolder = workspace:FindFirstChild("Game") and workspace.Game:FindFirstChild("Harvest")
    if not harvestFolder then
        return nil
    end
    local fishTypes = {"CommonFish", "UncommonFish", "RareFish", "EpicFish", "LegendaryFish"}
    local nearestModel = nil
    local nearestDistance = math.huge
    local character = localPlayer.Character or localPlayer.CharacterAdded:Wait()
    local hrp = character:FindFirstChild("HumanoidRootPart")
    if not hrp then return nil end
    local playerPos = hrp.Position
    for _, fishType in ipairs(fishTypes) do
        local fishFolder = harvestFolder:FindFirstChild(fishType)
        if fishFolder then
            for _, model in ipairs(fishFolder:GetChildren()) do
                if model.Name == "HarvestModel" and model:IsA("Model") then
                    local primary = model.PrimaryPart or model:FindFirstChild("HumanoidRootPart")
                    if primary then
                        local dist = (primary.Position - playerPos).Magnitude
                        if dist < nearestDistance then
                            nearestDistance = dist
                            nearestModel = model
                        end
                    end
                end
            end
        end
    end
    return nearestModel
end

-------------------------------
-- Fungsi: Ambil keyframe dari KeyList
-------------------------------
local function getKeysFromKeyList()
    local keys = {}
    local pg = localPlayer:FindFirstChild("PlayerGui")
    if not pg then return keys end
    local actions = pg:FindFirstChild("Actions")
    if not actions then return keys end
    local fishingMobile = actions:FindFirstChild("FishingMobile")
    if not fishingMobile then return keys end
    local keyCombinations = fishingMobile:FindFirstChild("KeyCombinations")
    if not keyCombinations then return keys end
    local keyList = keyCombinations:FindFirstChild("KeyList")
    if not keyList then return keys end

    for _, child in ipairs(keyList:GetChildren()) do
        if child:IsA("Frame") then
            table.insert(keys, getKeyText(child))
        end
    end
    return keys
end

-------------------------------
-- Fungsi: Fire event dengan struktur local args
-------------------------------
local function fireEvent(command, harvestId, keys)
    local args = {
        [1] = command,
        [2] = harvestId,
        [3] = {
            ["keysCombinations"] = keys
        }
    }
    print("Firing event:", command, "HarvestId:", harvestId, "Keys:", keys)
    ReplicatedStorage.Events.Harvest.Harvest:FireServer(unpack(args))
end

-------------------------------
-- Loop Deteksi: Jalankan pengecekan nearest HarvestModel dan ProximityPrompt
-------------------------------
local function detectionLoop()
    while toggleEnabledfish do
        local model = getNearestHarvestModel()
        if model then
            local hId = model:GetAttribute("HarvestId")
            if hId then
                hId = tostring(hId)
                local keys = getKeysFromKeyList()
                local primary = model.PrimaryPart or model:FindFirstChild("HumanoidRootPart")
                if primary then
                    local prompt = primary:FindFirstChildOfClass("ProximityPrompt")
                    if prompt then
                        if prompt.Enabled then
                            -- Jika prompt Enabled, fire Harvest event segera tanpa delay
                            fireEvent("Harvest", hId, keys)
                        else
                            wait(2)
                            fireEvent("Interrupt", hId, keys)
                        end
                    else
                        print("ProximityPrompt tidak ditemukan pada model:", model.Name)
                    end
                else
                    print("PrimaryPart atau HumanoidRootPart tidak ditemukan pada model:", model.Name)
                end
            else
                print("HarvestId tidak ditemukan pada model:", model.Name)
            end
        else
            print("Tidak ada HarvestModel yang ditemukan.")
        end
        wait(0.9)
    end
end

-------------------------------
-- Toggle Harvest/Quest
-------------------------------

local SectionFish = TabFish:AddSection({ Name = "AutoFishing Option" })

-------------------------------
-- Dropdown: Fishing Zone for Teleportation
-------------------------------
TabFish:AddDropdown({
    Name = "Fishing Zone",
    Default = "Common Fish",
    Options = {"Common Fish", "Uncommon Fish", "Rare Fish", "Epic Fish", "Legendary Fish"},
    Callback = function(Value)
        selectedZone = Value
        OrionLib:MakeNotification({
            Name = "Zone Selected",
            Content = "You selected: " .. Value,
            Image = "rbxassetid://4483345998",
            Time = 5
        })
    end
})
selectedZone = "Common Fish"  -- Set default

-------------------------------
-- Button: Teleport to Fishing Zone
-------------------------------
TabFish:AddButton({
    Name = "Teleport to Fishing Zone",
    Callback = function()
        local zones = {
            ["Common Fish"] = Vector3.new(-1026.32, 20.17, 879.93),
            ["Uncommon Fish"] = Vector3.new(-889.46, 20.93, 800.52),
            ["Rare Fish"] = Vector3.new(-948.37, 20.95, 1228.57),
            ["Epic Fish"] = Vector3.new(3478.10, 20.89, -52.42),
            ["Legendary Fish"] = Vector3.new(4070.79, 23.99, -5172.95)
        }
        local targetPos = zones[selectedZone]
        if targetPos then
            local character = localPlayer.Character
            if character and character:FindFirstChild("HumanoidRootPart") then
                character.HumanoidRootPart.CFrame = CFrame.new(targetPos)
                OrionLib:MakeNotification({
                    Name = "Teleport",
                    Content = "Teleported to " .. selectedZone,
                    Image = "rbxassetid://4483345998",
                    Time = 5
                })
            else
                OrionLib:MakeNotification({
                    Name = "Teleport Failed",
                    Content = "Character or HRP not found.",
                    Image = "rbxassetid://4483345998",
                    Time = 5
                })
            end
        else
            OrionLib:MakeNotification({
                Name = "Teleport Failed",
                Content = "Invalid zone selected.",
                Image = "rbxassetid://4483345998",
                Time = 5
            })
        end
    end
})

TabFish:AddToggle({
    Name = "Start Fishing",
    Default = false,
    Callback = function(Value)
        toggleEnabledfish = Value
        if toggleEnabledfish then
            OrionLib:MakeNotification({
                Name = "Toggle Enabled",
                Content = "Harvest detection activated.",
                Image = "rbxassetid://4483345998",
                Time = 5
            })
            coroutine.wrap(detectionLoop)()
        else
            OrionLib:MakeNotification({
                Name = "Toggle Disabled",
                Content = "Harvest detection deactivated.",
                Image = "rbxassetid://4483345998",
                Time = 5
            })
        end
    end
})

local SectionQuest = TabQuest:AddSection({ Name = "AutoQuest Option" })

-- Label untuk counter
local glacierLabelOrion = SectionQuest:AddLabel("Glacier Teleports: 0")
local boulderLabelOrion = SectionQuest:AddLabel("Boulder Teleports: 0")

-- Variabel Global
local glacierTeleports = 0    -- Max 10
local boulderTeleports = 0    -- Max 15
local glacierMaxRelocated = false
local idleTimer = 0
local idleStage = 0
local enabled = false
local currentTarget = nil

local mobsSpots = workspace:WaitForChild("Game")
    :WaitForChild("Regions")
    :WaitForChild("Dion")
    :WaitForChild("Areas")
    :WaitForChild("AncientRuins")
    :WaitForChild("MobsSpots")
local glacierFolder = mobsSpots:WaitForChild("GlacierTroll")
local boulderFolder = mobsSpots:WaitForChild("BoulderTroll")

-- Fungsi utilitas
local function isMobStillAlive(mob)
    if mob and mob.Parent then
        local head = mob:FindFirstChild("Head")
        if head then
            local hm = head:FindFirstChild("HealthAndMana")
            if hm then
                return hm.Enabled
            end
        end
    end
    return false
end

local function tweenTeleport(targetPosition, mobRootPart)
    if localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart") then
        local hrp = localPlayer.Character.HumanoidRootPart
        hrp.Size = Vector3.new(2, 30, 1)
        local behindPos = targetPosition - (mobRootPart.CFrame.LookVector * 6) + Vector3.new(0, 5, 0)
        local finalPos = behindPos + Vector3.new(0, 2, 0)
        local tween = TweenService:Create(hrp, TweenInfo.new(0.7, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {CFrame = CFrame.new(finalPos)})
        tween:Play()
        task.wait(1.5)
        VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.E, false, game)
        task.wait(0.1)
        VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.E, false, game)
    end
end

local function initialTeleport()
    if localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart") then
        local hrp = localPlayer.Character.HumanoidRootPart
        hrp.Size = Vector3.new(2, 30, 1)
        local targetPos = Vector3.new(1265, 203, -3044) + Vector3.new(0, 2, 0)
        local tween = TweenService:Create(hrp, TweenInfo.new(0.7, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {CFrame = CFrame.new(targetPos)})
        tween:Play()
        tween.Completed:Wait()
    end
end

local function specialGlacierTeleport()
    if localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart") then
        local hrp = localPlayer.Character.HumanoidRootPart
        local targetPos = Vector3.new(2482, 125, -3557) + Vector3.new(0, 2, 0)
        local tween = TweenService:Create(hrp, TweenInfo.new(0.7, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {CFrame = CFrame.new(targetPos)})
        tween:Play()
        tween.Completed:Wait()
    end
end

local function idleTeleport(targetCoord)
    if localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart") then
        local hrp = localPlayer.Character.HumanoidRootPart
        local targetPos = targetCoord + Vector3.new(0, 2, 0)
        local tween = TweenService:Create(hrp, TweenInfo.new(0.7, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {CFrame = CFrame.new(targetPos)})
        tween:Play()
        tween.Completed:Wait()
    end
end

local function findNearestAliveMobInFolder(folder)
    local closestMob, shortestDistance = nil, math.huge
    if localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart") then
        local hrp = localPlayer.Character.HumanoidRootPart
        for _, spawnPart in ipairs(folder:GetChildren()) do
            if spawnPart:IsA("Part") then
                for _, mob in ipairs(spawnPart:GetChildren()) do
                    if mob.Name == "Troll" and isMobStillAlive(mob) then
                        local mobHRP = mob:FindFirstChild("HumanoidRootPart")
                        if mobHRP then
                            local dist = (hrp.Position - mobHRP.Position).Magnitude
                            if dist < shortestDistance then
                                shortestDistance = dist
                                closestMob = mob
                            end
                        end
                    end
                end
            end
        end
    end
    return closestMob
end

local function findNearestAliveMob()
    local targetType = nil
    local mob = nil
    if glacierTeleports < 10 then
        mob = findNearestAliveMobInFolder(glacierFolder)
        if mob then targetType = "GlacierTroll" end
    end
    if not mob and boulderTeleports < 15 then
        mob = findNearestAliveMobInFolder(boulderFolder)
        if mob then targetType = "BoulderTroll" end
    end
    return mob, targetType
end

local function teleportLoop()
    if localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart") then
        localPlayer.Character.HumanoidRootPart.Size = Vector3.new(2, 30, 1)
    end

    -- Saat autofarm dimulai, cancel quest lalu grant quest
    local cancelArgs = { [1] = "TamingTheSky" }
    game:GetService("ReplicatedStorage").Events.Quest.CancelQuest:FireServer(unpack(cancelArgs))
    task.wait(1)
    local grantArgs = { [1] = "TamingTheSky" }
    game:GetService("ReplicatedStorage").Events.Quest.GrantQuest:FireServer(unpack(grantArgs))
    
    initialTeleport()
    task.wait(2)
    idleTimer = 0
    while enabled do
        if glacierTeleports >= 10 and boulderTeleports >= 15 then
            task.wait(1)
            -- Ubah ukuran Y menjadi 2 sebelum UpdateQuest
            if localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart") then
                local hrp = localPlayer.Character.HumanoidRootPart
                hrp.Size = Vector3.new(hrp.Size.X, 2, hrp.Size.Z)
            end
            local args = { [1] = "TamingTheSky" }
            game:GetService("ReplicatedStorage").Events.Quest.UpdateQuest:FireServer(unpack(args))
            task.wait(1)
            local args = { [1] = "TamingTheSky" }
            game:GetService("ReplicatedStorage").Events.Quest.UpdateQuest:FireServer(unpack(args))
            task.wait(1)
            if localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart") then
                localPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(494,94,-2324)
            end
            task.wait(1)
            local args = { [1] = "TamingTheSky" }
            game:GetService("ReplicatedStorage").Events.Quest.UpdateQuest:FireServer(unpack(args))
            task.wait(1)
            
            if localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart") then
                localPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(585,163,-3633)
            end
            
            task.wait(1)
            local args = { [1] = "TamingTheSky" }
            game:GetService("ReplicatedStorage").Events.Quest.UpdateQuest:FireServer(unpack(args))
            
            local args = { [1] = "TamingTheSky" }
            game:GetService("ReplicatedStorage").Events.Quest.UpdateQuest:FireServer(unpack(args))
            task.wait(1)
            local args = { [1] = "TamingTheSky" }
            game:GetService("ReplicatedStorage").Events.Quest.UpdateQuest:FireServer(unpack(args))
            task.wait(1)
            local args = { [1] = "TamingTheSky" }
            game:GetService("ReplicatedStorage").Events.Quest.UpdateQuest:FireServer(unpack(args))
            task.wait(0.3)
            
            glacierTeleports = 0
            boulderTeleports = 0
            glacierMaxRelocated = false
            glacierLabelOrion:Set("Glacier Teleports: 0")
            boulderLabelOrion:Set("Boulder Teleports: 0")
            
            task.wait(1)
            initialTeleport()
            task.wait(1)
        end

        if not glacierMaxRelocated and glacierTeleports >= 10 then
            specialGlacierTeleport()
            glacierMaxRelocated = true
            task.wait(1.5)
        end

        local targetMob, targetType = findNearestAliveMob()
        if targetMob then
            idleTimer = 0
            currentTarget = targetMob
            tweenTeleport(targetMob.HumanoidRootPart.Position, targetMob.HumanoidRootPart)
            repeat task.wait(0.2) until (not isMobStillAlive(currentTarget)) or (not enabled)
            if targetType == "GlacierTroll" then
                glacierTeleports = glacierTeleports + 1
                glacierLabelOrion:Set("Glacier Teleports: " .. glacierTeleports)
            else
                boulderTeleports = boulderTeleports + 1
                boulderLabelOrion:Set("Boulder Teleports: " .. boulderTeleports)
            end
        else
            task.wait(1)
            idleTimer = idleTimer + 1
            if idleTimer >= 2 then
                local stageCoords = {
                    Vector3.new(561,178,-3232),
                    Vector3.new(526,190,-2993),
                    Vector3.new(886,161,-3614),
                    Vector3.new(2490,125,-3573),
                    Vector3.new(2993,217,-2832),
                    Vector3.new(2819,161,-3080)
                }
                idleStage = idleStage % 6 + 1
                idleTeleport(stageCoords[idleStage])
                idleTimer = 0
            end
        end
    end

    if localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart") then
        localPlayer.Character.HumanoidRootPart.Size = Vector3.new(2,2,1)
    end
end

SectionQuest:AddToggle({
    Name = "Mount Quest",
    Default = false,
    Callback = function(Value)
        enabled = Value
        if enabled then
            glacierTeleports = 0
            boulderTeleports = 0
            glacierMaxRelocated = false
            idleStage = 0
            glacierLabelOrion:Set("Glacier Teleports: 0")
            boulderLabelOrion:Set("Boulder Teleports: 0")
            spawn(function() teleportLoop() end)
        end
    end
})

-- Variabel AutoHarvest
local enabled = false
local TARGET_CATEGORIES = {"AzureFungalPatch", "RubyberryBush"}
local harvestFolderPath = workspace:WaitForChild("Game"):WaitForChild("Harvest")
local idleTimer = 0

-- Fungsi utilitas AutoHarvest
local function isHarvestValid(harvestModel)
    if not harvestModel or not harvestModel.Parent then return false end
    local modelParts = harvestModel:FindFirstChild("ModelParts")
    if modelParts and #modelParts:GetChildren() > 0 then
        local firstPart = modelParts:GetChildren()[1]
        if firstPart:IsA("BasePart") then
            return firstPart.Transparency < 0.9
        end
    end
    return false
end

local function resizeHumanoidRootPart()
    if localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart") then
        -- Set ukuran dengan Y = 50 (sebelumnya 55)
        localPlayer.Character.HumanoidRootPart.Size = Vector3.new(1.25, 60, 1.25)
    end
end

local function resetHumanoidRootPart()
    if localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart") then
        localPlayer.Character.HumanoidRootPart.Size = Vector3.new(2, 2, 1)
    end
end

local function findNearestHarvest()
    local closestPart = nil
    local shortestDistance = math.huge
    
    if localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart") then
        local humanoidRootPart = localPlayer.Character.HumanoidRootPart
        
        for _, categoryName in ipairs(TARGET_CATEGORIES) do
            local categoryFolder = harvestFolderPath:FindFirstChild(categoryName)
            if categoryFolder and categoryFolder:IsA("Folder") then
                for _, harvestModel in ipairs(categoryFolder:GetChildren()) do
                    if harvestModel:IsA("Model") and harvestModel.Name == "HarvestModel" then
                        if isHarvestValid(harvestModel) then
                            local harvestPart = harvestModel:FindFirstChild("MainPart") or harvestModel.PrimaryPart
                            if harvestPart then
                                local distance = (humanoidRootPart.Position - harvestPart.Position).Magnitude
                                if distance < shortestDistance then
                                    shortestDistance = distance
                                    closestPart = harvestPart
                                end
                            end
                        end
                    end
                end
            end
        end
    end
    return closestPart
end

local function tweenTeleportHarvest(targetPart)
    if localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart") then
        local humanoidRootPart = localPlayer.Character.HumanoidRootPart
        local targetPosition = targetPart.Position + Vector3.new(0, 15, 0)
        local tweenInfo = TweenInfo.new(0.7, Enum.EasingStyle.Sine, Enum.EasingDirection.Out)
        local tween = TweenService:Create(humanoidRootPart, tweenInfo, {CFrame = CFrame.new(targetPosition)})
        tween:Play()
        tween.Completed:Wait()
        
        local harvestModel = targetPart.Parent
        local harvestId = harvestModel:GetAttribute("HarvestId")
        local collectAttempts = 0
        while collectAttempts < 3 and isHarvestValid(harvestModel) do
            collectAttempts = collectAttempts + 1
            task.wait(0.1)
        end
        
        if harvestId then
            local args = { [1] = "Harvest", [2] = harvestId }
            ReplicatedStorage.Events.Harvest.Harvest:FireServer(unpack(args))
        end
    end
end

local function harvestLoop()
    idleTimer = 0
    while enabled do
        local targetHarvest = findNearestHarvest()
        if targetHarvest and targetHarvest.Parent then
            tweenTeleportHarvest(targetHarvest)
            idleTimer = 0
            while enabled and isHarvestValid(targetHarvest.Parent) do
                task.wait(0.1)
            end
        else
            task.wait(0.5)
            idleTimer = idleTimer + 0.5
            if idleTimer >= 3 then
                -- Jika tidak ditemukan target harvest selama 3 detik, teleport ke (1222,125,-4000)
                if localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart") then
                    localPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(1222, 125, -4000)
                end
                idleTimer = 0
            end
        end
    end
end

-- Toggle AutoHarvest menggunakan OrionLib (tanpa GUI custom lainnya)
SectionQuest:AddToggle({
    Name = "Auto Harvest [ Mushroom+Berry ]",
    Default = false,
    Callback = function(Value)
        enabled = Value
        if enabled then
            -- Teleport awal ke (1222,405,-4000) lalu delay 2 detik sebelum memulai loop harvest
            if localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart") then
                localPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(1222, 125, -4000)
            end
            task.wait(2)
            resizeHumanoidRootPart()
            spawn(function() harvestLoop() end)
        else
            resetHumanoidRootPart()
        end
    end
})

-- Autofarm
local isAutofarming = false

local function handlePlayer()
    local targetPosition1 = Vector3.new(1224, -155, 195)
    local targetPosition2 = Vector3.new(1769, -243, 1206)

    ReplicatedStorage.Events.Quest.GrantQuest:FireServer("StonesOfBurden")
    wait(0.1)

    player.Character.HumanoidRootPart.CFrame = CFrame.new(targetPosition1)
    wait(0.1)

    ReplicatedStorage.Events.Quest.UpdateQuest:FireServer("StonesOfBurden")
    wait(0.1)

    ReplicatedStorage.Events.Quest.UpdateQuest:FireServer("StonesOfBurden")
    wait(0.1)

    ReplicatedStorage.Events.Quest.UpdateQuest:FireServer("StonesOfBurden")
    wait(0.1)

    player.Character.HumanoidRootPart.CFrame = CFrame.new(targetPosition2)
    wait(0.1)

    ReplicatedStorage.Events.Quest.UpdateQuest:FireServer("StonesOfBurden")
    wait(0.1)

    ReplicatedStorage.Events.Quest.UpdateQuest:FireServer("StonesOfBurden")
    wait(0.1)

    ReplicatedStorage.Events.Quest.UpdateQuest:FireServer("StonesOfBurden")
    wait(0.1)
end

SectionQuest:AddToggle({
    Name = "AutoQuest [ XP + Essence ]",
    Default = false,
    Callback = function(Value)
        isAutofarming = Value
        while isAutofarming do
            handlePlayer()
            wait(0.1)
        end
        StarterGui:SetCore("SendNotification", {
            Title = "AutoQuest",
            Text = Value and "AutoQuest: Enabled" or "AutoQuest: Disabled",
            Button1 = "OK",
            Duration = 5
        })
    end
})


local SectionCollect = TabAutoCollect:AddSection({ Name = "AutoCollect Setting" })
-- Konfigurasi Default
local DEFAULT_OFFSET = { X = 0, Y = 45 }
local CLICK_INTERVAL = 0.1
local config = {
    XOffset = DEFAULT_OFFSET.X,
    YOffset = DEFAULT_OFFSET.Y
}

-- Variabel Kontrol
local isClicking = false
local loopActive = false
local guiUpdater = nil
local autoCollectActive = false

-- Sistem Indikator
local statusLabel = SectionCollect:AddLabel("Status: ❌ INACTIVE")
local clickIndicatorGui = Instance.new("ScreenGui", localPlayer:WaitForChild("PlayerGui"))

-- AutoCollect Function
local function updateSize(size)
    for _, bag in ipairs(game.Workspace:GetChildren()) do
        if bag:IsA("Model") and bag:FindFirstChild("TriggerRadius") then
            bag.TriggerRadius.Size = Vector3.new(size, size, size)
        end
    end
end

game.Workspace.ChildAdded:Connect(function(child)
    if child:IsA("Model") and child:FindFirstChild("TriggerRadius") then
        child.TriggerRadius.Size = Vector3.new(autoCollectActive and 100 or 10, autoCollectActive and 100 or 10, autoCollectActive and 100 or 10)
    end
end)

game.Workspace.ChildRemoved:Connect(function()
    updateSize(autoCollectActive and 100 or 10)
end)

-- Fungsi Update GUI Realtime
local function updateGuiVisibility()
    while loopActive do
        local playerGui = localPlayer:FindFirstChild("PlayerGui")
        if playerGui then
            local dropFrame = playerGui:FindFirstChild("Actions") and playerGui.Actions:FindFirstChild("DropFrame")
            if dropFrame then
                dropFrame.Visible = true
                local closeImage = dropFrame:FindFirstChild("CloseImage")
                if closeImage then closeImage.Visible = false end
            end
        end
        task.wait(0.1)
    end
end

-- Fungsi Indikator Klik
local function showClickIndicator(pos)
    local indicator = Instance.new("Frame", clickIndicatorGui)
    indicator.Size = UDim2.new(0, 16, 0, 16)
    indicator.Position = UDim2.new(0, pos.X - 35, 0, pos.Y - 70)
    indicator.BackgroundColor3 = Color3.fromRGB(255, 60, 60)
    indicator.BorderSizePixel = 0
    indicator.ZIndex = 999

    local circle = Instance.new("UICorner", indicator)
    circle.CornerRadius = UDim.new(1, 0)

    TweenService:Create(indicator, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {
        Size = UDim2.new(0, 32, 0, 32),
        Position = UDim2.new(0, pos.X - 43, 0, pos.Y - 78),
        BackgroundTransparency = 1
    }):Play()

    task.delay(0.35, function() if indicator then indicator:Destroy() end end)
end

-- Fungsi Klik Utama
local function performClick()
    local guiPath = localPlayer.PlayerGui:FindFirstChild("Actions")
    if not guiPath then return false end

    local dropFrame = guiPath:FindFirstChild("DropFrame")
    if not dropFrame then return false end

    local listFrame = dropFrame:FindFirstChild("ListFrame")
    if not listFrame then return false end

    for _, child in ipairs(listFrame:GetChildren()) do
        if child:IsA("Frame") then
            local itemData = child:FindFirstChild("ItemData")
            if itemData then
                local itemName = itemData:FindFirstChild("ItemName")
                if itemName and itemName.Visible then
                    local clickPos = Vector2.new(
                        itemName.AbsolutePosition.X + itemName.AbsoluteSize.X / 2 + config.XOffset,
                        itemName.AbsolutePosition.Y + itemName.AbsoluteSize.Y / 2 + config.YOffset
                    )

                    VirtualInput:SendMouseButtonEvent(clickPos.X, clickPos.Y, 0, true, game, 1)
                    task.wait(0.02)
                    VirtualInput:SendMouseButtonEvent(clickPos.X, clickPos.Y, 0, false, game, 1)

                    showClickIndicator(clickPos)
                    return true
                end
            end
        end
    end
    return false
end

-- Auto Click Loop
local function autoClickLoop()
    while loopActive do
        local success = pcall(performClick)
        task.wait(success and CLICK_INTERVAL or 0.5)
    end
end

-- Input X Offset
SectionCollect:AddTextbox({
    Name = "X Offset",
    Default = tostring(config.XOffset),
    TextDisappear = false,
    Callback = function(Value)
        config.XOffset = tonumber(Value) or 0
    end
})

-- Input Y Offset
SectionCollect:AddTextbox({
    Name = "Y Offset",
    Default = tostring(config.YOffset),
    TextDisappear = false,
    Callback = function(Value)
        config.YOffset = tonumber(Value) or 0
    end
})

-- Dropdown AutoCollect v2
SectionCollect:AddDropdown({
    Name = "AutoCollect",
    Default = "AutoCollect v2",
    Options = {"AutoCollect v2"},
    Callback = function(Value)
        autoCollectActive = (Value == "AutoCollect v2")
        updateSize(autoCollectActive and 100 or 10)
    end
})


-- Toggle Button
SectionCollect:AddToggle({
    Name = "Start Session",
    Default = false,
    Callback = function(Value)
        isClicking = Value
        statusLabel:Set("Status: " .. (Value and "🟢 ACTIVE" or "❌ INACTIVE"))

        if Value then
            loopActive = true
            task.spawn(autoClickLoop)
            guiUpdater = task.spawn(updateGuiVisibility)
        else
            loopActive = false
            if guiUpdater then task.cancel(guiUpdater) guiUpdater = nil end
            updateSize(10) -- Reset TriggerRadius saat dimatikan
        end
    end
})

local TeleportLoot = TabAutoCollect:AddSection({ Name = "AutoLoot Setting" })
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
local originalHRPSize = humanoidRootPart.Size

-- Variabel konfigurasi
local YSetting = 1
local selectedDropType = "Bag"
local moblotActive = false
local currentBag = nil

-- Tambahkan Dropdown
local dropdown = TeleportLoot:AddDropdown({
    Name = "Select Drop Type",
    Default = "MobDrop Loot",
    Options = {"MobDrop Loot", "PlayerDrop Loot"},
    Callback = function(Value)
        selectedDropType = (Value == "MobDrop Loot") and "Bag" or "PlayerDropBag"
    end    
})

-- Tambahkan Slider
TeleportLoot:AddSlider({
    Name = "Y Offset",
    Min = 1,
    Max = 50,
    Default = 1,
    Color = Color3.fromRGB(255,255,255),
    Increment = 1,
    ValueName = "units",
    Callback = function(Value)
        YSetting = Value
    end    
})

local function findNearestBag()
    local closestBag = nil
    local shortestDistance = math.huge
    local currentPosition = humanoidRootPart.Position
    
    for _, instance in ipairs(workspace:GetDescendants()) do
        if instance.Name == selectedDropType and instance:IsA("Model") then
            local primaryPart = instance.PrimaryPart
            if primaryPart and primaryPart:IsDescendantOf(workspace) then
                local distance = (currentPosition - primaryPart.Position).Magnitude
                if distance < shortestDistance then
                    shortestDistance = distance
                    closestBag = instance
                end
            end
        end
    end
    return closestBag
end

local function bagMonitor()
    while moblotActive do
        local targetBag = findNearestBag()
        
        if targetBag and targetBag ~= currentBag then
            currentBag = targetBag
            
            -- Terapkan pengaturan
            humanoidRootPart.Size = Vector3.new(originalHRPSize.X, YSetting, originalHRPSize.Z)
            humanoidRootPart.CFrame = targetBag.PrimaryPart.CFrame + Vector3.new(0, YSetting, 0)
            humanoidRootPart.Velocity = Vector3.new(0, 0, 0)
            
            -- Monitor keberadaan Bag
            local connection
            connection = targetBag.AncestryChanged:Connect(function(_, parent)
                if not parent then
                    currentBag = nil
                    connection:Disconnect()
                end
            end)
            
            -- Timeout 30 detik
            local timeout = os.time() + 30
            repeat
                task.wait()
            until not currentBag or os.time() > timeout
        end
        task.wait(1)
    end
end

-- Toggle utama
TeleportLoot:AddToggle({
    Name = "Start Teleport Loot",
    Default = false,
    Callback = function(Value)
        moblotActive = Value
        
        if Value then
            StarterGui:SetCore("SendNotification", {
                Title = "Settings Applied",
                Text = "Drop Type: "..selectedDropType.."\nY Offset: "..YSetting,
                Duration = 3
            })
            
            coroutine.wrap(bagMonitor)()
        else
            humanoidRootPart.Size = originalHRPSize
            StarterGui:SetCore("SendNotification", {
                Title = "Settings Disabled",
                Text = "Teleportation stopped",
                Duration = 3
            })
            currentBag = nil
        end
    end
})

-- Section: FPS Booster
local SectionFPSBooster = TabGraphic:AddSection({ Name = "Graphic Setting" })

-- FPS Booster 1 [Normal Boost]
SectionFPSBooster:AddButton({
    Name = "FPS Booster 1 [Normal Boost]",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/GRPGaming/Key-System/refs/heads/Xycer-Hub-Script/FPS%20Booster1.txt"))()
        StarterGui:SetCore("SendNotification", {
            Title = "FPS Booster 1",
            Text = "FPS Booster 1 [Normal Boost] executed!",
            Button1 = "OK",
            Duration = 3
        })
    end
})

-- FPS Booster 2 [Hard Boost]
SectionFPSBooster:AddButton({
    Name = "FPS Booster 2 [Hard Boost]",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/GRPGaming/Key-System/refs/heads/Xycer-Hub-Script/FPSBooster2%20(1).txt"))()
        StarterGui:SetCore("SendNotification", {
            Title = "FPS Booster 2",
            Text = "FPS Booster 2 [Hard Boost] executed!",
            Button1 = "OK",
            Duration = 3
        })
    end
})

-- Section: Autofarm
local SectionAutofarm = TabAutofarm:AddSection({ Name = "Autofarm Features" })


-- Daftar opsi skill (9 skill + 1 opsi Default)
local skillOptions = {
    "Default",
    "FireMeteor",
    "PillarOfFire",
    "FireBullets",
    "IceTurret",
    "IceSnipe",
    "SonicImpulse",
    "Spin",
    "Challange",
    "StunShot",
    "ExplosiveShot"
}

-- Variabel untuk menyimpan pilihan dari dropdown
local selectedSkill1 = "Default"
local selectedSkill2 = "Default"
local selectedSkill3 = "Default"

-- Flag untuk mengaktifkan/nonaktifkan auto skill
local autoEnabled = false

-- Buat Dropdown ke-1
local AutoSkillDropdown1 = SectionAutofarm:AddDropdown({
    Name = "Select Skill [1]",
    Default = "Default",
    Options = skillOptions,
    Callback = function(Value)
        selectedSkill1 = Value
    end
})

-- Buat Dropdown ke-2
local AutoSkillDropdown2 = SectionAutofarm:AddDropdown({
    Name = "Select Skill [2]",
    Default = "Default",
    Options = skillOptions,
    Callback = function(Value)
        selectedSkill2 = Value
    end
})

-- Buat Dropdown ke-3
local AutoSkillDropdown3 = SectionAutofarm:AddDropdown({
    Name = "Select Skill [3]",
    Default = "Default",
    Options = skillOptions,
    Callback = function(Value)
        selectedSkill3 = Value
    end
})

-- Buat Checkbox Toggle untuk mengaktifkan/nonaktifkan auto skill
local ToggleAll = SectionAutofarm:AddToggle({
    Name = "Toggle Auto Skills",
    Default = false,
    Callback = function(Value)
        autoEnabled = Value
    end
})

-- Fungsi untuk mendapatkan waktu cooldown tiap skill
local function getCooldown(skill)
    local cooldowns = {
        FireMeteor = 8,
        PillarOfFire = 14,
        FireBullets = 22,
        IceTurret = 21,
        IceSnipe = 8,
        SonicImpulse = 19,
        Spin = 22,
        Challange = 23,
        StunShot = 18,
        ExplosiveShot = 19
    }
    return cooldowns[skill] or 10
end

local character = player.Character or player.CharacterAdded:Wait()
local rootPart = character:WaitForChild("HumanoidRootPart")

-- Fungsi loop yang akan terus berjalan dan memanggil skill sesuai pilihan dropdown
local function runSkillLoop(index)
    while true do
        local skill = nil
        if index == 1 then
            skill = selectedSkill1
        elseif index == 2 then
            skill = selectedSkill2
        elseif index == 3 then
            skill = selectedSkill3
        end

        if autoEnabled and skill and skill ~= "Default" then
            local currentPosition = rootPart.Position
            local args = {
                [1] = skill,
                [2] = CFrame.new(currentPosition) * CFrame.Angles(math.pi, -0.4883, math.pi),
                [3] = currentPosition
            }
            game:GetService("ReplicatedStorage").Events.Combat.ActivateSkill:FireServer(unpack(args))
            wait(getCooldown(skill))
        else
            wait(0.5)
        end
    end
end

-- Spawn 3 loop secara paralel, masing-masing akan mengecek pilihan dropdownnya
spawn(function() runSkillLoop(1) end)
spawn(function() runSkillLoop(2) end)
spawn(function() runSkillLoop(3) end)

-- Autofarms
SectionAutofarm:AddButton({
    Name = "Start Autofarm",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/GRPGaming/Key-System/refs/heads/Xycer-Hub-Script/autofarmhp(obfusvate).txt"))()
        StarterGui:SetCore("SendNotification", {
            Title = "Autofarm Script",
            Text = "Autofarm executed!",
            Button1 = "OK",
            Duration = 3
        })
    end
})

SectionAutofarm:AddButton({
    Name = "AutoClick [ Not Reccomended ( use AutoCollect Tabs ) ]",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/GRPGaming/Key-System/refs/heads/Xycer-Hub-Script/autoclick%20(collect%20mobloots)%20(%20obfuscate).txt"))()
        StarterGui:SetCore("SendNotification", {
            Title = "AutoClicker Script",
            Text = "Autoclick just executed!",
            Button1 = "OK",
            Duration = 3
        })
    end
})

-- Tab: Credit
local TabCredit = Window:MakeTab({
    Name = "Login & Credits",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

local SectionCredit = TabCredit:AddSection({ Name = "Administrator Login & Credits" })

TabCredit:AddLabel("Made by Zusume#3496")
TabCredit:AddLabel("Helper: Zezequiel#0531")
TabCredit:AddLabel("Credits: reps#2334")

-- Variabel untuk menyimpan key yang diinput
local AdminKey = ""

local AdminKeyInput = SectionCredit:AddTextbox({
    Name = "Administrator Login Key",
    Default = "",
    TextDisappear = false,
    Callback = function(Value)
        AdminKey = Value  -- Simpan nilai input ke variabel
    end
})

-- Variabel untuk menandai apakah tab Administrator sudah dibuat
local isAdminTabCreated = false

SectionCredit:AddButton({
    Name = "Verify Key",
    Callback = function()
        if AdminKey == "LOL" and not isAdminTabCreated then
            -- Buat tab Administrator hanya jika kunci benar dan tab belum pernah dibuat
            local TabAdmin = Window:MakeTab({
                Name = "Administrator",
                Icon = "rbxassetid://4483345998",
                PremiumOnly = false
            })
            local SectionAdmin = TabAdmin:AddSection({ Name = "Administrator Option" })


SectionAdmin:AddButton({
    Name = "Teleport Detector GUI",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/GRPGaming/Key-System/refs/heads/Xycer-Hub-Script/TeleportDetector%5BAdmin%5D"))()
        StarterGui:SetCore("SendNotification", {
            Title = "Teleport Detector",
            Text = "Teleport GUI Executed",
            Button1 = "OK",
            Duration = 3
        })
    end
})

SectionAdmin:AddButton({
    Name = "SimpleSpy Tool",
    Callback = function()
        loadstring(game:HttpGet("https://rawscripts.net/raw/Universal-Script-Simple-Spy-Mobile-Script-Restored-22732"))()
        StarterGui:SetCore("SendNotification", {
            Title = "SimpleSpy",
            Text = "SimpleSpy Script Executed",
            Button1 = "OK",
            Duration = 3
        })
    end
})

SectionAdmin:AddButton({
    Name = "DexExplorer Tool",
    Callback = function()
        loadstring(game:HttpGet("https://rawscripts.net/raw/Universal-Script-Keyless-mobile-dex-17888"))()
        StarterGui:SetCore("SendNotification", {
            Title = "DexExplorer",
            Text = "DexExplorer Script Executed",
            Button1 = "OK",
            Duration = 3
        })
    end
})





            -- Tandai bahwa tab Administrator sudah dibuat
            isAdminTabCreated = true

            -- Notifikasi bahwa tab Administrator berhasil dibuat
            pcall(function()
                game:GetService("StarterGui"):SetCore("SendNotification", {
                    Title = "Administrator Tab Loaded!",
                    Text = "You now have access to the Administrator menu.",
                    Button1 = "Thanks",
                    Duration = 3
                })
            end)
        elseif AdminKey ~= "LOL" then
            -- Notifikasi jika kunci salah
            pcall(function()
                game:GetService("StarterGui"):SetCore("SendNotification", {
                    Title = "Invalid Key!",
                    Text = "Please enter the correct key.",
                    Button1 = "OK",
                    Duration = 3
                })
            end)
        else
            -- Notifikasi jika tab Administrator sudah dibuat
            pcall(function()
                game:GetService("StarterGui"):SetCore("SendNotification", {
                    Title = "Tab Already Created",
                    Text = "The Administrator tab is already available.",
                    Button1 = "OK",
                    Duration = 3
                })
            end)
        end
    end
})

local SectionMining = TabMining:AddSection({ Name = "Mining Features" })

local player = Players.LocalPlayer
local Character = player.Character or player.CharacterAdded:Wait()
local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")

-- Folder Harvest (pastikan struktur ini sesuai)
local harvestFolderPath = workspace:WaitForChild("Game"):WaitForChild("Harvest")
local enabledharvest1 = false

---------------------------------------------------
-- Tabel lokasi ore (semua koordinat)
---------------------------------------------------
local locations = {
    PalmWood = {
    Vector3.new(9326.69, 30, -1926),
    Vector3.new(9411, 32, -1764.89),
    Vector3.new(9443.69, 32, -1530.52),
    Vector3.new(9682, 29.9, -1666.58),
    Vector3.new(9915, 34.2, -1797.32),
    Vector3.new(10007, 30.2, -1530.21),
    Vector3.new(10008.25, 29.5, -1529.86),
    Vector3.new(10971.68, 29.9, -1469.31),
    Vector3.new(5928, 6, -2654.92),
    Vector3.new(5990.56, 6, -2611.49),
    Vector3.new(6002.63, 6, -2511.28),
    Vector3.new(6074, 6, -2344.73),
    Vector3.new(3484, 6, -127.93),
    Vector3.new(3820.36, 14, 8.46),
    Vector3.new(3927, 10, 117.29),
    Vector3.new(4211, 2, 474.25),
    Vector3.new(4300, 18, 385.70)
},
YggrasilCelestial = {
    Vector3.new(-988.24, 130, -1882.98),
    Vector3.new(-1178.15, 140.00, -2282.66),
    Vector3.new(1509.65, 88, -3567.02),
    Vector3.new(1760.83, 90, -3313.54),
    Vector3.new(2031.67, 99, -4209.42),
    Vector3.new(1649.11, 95, -4267.45),
    Vector3.new(1015.43, 90, -3682.32),
    Vector3.new(1369, 170, -3138.73)
},
Moonstone = {
    Vector3.new(1635.84, -245, 188.75),
    Vector3.new(2286.72, -250, 107.21),
    Vector3.new(2517, -285, 96),
    Vector3.new(2419, -265, 534),
    Vector3.new(1707, -130, -805),
    Vector3.new(2401.77, -215, -292.88),
    Vector3.new(2171.57, -205, -406.99),
    Vector3.new(1696, -232, -187),
    Vector3.new(3344.34, 49.45, -801.09),
    Vector3.new(3138.30, 45, -376.54),
    Vector3.new(3018.03, 45, -451.32),
    Vector3.new(2133, 12, -1143),
    Vector3.new(1959, 17, -1589),
    Vector3.new(3898, 35, -923),
    Vector3.new(4094.10, 40, -1108.67),
    Vector3.new(3653.50, 55, -558.37),
    Vector3.new(4000.84, 45, -401.76),
    Vector3.new(3651.48, 50, -556.75),
    Vector3.new(2528, 24, -3054.78)
},
PhoenixTimber = {
    Vector3.new(2128.79, 70, -3765.65),
    Vector3.new(1781.60, 90, -4318.85),
    Vector3.new(1472.45, 173, -3099.79),
    Vector3.new(2487.99, 27, -2909.80),
    Vector3.new(1332.81, 20, -2114.49)
},
OakWood = {
    Vector3.new(2425.61, 18, -1391.93),
    Vector3.new(2140, 20, -1416),
    Vector3.new(2159, -200, -305),
    Vector3.new(1938, -210, -108.56),
    Vector3.new(1971, -247, 190),
    Vector3.new(2036, -265, 302),
    Vector3.new(2208, -246, 79),
    Vector3.new(2517.45, -279, 178),
    Vector3.new(2191.86, -275, 342),
    Vector3.new(4340, -99, -1051.72),
    Vector3.new(4201, 75, -371),
    Vector3.new(4816, 67, -458),
    Vector3.new(3941.34, 45, -282.34),
    Vector3.new(3322.51, 60, -425.17)
},
Rock = {
    Vector3.new(4701, 120, -1825.45),
    Vector3.new(4361, 77, -1948.54),
    Vector3.new(4354, 82, -1229.71),
    Vector3.new(4314, 75, -1071.56),
    Vector3.new(4316, 75, -850),
    Vector3.new(2212.77, -258, 173),
    Vector3.new(2462, -257, 721),
    Vector3.new(1237, -175, 274.21),
    Vector3.new(1656, -234, 28.44),        
    Vector3.new(1774, -235, -51.96)       
},
MapleWood = {
    Vector3.new(1944.66, 14, -1488),
    Vector3.new(1671.38, -21, -1181),
    Vector3.new(1920, -30, -1150),
    Vector3.new(1960, -100, -880),
    Vector3.new(5780.13, 115, -2125.75),
    Vector3.new(6381.43, 115, -578.41),
    Vector3.new(4409.69, 77, -1647.59),
    Vector3.new(4710, 79, -809),
    Vector3.new(3069.70, 69, -710),
    Vector3.new(2740.13, 50, -936.85),
    Vector3.new(2600, 45, -1088.83),
    Vector3.new(2268.33, 14, -1240.53),
    Vector3.new(2134.73, 21.50, -1361.85)
},
Emerald = {
    Vector3.new(1687, -270, -3674),
    Vector3.new(1693, -270, -4044),
    Vector3.new(1690, -270, -4592),
    Vector3.new(1580, -270, -4832),
    Vector3.new(1447, -270, -4750),
    Vector3.new(1191, -270, -5195),
    Vector3.new(1021, -265, -4417),
    Vector3.new(12600, 24, -690),
    Vector3.new(12302, -155, -621),
    Vector3.new(11996, -152, -715),
    Vector3.new(12729, -155, -906),
    Vector3.new(2330, 74, -3882),
    Vector3.new(2293, 75, -4054),
    Vector3.new(1338, 70, -4032),
    Vector3.new(4309, 65, -270),
    Vector3.new(3869, 46, -555),                
    Vector3.new(2004, 65, -3963),
    Vector3.new(1715, 75, -3534),
    Vector3.new(1962, 71, -3496)
},
Amberite = {
    Vector3.new(1592, -270, -3668),
    Vector3.new(1573, -270, -3960),
    Vector3.new(1598, -270, -4472),
    Vector3.new(1330, -273, -4765),
    Vector3.new(1472, -270, -5183),
    Vector3.new(1338, -270, -3973),
    Vector3.new(1082, -273, -4029),
    Vector3.new(666, -270, -4074),
    Vector3.new(12368, 19, -974),
    Vector3.new(12228, -160, -500),
    Vector3.new(12182, -158, -768),
    Vector3.new(12253, -455, -1423)
},
Amethys = {
    Vector3.new(1100, -270, -4776),
    Vector3.new(1575, -273, -5031),
    Vector3.new(1174, -270, -4249),
    Vector3.new(1131, -270, -4003),
    Vector3.new(644, -275, -4437),
    Vector3.new(12211, -160, -970),
    Vector3.new(12653, -80, -921),
    Vector3.new(12685, -410, -1121),
    Vector3.new(12376, -410, -911),
    Vector3.new(11954, -410, -420)
},
Emberstone = {
    Vector3.new(1674, -268.99, -4432),
    Vector3.new(1318, -268, -4857),    
    Vector3.new(12206, -152, -799),
    Vector3.new(12020, -402, -404),
    Vector3.new(12661, -400, -1173)
}
}

-- Mapping dropdown ore type ke folder Harvest
local folderMapping = {
    PalmWood = "PalmTree",
    YggrasilCelestial = "CelestialYggdrasil",
    Moonstone = "Moonstone",
    PhoenixTimber = "PhoenixheartRedwood",
    OakWood = "OakTree",
    Rock = "Rock",
    MapleWood = "StarfallMaple",
    Emerald = "Emeraldite",
    Amberite = "Amberite",
    Amethys = "Amethystium",
    Emberstone = "EmberstoneCluster"
}

-- Priority selections (5 dropdown) dengan default "Default"
local prioritySelections = {"Default", "Default", "Default", "Default", "Default"}
-- Table untuk menyimpan koordinat per priority (jika "Default" maka kosong)
local priorityCoordinates = {{}, {}, {}, {}, {}}

-- Default Tools Type
local selectedToolsType = "Common"  -- default Tools Type

---------------------------------------------------
-- Delay mapping berdasarkan Tools Type dan Ore Type
---------------------------------------------------
local delayMapping = {
    Common = {
        default = 6,
    },
    Uncommon = {
        default = 6,
    },
    Rare = {
        Rock = 0.7,
        Moonstone = 2.9,
        Amberite = 4,
        Amethys = 5.7,
        Emberstone = 5.9,
        OakWood = 1,
        MapleWood = 1.5,
        Yggdrasil = 4.4,
        PalmWood = 3,
        PhoenixTimber = 5.5,
        Emerald = 4.4,
        default = 5,
    },
    Epic = {
        default = 6,
    },
    Legend = {
        default = 6,
    },
    Unique = {
        Rock = 0.4,
        Moonstone = 1.4,
        Amberite = 1.6,
        Amethys = 2.5,
        Emberstone = 5.9,
        OakWood = 0.5,
        MapleWood = 0.75,
        Yggdrasil = 1.8,
        PalmWood = 1.5,
        default = 5,
        PhoenixTimber = 2.5,
        Emerald = 2.2,
    }
}

---------------------------------------------------
-- Fungsi Harvest
---------------------------------------------------
-- Fungsi untuk mendapatkan BasePart dari ModelParts (cek langsung dan dalam Model anak)
local function getHarvestPart(modelParts)
    for _, child in ipairs(modelParts:GetChildren()) do
        if child:IsA("BasePart") then
            return child
        end
    end
    for _, child in ipairs(modelParts:GetChildren()) do
        if child:IsA("Model") then
            for _, subChild in ipairs(child:GetChildren()) do
                if subChild:IsA("BasePart") then
                    return subChild
                end
            end
        end
    end
    return nil
end

-- Fungsi validasi harvest:
-- Harvest dianggap _masih aktif_ jika:
-- (1) Ditemukan BasePart dengan Transparency < 0.9
-- AND
-- (2) HarvestModel.PrimaryPart memiliki ProximityPrompt dengan Enabled = true.
-- Jadi, jika ProximityPrompt sudah false, harvest dianggap selesai meskipun transparansi masih < 0.9.
local function isHarvestValid(harvestModel)
    if not harvestModel or not harvestModel.Parent then
        return false
    end
    local modelParts = harvestModel:FindFirstChild("ModelParts")
    if modelParts then
        local harvestPart = getHarvestPart(modelParts)
        if harvestPart then
            local transparencyActive = (harvestPart.Transparency < 0.9)
            local promptActive = false
            if harvestModel.PrimaryPart then
                local prompt = harvestModel.PrimaryPart:FindFirstChildOfClass("ProximityPrompt")
                if prompt then
                    promptActive = prompt.Enabled  -- harvest aktif jika prompt aktif (true)
                end
            end
            return transparencyActive and promptActive
        end
    end
    return false
end

-- Fungsi mencari HarvestModel terdekat di folder yang sesuai berdasarkan jarak dan validitas harvest.
local function findNearestHarvestModel(oreType)
    local folderName = folderMapping[oreType]
    if not folderName then return nil, math.huge end
    local oreFolder = harvestFolderPath:FindFirstChild(folderName)
    local closestHarvestModel = nil
    local shortestDistance = math.huge
    if oreFolder and oreFolder:IsA("Folder") then
        for _, harvestModel in ipairs(oreFolder:GetChildren()) do
            if harvestModel:IsA("Model") and harvestModel.Name == "HarvestModel" then
                if isHarvestValid(harvestModel) then
                    local modelParts = harvestModel:FindFirstChild("ModelParts")
                    local harvestPart = modelParts and getHarvestPart(modelParts)
                    if harvestPart then
                        local distance = (HumanoidRootPart.Position - harvestPart.Position).Magnitude
                        if distance < shortestDistance then
                            shortestDistance = distance
                            closestHarvestModel = harvestModel
                        end
                    end
                end
            end
        end
    end
    return closestHarvestModel, shortestDistance
end

---------------------------------------------------
-- Fungsi untuk teleport ke lokasi ore dan melakukan harvest
-- Setelah teleport, jika harvest aktif, tunggu delay spesifik (berdasarkan Tools Type & oreType)
-- kemudian panggil event Harvest satu kali.
-- Jika harvest tidak aktif, langsung lanjut ke ore berikutnya.
local function processTeleportLocation(location, oreType)
    if player.Character and HumanoidRootPart then
        -- Teleport ke lokasi
        local targetPos = location + Vector3.new(0, 3, 0)
        local tweenInfo = TweenInfo.new(0.7, Enum.EasingStyle.Sine, Enum.EasingDirection.Out)
        local tween = TweenService:Create(HumanoidRootPart, tweenInfo, {CFrame = CFrame.new(targetPos)})
        tween:Play()
        tween.Completed:Wait()
        
        task.wait(0.3)  -- Tunggu stabilisasi setelah teleport
        
        -- Cek GameplayPaused: TUNGGU SAMPAI FALSE
        while player and player.GameplayPaused do
            task.wait(0.1)
            if not enabledharvest1 then break end
        end
        if not enabledharvest1 then return end  -- Hentikan jika toggle mati
        
        -- Lanjut ke pengecekan harvest HANYA JIKA GameplayPaused = false
        local harvestModel, _ = findNearestHarvestModel(oreType)
        if harvestModel and isHarvestValid(harvestModel) then
            -- Hitung delay berdasarkan Tools Type & Ore Type
            local toolsMapping = delayMapping[selectedToolsType] or {}
            local oreKey = oreType
            if oreKey == "YggrasilCelestial" then oreKey = "Yggdrasil" end
            local specificDelay = toolsMapping[oreKey] or toolsMapping.default or 5
            
            task.wait(specificDelay)  -- Tunggu delay sebelum harvest
            
            -- Trigger harvest event
            local harvestId = harvestModel:GetAttribute("HarvestId")
            if harvestId then
                ReplicatedStorage.Events.Harvest.Harvest:FireServer("Harvest", harvestId)
            end
            
            -- Delay tambahan untuk Tools Unique
            if selectedToolsType == "Unique" then
                task.wait(0.3)
            else
                task.wait(0.8)
            end
        end
    end
end


---------------------------------------------------
-- Loop AutoHarvest berdasarkan Priority
---------------------------------------------------
local function harvestLoop()
    while enabledharvest1 do
        for priority = 1, 5 do
            local oreType = prioritySelections[priority]
            
            if oreType and oreType ~= "Default" then
                local coords = locations[oreType]
                
                if coords and #coords > 0 then
                    for i = 1, #coords do
                        if not enabledharvest1 then break end
                        
                        -- Tunggu sampai GameplayPaused = false
                        while LocalPlayer and LocalPlayer.GameplayPaused do
                            task.wait(0.1)
                            if not enabledharvest1 then break end
                        end
                        if not enabledharvest1 then break end
                        
                        processTeleportLocation(coords[i], oreType)
                    end
                end
            end
            
            if not enabledharvest1 then break end
        end
        
        task.wait(0.1)
    end
end

-- Dropdown untuk memilih Tools Type
SectionMining:AddDropdown({
    Name = "Select Tools Type",
    Default = "Rare",
    Options = {"Common (coming soon)", "Uncommon (coming soon)", "Rare", "Epic (coming soon)", "Legend (coming soon)", "Unique"},
    Callback = function(Value)
        selectedToolsType = Value
    end
})

-- Buat 5 dropdown untuk Harvest Priority [1] sampai [5]
for i = 1, 5 do
    SectionMining:AddDropdown({
        Name = "Harvest Priority [" .. i .. "]",
        Default = "Default",
        Options = {"Default", "PalmWood", "YggrasilCelestial", "Moonstone", "PhoenixTimber", "OakWood", "Rock", "MapleWood", "Emerald", "Amberite", "Amethys", "Emberstone"},
        Callback = function(Value)
            prioritySelections[i] = Value
        end
    })
end

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local isNoClip = false -- Mulai dengan NoClip non-aktif

-- Fungsi untuk mengaktifkan atau menonaktifkan NoClip
local function toggleNoClip(Value)
    isNoClip = Value
    if isNoClip then
        -- Jika NoClip diaktifkan
        task.spawn(function()
            while isNoClip do
                for _, part in pairs(character:GetChildren()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = false
                    end
                end
                task.wait() -- Tunggu hingga frame berikutnya
            end
        end)
        -- Notifikasi bahwa NoClip aktif
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "Wall Hack",
            Text = "Wall Hack is Actived!",
            Duration = 5
        })
    else
        -- Jika NoClip dinonaktifkan, kembalikan collision ke normal
        for _, part in pairs(character:GetChildren()) do
            if part:IsA("BasePart") then
                part.CanCollide = true
            end
        end
        -- Notifikasi bahwa NoClip dinonaktifkan
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "Wall Hack",
            Text = "WallHack is Deactivated!",
            Duration = 5
        })
    end
end

SectionMining:AddToggle({
    Name = "Wall Hack",
    Default = false,
    Callback = function(Value)
        toggleNoClip(Value)
    end
})

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
local humanoid = character:WaitForChild("Humanoid")
local bodyVelocity
local isFrozen = false -- Status awal untuk karakter tidak dibekukan

-- Fungsi untuk membekukan karakter
local function freezeCharacter()
    -- Nonaktifkan pergerakan manual
    humanoid.WalkSpeed = 0
    humanoid.JumpPower = 0

    -- Kunci karakter di tempat menggunakan BodyVelocity
    bodyVelocity = Instance.new("BodyVelocity")
    bodyVelocity.Velocity = Vector3.new(0, 0, 0)
    bodyVelocity.MaxForce = Vector3.new(math.huge, math.huge, math.huge) -- Kekuatan maksimum
    bodyVelocity.Parent = humanoidRootPart

    -- Notifikasi bahwa karakter dibekukan
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "Freeze",
        Text = "Character is Freezed!",
        Duration = 5
    })
end

-- Fungsi untuk melepas freeze karakter
local function unfreezeCharacter()
    humanoid.WalkSpeed = 16 -- Kembalikan ke kecepatan berjalan normal (adjust sesuai kebutuhan)
    humanoid.JumpPower = 50 -- Kembalikan ke daya lompat normal (adjust sesuai kebutuhan)

    if bodyVelocity then
        bodyVelocity:Destroy() -- Hapus BodyVelocity
    end

    -- Notifikasi bahwa karakter telah dibebaskan
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "Freeze",
        Text = "Character is Unfreezed!",
        Duration = 5
    })
end

-- Fungsi untuk toggle freeze
local function toggleFreeze(Value)
    isFrozen = Value
    if isFrozen then
        freezeCharacter() -- Bekukan karakter
    else
        unfreezeCharacter() -- Lepaskan karakter
    end
end

SectionMining:AddToggle({
    Name = "Freezer",
    Default = false,
    Callback = function(Value)
        toggleFreeze(Value)
    end
})

-- Toggle AutoHarvest (satu toggle untuk semua priority)
SectionMining:AddToggle({
    Name = "Start Harvest",
    Default = false,
    Callback = function(Value)
        enabledharvest1 = Value
        if enabledharvest1 then
            spawn(harvestLoop)
        end
    end
})



local Player = game.Players.LocalPlayer
local Character = Player.Character or Player.CharacterAdded:Wait()
local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")


-- Section: Misc Features
local SectionMisc = TabMisc:AddSection({ Name = "Misc Features" })

-- Anti-AFK
local function enableAntiAFK()
    game:GetService('Players').LocalPlayer.Idled:Connect(function()
        VirtualUser:CaptureController()
        VirtualUser:ClickButton2(Vector2.new())
    end)
end

SectionMisc:AddToggle({
    Name = "Anti AFK",
    Default = false,
    Callback = function(Value)
        if Value then
            enableAntiAFK()
        end
        StarterGui:SetCore("SendNotification", {
            Title = "Anti AFK",
            Text = Value and "Anti AFK: Enabled" or "Anti AFK: Disabled",
            Button1 = "OK",
            Duration = 5
        })
    end
})

SectionMisc:AddToggle({
    Name = "Camera Zoom Extender",
    Default = false,
    Callback = function(Value)
        if Value then
            player.CameraMaxZoomDistance = 300
            player.CameraMinZoomDistance = 0
        else
            player.CameraMaxZoomDistance = 30
            player.CameraMinZoomDistance = 15
        end
        StarterGui:SetCore("SendNotification", {
            Title = "Camera Zoom Extender",
            Text = Value and "Camera Zoom Extender: Enabled" or "Camera Zoom Extender: Disabled",
            Button1 = "OK",
            Duration = 5
        })
    end
})

SectionMisc:AddButton({
    Name = "Force Player Camera",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/GRPGaming/Key-System/refs/heads/Xycer-Hub-Script/Force%20Player%20Cam"))()
        StarterGui:SetCore("SendNotification", {
            Title = "Force Player Cam",
            Text = "Force Camera Setter executed!",
            Button1 = "OK",
            Duration = 3
        })
    end
})

SectionMisc:AddButton({
    Name = "Rejoin Server",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/GRPGaming/Key-System/refs/heads/Xycer-Hub-Script/Rejoin"))()
        StarterGui:SetCore("SendNotification", {
            Title = "Rejoin Server",
            Text = "Rejoin Server executed!",
            Button1 = "OK",
            Duration = 3
        })
    end
})

-- Tambahkan Toggle dan simpan referensinya agar bisa di-update secara programatik
local openMarketToggle = SectionMisc:AddToggle({
    Name = "Open Market Place",
    Default = false,
    Callback = function(Value)
        local marketUI = Players.LocalPlayer.PlayerGui.Actions.Market
        if Value then
            marketUI.Visible = true
            StarterGui:SetCore("SendNotification", {
                Title = "Market Place",
                Text = "Market: Enabled",
                Button1 = "OK",
                Duration = 3
            })
        else
            marketUI.Visible = false
        end
    end
})

-- Monitor properti Visible pada Market UI dan nonaktifkan toggle jika UI dinonaktifkan secara eksternal
local marketUI = Players.LocalPlayer.PlayerGui.Actions.Market
marketUI:GetPropertyChangedSignal("Visible"):Connect(function()
    if not marketUI.Visible then
        openMarketToggle:Set(false)
    end
end)

-- Section: Hacks
local SectionHacks = TabHacks:AddSection({ Name = "Hacks" })

-- ESP Player
SectionHacks:AddButton({
    Name = "ESP Player",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/GRPGaming/Key-System/refs/heads/Xycer-Hub-Script/ESP%20Player.txt"))()
        StarterGui:SetCore("SendNotification", {
            Title = "ESP Player Script",
            Text = "ESP Script executed!",
            Button1 = "OK",
            Duration = 3
        })
    end
})

SectionHacks:AddButton({
    Name = "Aura Attack [ Sword ]",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/GRPGaming/Key-System/refs/heads/Xycer-Hub-Script/Aura%20Attack"))()
        StarterGui:SetCore("SendNotification", {
            Title = "Aura Attack",
            Text = "AuraAttack Script executed!",
            Button1 = "OK",
            Duration = 3
        })
    end
})

SectionHacks:AddButton({
    Name = "High Jump",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/GRPGaming/Key-System/refs/heads/Xycer-Hub-Script/HighJump"))()
        StarterGui:SetCore("SendNotification", {
            Title = "High Jump",
            Text = "High Jump executed!",
            Button1 = "OK",
            Duration = 3
        })
    end
})

-- Warna yang diperbolehkan
local function isColorValid(color)
    local white = Color3.new(1, 1, 1)
    local purple = Color3.new(163/255, 60/255, 206/255)
    
    local tolerance = 0.02
    local isWhite = (math.abs(color.R - white.R) < tolerance and
                    math.abs(color.G - white.G) < tolerance and
                    math.abs(color.B - white.B) < tolerance)
    
    local isPurple = (math.abs(color.R - purple.R) < tolerance and
                     math.abs(color.G - purple.G) < tolerance and
                     math.abs(color.B - purple.B) < tolerance)
    
    print("[DEBUG] Color Check - Current:", color, "Is White:", isWhite, "Is Purple:", isPurple)
    return isWhite or isPurple
end

-- Ambil warna teks dari path yang benar
local function getTextColor()
    local character = player.Character or player.CharacterAdded:Wait()
    if not character then return Color3.new(0,0,0) end

    local head = character:FindFirstChild("Head")
    if not head then return Color3.new(0,0,0) end

    local healthMana = head:FindFirstChild("HealthAndMana")
    if not healthMana then return Color3.new(0,0,0) end

    local desc = healthMana:FindFirstChild("PlayerDescription")
    if not desc then return Color3.new(0,0,0) end

    local nameFrame = desc:FindFirstChild("NameAndTitle")
    if not nameFrame then return Color3.new(0,0,0) end

    return nameFrame.NameFrame.NameText.TextColor3
end

-- Variabel untuk posisi dan monitoring
local monitoringActive = false
local savedCFrame = nil
local cleanseAttemptCount = 0 -- Menyimpan jumlah usaha cleansing

local cleanToggle = SectionHacks:AddToggle({
    Name = "Auto Cleanse PlayerKiller [ Essence Required ]",
    Default = false,
    Callback = function(state)
        monitoringActive = state

        if state then
            -- Cek warna nama pemain sebelum melanjutkan
            local initialTextColor = getTextColor()
            if isColorValid(initialTextColor) then
                OrionLib:MakeNotification({
                    Name = "NOTICE",
                    Content = "You are not playerkiller!",
                    Time = 5
                })
                return -- Keluarkan dari fungsi tanpa menjalankan kode lebih lanjut
            end

            -- Simpan posisi awal pemain
            local success, err = pcall(function()
                local character = player.Character or player.CharacterAdded:Wait()
                local humanoidRootPart = character:WaitForChild("HumanoidRootPart", 5)
                if humanoidRootPart then
                    savedCFrame = humanoidRootPart.CFrame
                    print("[DEBUG] Saved initial position:", savedCFrame)
                    OrionLib:MakeNotification({
                        Name = "SYSTEM",
                        Content = "Position saved!",
                        Time = 3
                    })

                    -- Teleport ke koordinat yang ditentukan setelah menyimpan posisi
                    humanoidRootPart.CFrame = CFrame.new(2250.95, -237.38, 961.54)
                    OrionLib:MakeNotification({
                        Name = "SYSTEM",
                        Content = "Teleported to target position!",
                        Time = 3
                    })
                end
            end)

            if not success then
                OrionLib:MakeNotification({
                    Name = "ERROR",
                    Content = "Failed to save position!",
                    Time = 5
                })
                monitoringActive = false
                cleanToggle:Set(false)
                return
            end

            -- Reset jumlah upaya saat monitoring dimulai
            cleanseAttemptCount = 0
            
            OrionLib:MakeNotification({
                Name = "SYSTEM",
                Content = "Starting monitoring...",
                Time = 3
            })

            task.spawn(function()
                while monitoringActive do
                    local textColor = getTextColor()
                    print("[DEBUG] Current Color:", textColor)

                    if isColorValid(textColor) then
                        -- Hitung total essence yang digunakan
                        local totalEssence = cleanseAttemptCount * 320
                        OrionLib:MakeNotification({
                            Name = "SUCCESS",
                            Content = "Total Essence Used: " .. totalEssence,
                            Time = 5
                        })

                        -- Teleport ke saved CFrame setelah status bersih terdeteksi
                        pcall(function()
                            local character = player.Character
                            if character then
                                local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
                                if humanoidRootPart and savedCFrame then
                                    humanoidRootPart.CFrame = savedCFrame
                                    OrionLib:MakeNotification({
                                        Name = "SUCCESS",
                                        Content = "Teleported back to original position!",
                                        Time = 5
                                    })
                                end
                            end
                        end)

                        -- Matikan toggle secara instan
                        monitoringActive = false
                        cleanToggle:Set(false)
                        break
                    else
                        cleanseAttemptCount = cleanseAttemptCount + 1
                        OrionLib:MakeNotification({
                            Name = "WARNING",
                            Content = "Detected PlayerKiller status! Attempt #" .. cleanseAttemptCount,
                            Time = 3
                        })

                        -- Proses cleansing
                        pcall(function()
                            game:GetService("ReplicatedStorage").Events.Store.BuyItem:FireServer("KarmaCleansePotion", "grocery")
                            task.wait(1.2)
                            game:GetService("ReplicatedStorage").Events.ItemBar.ActivateItem:FireServer("KarmaCleansePotion", {
                                activePetsData = {}
                            })
                        end)

                        task.wait(0.5) -- Tunggu sebelum melanjutkan loop
                    end

                    if not monitoringActive then break end
                    task.wait(0.1)
                end
            end)
        else
            -- Reset jumlah upaya saat monitoring dinonaktifkan
            cleanseAttemptCount = 0
            OrionLib:MakeNotification({
                Name = "SYSTEM",
                Content = "Monitoring stopped",
                Time = 3
            })
        end
    end
})

local autoRespawnEnabled = false

SectionHacks:AddToggle({
    Name = "Auto Respawn",
    Default = false,
    Callback = function(Value)
        autoRespawnEnabled = Value
        if Value then
            StarterGui:SetCore("SendNotification", {
                Title = "Auto Respawn",
                Text = "Auto Respawn: Enabled",
                Button1 = "OK",
                Duration = 3
            })
            
            spawn(function()
                local player = Players.LocalPlayer
                while autoRespawnEnabled and player do
                    -- Cek GUI Death Window
                    local deathGUI = player.PlayerGui:FindFirstChild("Actions")
                    if deathGUI then
                        local deathWindow = deathGUI:FindFirstChild("DeathWindow")
                        if deathWindow and deathWindow.Visible then
                            -- Simpan CFrame sebelum respawn
                            wait(0.1)
                            local character = player.Character
                            local humanoidRoot = character and character:FindFirstChild("HumanoidRootPart")
                            
                            if humanoidRoot then
                                local savedCFrame = humanoidRoot.CFrame
                                
                                -- Panggil respawn
                                wait(0.2)
                                game:GetService("ReplicatedStorage").Events.Player.GoToNearestTown:FireServer("Death")
                                
                                -- Tunggu dan teleport kembali
                                wait(0.3)
                                local newCharacter = player.Character
                                local newRoot = newCharacter and newCharacter:FindFirstChild("HumanoidRootPart")
                                
                                if newRoot then
                                    newRoot.CFrame = savedCFrame
                                end
                            end
                        end
                    end
                    wait(0.1) -- Cooldown pemeriksaan
                end
            end)
        else
            StarterGui:SetCore("SendNotification", {
                Title = "Auto Respawn",
                Text = "Auto Respawn: Disabled",
                Button1 = "OK",
                Duration = 3
            })
        end
    end
})

local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
local originalSize = humanoidRootPart.Size -- Simpan ukuran asli


local SectionSize = TabHacks:AddSection({ Name = "Character Configuration" })


-- Slider for Speed Boost
local speedBoostEnabled = false -- To track if the speed boost is enabled
local walkSpeed = 16 -- Default WalkSpeed

-- Slider for Speed
local Slider = SectionSize:AddSlider({
    Name = "Speed Boost",
    Min = 1,
    Max = 200,
    Default = walkSpeed,
    Color = Color3.fromRGB(255, 255, 255),
    Increment = 1,
    ValueName = "Speed",
    Callback = function(Value)
        walkSpeed = Value
    end    
})

SectionSize:AddToggle({
    Name = "Enable Speed Boost",
    Default = false,
    Callback = function(Value)
        speedBoostEnabled = Value

        -- Notify the user
        if Value then
            StarterGui:SetCore("SendNotification", {
                Title = "Speed Boost",
                Text = "Speed Boost: Enabled",
                Button1 = "OK",
                Duration = 3
            })
        else
            StarterGui:SetCore("SendNotification", {
                Title = "Speed Boost",
                Text = "Speed Boost: Disabled",
                Button1 = "OK",
                Duration = 3
            })
        end
    end
})

-- Update WalkSpeed based on Toggle and Slider
RunService.RenderStepped:Connect(function()
    if player.Character and player.Character:FindFirstChild("Humanoid") then
        if speedBoostEnabled then
            player.Character.Humanoid.WalkSpeed = walkSpeed
        else
            player.Character.Humanoid.WalkSpeed = 16 -- Reset to default if disabled
        end
    end
end)

-- Variabel untuk menyimpan pengaturan
local currentYSize = 1
local sizeActive = false

-- Tambahkan Slider
SectionSize:AddSlider({
    Name = "Y Axis Size",
    Min = 1,
    Max = 50,
    Default = 1,
    Color = Color3.fromRGB(255,255,255),
    Increment = 1,
    ValueName = "units",
    Callback = function(Value)
        currentYSize = Value
        -- Update size jika toggle aktif
        if sizeActive then
            humanoidRootPart.Size = Vector3.new(originalSize.X, currentYSize, originalSize.Z)
        end
    end    
})

-- Tambahkan Toggle
SectionSize:AddToggle({
    Name = "Apply Size",
    Default = false,
    Callback = function(Value)
        sizeActive = Value
        
        if Value then
            -- Terapkan ukuran baru
            humanoidRootPart.Size = Vector3.new(originalSize.X, currentYSize, originalSize.Z)
            StarterGui:SetCore("SendNotification", {
                Title = "Size Applied",
                Text = "Y Size: "..currentYSize.." units",
                Duration = 3
            })
        else
            -- Kembalikan ke ukuran asli
            humanoidRootPart.Size = originalSize
            StarterGui:SetCore("SendNotification", {
                Title = "Size Reset",
                Text = "Y Size reset to original",
                Duration = 3
            })
        end
    end
})

-- Section: Teleportation
local SectionTeleportation = TabTeleportation:AddSection({ Name = "Teleportation" })

-- Dropdowns for selecting locations, bosses, and NPCs
local selectedLocation = "Catacomb"
local selectedBoss = "Karnak the Conquerer"
local selectedNPC = "Loren"
local lastSelectedType = "location"

-- Original Location Dropdown
local teleportDropdown = SectionTeleportation:AddDropdown({
    Name = "Other Location",
    Default = "Catacomb",
    Options = {
        "Catacomb",
        "Pyramid Island",
        "Dungeon 1 [ Legendary & Elite ]",
        "Dungeon 2 [ Unique & Elite ]",
        "Watcher (Spot 1)",
        "Watcher (Spot 2)",
        "Watcher (Spot 3)",
        "Haunted Marauder (Spot 1)",
        "Haunted Marauder (Spot 2)"
    },
    Callback = function(Value)
        selectedLocation = Value
        lastSelectedType = "location"
    end
})

-- Boss Location Dropdown
local bossDropdown = SectionTeleportation:AddDropdown({
    Name = "Boss Location",
    Default = "Karnak the Conquerer",
    Options = {
        "Karnak the Conquerer",
        "Deepcrawler",
        "Snowhide",
        "Behemoth the Bear",
        "Tarantox",
        "Baium the Last Boss",
        "Lord Veto Elm"
    },
    Callback = function(Value)
        selectedBoss = Value
        lastSelectedType = "boss"
    end
})

-- NPC Location Dropdown
local npcDropdown = SectionTeleportation:AddDropdown({
    Name = "NPC Location",
    Default = "Loren",
    Options = {
        "Loren",
        "Ghost the Alden",
        "Zorin",
        "Akamanah",
        "Aerendyl"
    },
    Callback = function(Value)
        selectedNPC = Value
        lastSelectedType = "npc"
    end
})

-- Position Maps
local positionMap = {
    ["Catacomb"] = Vector3.new(1417, -242, -3613),
    ["Pyramid Island"] = Vector3.new(11525.25, 48.24, -1583.48),
    ["Dungeon 1 [ Legendary & Elite ]"] = Vector3.new(2289.64, 57.05, -2908.72),
        ["Dungeon 2 [ Unique & Elite ]"] = Vector3.new(1873.49, 97.49, -3737.19),
    ["Watcher (Spot 1)"] = Vector3.new(12029, -353, -382),
    ["Watcher (Spot 2)"] = Vector3.new(12303, -361, -794),
    ["Watcher (Spot 3)"] = Vector3.new(12283, -416, -1493),
    ["Haunted Marauder (Spot 1)"] = Vector3.new(11870.11, -471.18, -783.97),
    ["Haunted Marauder (Spot 2)"] = Vector3.new(12325.16, -471.10, -1252.06)
}

local bossPositionMap = {
    ["Karnak the Conquerer"] = Vector3.new(-3095.02, 224.17, -1438.26),
    ["Deepcrawler"] = Vector3.new(4358.92, 97.14, -767.33),
    ["Snowhide"] = Vector3.new(1018.50, -14.86, -567.73),
    ["Behemoth the Bear"] = Vector3.new(3794.97, 72.43, -485.29),
    ["Tarantox"] = Vector3.new(3148.35, 61.14, -939.02),
    ["Baium the Last Boss"] = Vector3.new(865.68, -249.12, -5112.19),
    ["Lord Veto Elm"] = Vector3.new(11867.32, -518.84, -1227.52)
}

local npcPositionMap = {
    ["Loren"] = Vector3.new(2159.13, -242.87, 804.93),
    ["Ghost the Alden"] = Vector3.new(604.96, 163.14, -3621.73),
    ["Zorin"] = Vector3.new(504.60, 89.14, -2315.48),
    ["Akamanah"] = Vector3.new(1279.30, -249.12, -4540.94),
    ["Aerendyl"] = Vector3.new(1473.34, -249.12, -4536.04)
}

-- Apply Teleport button
SectionTeleportation:AddButton({
    Name = "Apply Teleport",
    Callback = function()
        local humanoidRootPart = player.Character:FindFirstChild("HumanoidRootPart") or player.CharacterAdded:Wait():FindFirstChild("HumanoidRootPart")
        
        if not humanoidRootPart then
            StarterGui:SetCore("SendNotification", {
                Title = "Error",
                Text = "Character not loaded!",
                Button1 = "OK",
                Duration = 3
            })
            return
        end

        local targetPosition
        local locationName
        
        -- Determine position based on selection
        if lastSelectedType == "boss" then
            targetPosition = bossPositionMap[selectedBoss]
            locationName = selectedBoss
        elseif lastSelectedType == "npc" then
            targetPosition = npcPositionMap[selectedNPC]
            locationName = selectedNPC
        else
            targetPosition = positionMap[selectedLocation]
            locationName = selectedLocation
        end

        if targetPosition then
            TweenService:Create(humanoidRootPart, TweenInfo.new(0.5), {
                CFrame = CFrame.new(targetPosition)
            }):Play()
            
            StarterGui:SetCore("SendNotification", {
                Title = "Teleportation",
                Text = "Teleported to "..locationName.."!",
                Button1 = "OK",
                Duration = 3
            })
        else
            StarterGui:SetCore("SendNotification", {
                Title = "Error",
                Text = "Invalid location selected!",
                Button1 = "OK",
                Duration = 3
            })
        end
    end
})

-- Tab: Troll (Contoh implementasi)
local SectionTroll = TabTroll:AddSection({Name = "Troll Features"})

            -- No Gravity 😂
            local isGravityOff = false
            SectionTroll:AddToggle({
                Name = "No Gravity",
                Default = false,
                Callback = function(Value)
                    isGravityOff = Value
                    local humanoid = player.Character and player.Character:FindFirstChild("Humanoid")
                    if humanoid then
                        if isGravityOff then
                            wait(3)  -- Delay 3 seconds before enabling effect
                            humanoid.PlatformStand = true
                            humanoid.WalkSpeed = 50
                            humanoid.JumpPower = 50
                        else
                            humanoid.PlatformStand = false
                        end
                    end

                    game:GetService("StarterGui"):SetCore("SendNotification", {
                        Title = "No Gravity Toggle",
                        Text = Value and "No Gravity is now enabled" or "No Gravity is now disabled",
                        Button1 = "Thanks",
                        Duration = 5
                    })
                end
            })

            game:GetService("RunService").Heartbeat:Connect(function()
                local humanoid = player.Character and player.Character:FindFirstChild("Humanoid")
                if humanoid then
                    humanoid.PlatformStand = isGravityOff
                end
            end)



-- Final initialization
OrionLib:Init()