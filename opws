-- Library Script GUI (ZusumeLib)

local ZusumeLib = {}

-- Create a ScreenGui for the interface
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "ZusumeGUI"
ScreenGui.Parent = game:GetService("CoreGui")
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
ScreenGui.ResetOnSpawn = false

-- Utility Functions
local function makeDraggable(frame)
    local dragging, dragInput, dragStart, startPos
    
    frame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    frame.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)
    
    game:GetService("UserInputService").InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            local delta = input.Position - dragStart
            frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)
end

-- Window Creation
function ZusumeLib:MakeWindow(config)
    local windowConfig = config or {}
    local windowName = windowConfig.Name or "Zusume Hub"
    local hidePremium = windowConfig.HidePremium or false
    local saveConfig = windowConfig.SaveConfig or false
    local configFolder = windowConfig.ConfigFolder or "ZusumeConfig"
    local introEnabled = windowConfig.IntroEnabled or false
    
    -- Create main frame
    local MainFrame = Instance.new("Frame")
    MainFrame.Name = "MainFrame"
    MainFrame.Parent = ScreenGui
    MainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 35)
    MainFrame.BorderSizePixel = 0
    MainFrame.Position = UDim2.new(0.2, 0, 0.2, 0)
    MainFrame.Size = UDim2.new(0, 550, 0, 350)
    
    -- Create top bar
    local TopBar = Instance.new("Frame")
    TopBar.Name = "TopBar"
    TopBar.Parent = MainFrame
    TopBar.BackgroundColor3 = Color3.fromRGB(40, 40, 45)
    TopBar.BorderSizePixel = 0
    TopBar.Size = UDim2.new(1, 0, 0, 30)
    
    -- Create title
    local Title = Instance.new("TextLabel")
    Title.Name = "Title"
    Title.Parent = TopBar
    Title.BackgroundTransparency = 1
    Title.Position = UDim2.new(0, 10, 0, 0)
    Title.Size = UDim2.new(0, 200, 1, 0)
    Title.Font = Enum.Font.SourceSansBold
    Title.Text = windowName
    Title.TextColor3 = Color3.fromRGB(255, 255, 255)
    Title.TextSize = 18
    Title.TextXAlignment = Enum.TextXAlignment.Left
    
    -- Create close button
    local CloseButton = Instance.new("TextButton")
    CloseButton.Name = "CloseButton"
    CloseButton.Parent = TopBar
    CloseButton.BackgroundTransparency = 1
    CloseButton.Position = UDim2.new(1, -30, 0, 0)
    CloseButton.Size = UDim2.new(0, 30, 1, 0)
    CloseButton.Font = Enum.Font.SourceSansBold
    CloseButton.Text = "Ã—"
    CloseButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    CloseButton.TextSize = 24
    
    CloseButton.MouseButton1Click:Connect(function()
        ScreenGui:Destroy()
    end)
    
    -- Create tab container
    local TabContainer = Instance.new("Frame")
    TabContainer.Name = "TabContainer"
    TabContainer.Parent = MainFrame
    TabContainer.BackgroundColor3 = Color3.fromRGB(35, 35, 40)
    TabContainer.BorderSizePixel = 0
    TabContainer.Position = UDim2.new(0, 0, 0, 30)
    TabContainer.Size = UDim2.new(0, 120, 1, -30)
    
    -- Create tab content area
    local TabContent = Instance.new("Frame")
    TabContent.Name = "TabContent"
    TabContent.Parent = MainFrame
    TabContent.BackgroundColor3 = Color3.fromRGB(30, 30, 35)
    TabContent.BorderSizePixel = 0
    TabContent.Position = UDim2.new(0, 120, 0, 30)
    TabContent.Size = UDim2.new(1, -120, 1, -30)
    
    -- Make the window draggable
    makeDraggable(MainFrame)
    
    -- Create container for tabs and their content
    local tabs = {}
    local selectedTab = nil
    
    local window = {}
    
    -- Create a new tab
    function window:MakeTab(tabConfig)
        local tabName = tabConfig.Name or "Tab"
        local tabIcon = tabConfig.Icon or ""
        local premiumOnly = tabConfig.PremiumOnly or false
        
        -- Create tab button
        local TabButton = Instance.new("TextButton")
        TabButton.Name = tabName .. "Button"
        TabButton.Parent = TabContainer
        TabButton.BackgroundColor3 = Color3.fromRGB(35, 35, 40)
        TabButton.BorderSizePixel = 0
        TabButton.Size = UDim2.new(1, 0, 0, 30)
        TabButton.Font = Enum.Font.SourceSans
        TabButton.Text = tabName
        TabButton.TextColor3 = Color3.fromRGB(200, 200, 200)
        TabButton.TextSize = 16
        TabButton.AutoButtonColor = false
        
        -- Position the tab button
        local tabCount = #tabs
        TabButton.Position = UDim2.new(0, 0, 0, tabCount * 30)
        
        -- Create tab content frame
        local TabFrame = Instance.new("ScrollingFrame")
        TabFrame.Name = tabName .. "Frame"
        TabFrame.Parent = TabContent
        TabFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 35)
        TabFrame.BorderSizePixel = 0
        TabFrame.Size = UDim2.new(1, 0, 1, 0)
        TabFrame.ScrollBarThickness = 4
        TabFrame.ScrollingDirection = Enum.ScrollingDirection.Y
        TabFrame.AutomaticCanvasSize = Enum.AutomaticSize.Y
        TabFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
        TabFrame.Visible = false
        
        -- Handle tab selection
        TabButton.MouseButton1Click:Connect(function()
            if selectedTab then
                selectedTab.Frame.Visible = false
                selectedTab.Button.BackgroundColor3 = Color3.fromRGB(35, 35, 40)
                selectedTab.Button.TextColor3 = Color3.fromRGB(200, 200, 200)
            end
            
            TabFrame.Visible = true
            TabButton.BackgroundColor3 = Color3.fromRGB(45, 45, 50)
            TabButton.TextColor3 = Color3.fromRGB(255, 255, 255)
            selectedTab = {Frame = TabFrame, Button = TabButton}
        end)
        
        -- Store tab data
        local tab = {
            Frame = TabFrame,
            Button = TabButton,
            Items = {}
        }
        
        -- Add to tabs table
        table.insert(tabs, tab)
        
        -- If this is the first tab, select it
        if #tabs == 1 then
            TabButton.MouseButton1Click:Fire()
        end
        
        local tabObj = {}
        
        -- Create a new section in the tab
        function tabObj:AddSection(sectionConfig)
            local sectionName = sectionConfig.Name or "Section"
            
            -- Create section container
            local SectionContainer = Instance.new("Frame")
            SectionContainer.Name = sectionName .. "Container"
            SectionContainer.Parent = TabFrame
            SectionContainer.BackgroundColor3 = Color3.fromRGB(40, 40, 45)
            SectionContainer.BorderSizePixel = 0
            SectionContainer.Size = UDim2.new(1, -20, 0, 30)
            SectionContainer.Position = UDim2.new(0, 10, 0, #tab.Items * 40 + 10)
            SectionContainer.AutomaticSize = Enum.AutomaticSize.Y
            
            -- Create section header
            local SectionHeader = Instance.new("TextLabel")
            SectionHeader.Name = "Header"
            SectionHeader.Parent = SectionContainer
            SectionHeader.BackgroundColor3 = Color3.fromRGB(45, 45, 50)
            SectionHeader.BorderSizePixel = 0
            SectionHeader.Size = UDim2.new(1, 0, 0, 30)
            SectionHeader.Font = Enum.Font.SourceSansBold
            SectionHeader.Text = "  " .. sectionName
            SectionHeader.TextColor3 = Color3.fromRGB(255, 255, 255)
            SectionHeader.TextSize = 16
            SectionHeader.TextXAlignment = Enum.TextXAlignment.Left
            
            -- Create section content
            local SectionContent = Instance.new("Frame")
            SectionContent.Name = "Content"
            SectionContent.Parent = SectionContainer
            SectionContent.BackgroundColor3 = Color3.fromRGB(40, 40, 45)
            SectionContent.BorderSizePixel = 0
            SectionContent.Size = UDim2.new(1, 0, 0, 0)
            SectionContent.Position = UDim2.new(0, 0, 0, 30)
            SectionContent.AutomaticSize = Enum.AutomaticSize.Y
            
            -- Update canvas size
            table.insert(tab.Items, SectionContainer)
            
            local sectionObj = {}
            local sectionItems = {}
            
            -- Add a toggle to the section
            function sectionObj:AddToggle(toggleConfig)
                local toggleName = toggleConfig.Name or "Toggle"
                local defaultValue = toggleConfig.Default or false
                local callback = toggleConfig.Callback or function() end
                
                -- Create toggle container
                local ToggleContainer = Instance.new("Frame")
                ToggleContainer.Name = toggleName .. "Container"
                ToggleContainer.Parent = SectionContent
                ToggleContainer.BackgroundColor3 = Color3.fromRGB(40, 40, 45)
                ToggleContainer.BorderSizePixel = 0
                ToggleContainer.Size = UDim2.new(1, 0, 0, 40)
                ToggleContainer.Position = UDim2.new(0, 0, 0, #sectionItems * 40)
                
                -- Create toggle label
                local ToggleLabel = Instance.new("TextLabel")
                ToggleLabel.Name = "Label"
                ToggleLabel.Parent = ToggleContainer
                ToggleLabel.BackgroundTransparency = 1
                ToggleLabel.Position = UDim2.new(0, 10, 0, 0)
                ToggleLabel.Size = UDim2.new(1, -60, 1, 0)
                ToggleLabel.Font = Enum.Font.SourceSans
                ToggleLabel.Text = toggleName
                ToggleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
                ToggleLabel.TextSize = 16
                ToggleLabel.TextXAlignment = Enum.TextXAlignment.Left
                
                -- Create toggle button
                local ToggleButton = Instance.new("Frame")
                ToggleButton.Name = "Button"
                ToggleButton.Parent = ToggleContainer
                ToggleButton.BackgroundColor3 = defaultValue and Color3.fromRGB(0, 170, 255) or Color3.fromRGB(60, 60, 65)
                ToggleButton.BorderSizePixel = 0
                ToggleButton.Position = UDim2.new(1, -50, 0.5, -10)
                ToggleButton.Size = UDim2.new(0, 40, 0, 20)
                ToggleButton.AnchorPoint = Vector2.new(0, 0.5)
                
                -- Create toggle indicator
                local ToggleIndicator = Instance.new("Frame")
                ToggleIndicator.Name = "Indicator"
                ToggleIndicator.Parent = ToggleButton
                ToggleIndicator.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                ToggleIndicator.BorderSizePixel = 0
                ToggleIndicator.Position = defaultValue and UDim2.new(1, -18, 0.5, -8) or UDim2.new(0, 2, 0.5, -8)
                ToggleIndicator.Size = UDim2.new(0, 16, 0, 16)
                ToggleIndicator.AnchorPoint = Vector2.new(0, 0.5)
                
                -- Create button hitbox
                local ButtonHitbox = Instance.new("TextButton")
                ButtonHitbox.Name = "Hitbox"
                ButtonHitbox.Parent = ToggleContainer
                ButtonHitbox.BackgroundTransparency = 1
                ButtonHitbox.Size = UDim2.new(1, 0, 1, 0)
                ButtonHitbox.Text = ""
                
                -- Toggle state and functionality
                local toggled = defaultValue
                
                local function updateToggle()
                    toggled = not toggled
                    ToggleButton.BackgroundColor3 = toggled and Color3.fromRGB(0, 170, 255) or Color3.fromRGB(60, 60, 65)
                    ToggleIndicator.Position = toggled and UDim2.new(1, -18, 0.5, -8) or UDim2.new(0, 2, 0.5, -8)
                    callback(toggled)
                end
                
                ButtonHitbox.MouseButton1Click:Connect(updateToggle)
                
                -- Add toggle to section items
                table.insert(sectionItems, ToggleContainer)
                
                -- Update section size
                SectionContent.Size = UDim2.new(1, 0, 0, #sectionItems * 40)
                SectionContainer.Size = UDim2.new(1, -20, 0, 30 + #sectionItems * 40)
                
                -- Return toggle object with API methods
                local toggleObj = {}
                
                function toggleObj:Set(value)
                    if value ~= toggled then
                        toggled = not toggled
                        updateToggle()
                    end
                end
                
                return toggleObj
            end
            
            -- Add a button to the section
            function sectionObj:AddButton(buttonConfig)
                local buttonName = buttonConfig.Name or "Button"
                local callback = buttonConfig.Callback or function() end
                
                -- Create button container
                local ButtonContainer = Instance.new("Frame")
                ButtonContainer.Name = buttonName .. "Container"
                ButtonContainer.Parent = SectionContent
                ButtonContainer.BackgroundColor3 = Color3.fromRGB(40, 40, 45)
                ButtonContainer.BorderSizePixel = 0
                ButtonContainer.Size = UDim2.new(1, 0, 0, 40)
                ButtonContainer.Position = UDim2.new(0, 0, 0, #sectionItems * 40)
                
                -- Create button
                local Button = Instance.new("TextButton")
                Button.Name = "Button"
                Button.Parent = ButtonContainer
                Button.BackgroundColor3 = Color3.fromRGB(50, 50, 55)
                Button.BorderSizePixel = 0
                Button.Position = UDim2.new(0, 10, 0.5, -15)
                Button.Size = UDim2.new(1, -20, 0, 30)
                Button.Font = Enum.Font.SourceSans
                Button.Text = buttonName
                Button.TextColor3 = Color3.fromRGB(255, 255, 255)
                Button.TextSize = 16
                Button.AutoButtonColor = true
                
                -- Add button functionality
                Button.MouseButton1Click:Connect(function()
                    callback()
                end)
                
                -- Add button to section items
                table.insert(sectionItems, ButtonContainer)
                
                -- Update section size
                SectionContent.Size = UDim2.new(1, 0, 0, #sectionItems * 40)
                SectionContainer.Size = UDim2.new(1, -20, 0, 30 + #sectionItems * 40)
                
                return {}
            end
            
            -- Add a slider to the section
            function sectionObj:AddSlider(sliderConfig)
                local sliderName = sliderConfig.Name or "Slider"
                local minValue = sliderConfig.Min or 0
                local maxValue = sliderConfig.Max or 100
                local defaultValue = math.clamp(sliderConfig.Default or minValue, minValue, maxValue)
                local increment = sliderConfig.Increment or 1
                local callback = sliderConfig.Callback or function() end
                
                -- Create slider container
                local SliderContainer = Instance.new("Frame")
                SliderContainer.Name = sliderName .. "Container"
                SliderContainer.Parent = SectionContent
                SliderContainer.BackgroundColor3 = Color3.fromRGB(40, 40, 45)
                SliderContainer.BorderSizePixel = 0
                SliderContainer.Size = UDim2.new(1, 0, 0, 60)
                SliderContainer.Position = UDim2.new(0, 0, 0, #sectionItems * 40)
                
                -- Create slider label
                local SliderLabel = Instance.new("TextLabel")
                SliderLabel.Name = "Label"
                SliderLabel.Parent = SliderContainer
                SliderLabel.BackgroundTransparency = 1
                SliderLabel.Position = UDim2.new(0, 10, 0, 5)
                SliderLabel.Size = UDim2.new(1, -20, 0, 20)
                SliderLabel.Font = Enum.Font.SourceSans
                SliderLabel.Text = sliderName
                SliderLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
                SliderLabel.TextSize = 16
                SliderLabel.TextXAlignment = Enum.TextXAlignment.Left
                
                -- Create slider value display
                local SliderValue = Instance.new("TextLabel")
                SliderValue.Name = "Value"
                SliderValue.Parent = SliderContainer
                SliderValue.BackgroundTransparency = 1
                SliderValue.Position = UDim2.new(1, -50, 0, 5)
                SliderValue.Size = UDim2.new(0, 40, 0, 20)
                SliderValue.Font = Enum.Font.SourceSans
                SliderValue.Text = tostring(defaultValue)
                SliderValue.TextColor3 = Color3.fromRGB(255, 255, 255)
                SliderValue.TextSize = 16
                SliderValue.TextXAlignment = Enum.TextXAlignment.Right
                
                -- Create slider track
                local SliderTrack = Instance.new("Frame")
                SliderTrack.Name = "Track"
                SliderTrack.Parent = SliderContainer
                SliderTrack.BackgroundColor3 = Color3.fromRGB(60, 60, 65)
                SliderTrack.BorderSizePixel = 0
                SliderTrack.Position = UDim2.new(0, 10, 0, 30)
                SliderTrack.Size = UDim2.new(1, -20, 0, 10)
                
                -- Create slider fill
                local SliderFill = Instance.new("Frame")
                SliderFill.Name = "Fill"
                SliderFill.Parent = SliderTrack
                SliderFill.BackgroundColor3 = Color3.fromRGB(0, 170, 255)
                SliderFill.BorderSizePixel = 0
                SliderFill.Size = UDim2.new((defaultValue - minValue) / (maxValue - minValue), 0, 1, 0)
                
                -- Create slider thumb
                local SliderThumb = Instance.new("Frame")
                SliderThumb.Name = "Thumb"
                SliderThumb.Parent = SliderTrack
                SliderThumb.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                SliderThumb.BorderSizePixel = 0
                SliderThumb.Position = UDim2.new((defaultValue - minValue) / (maxValue - minValue), -5, 0.5, -5)
                SliderThumb.Size = UDim2.new(0, 10, 0, 20)
                SliderThumb.AnchorPoint = Vector2.new(0, 0.5)
                
                -- Create slider hitbox
                local SliderHitbox = Instance.new("TextButton")
                SliderHitbox.Name = "Hitbox"
                SliderHitbox.Parent = SliderTrack
                SliderHitbox.BackgroundTransparency = 1
                SliderHitbox.Size = UDim2.new(1, 0, 1, 0)
                SliderHitbox.Text = ""
                
                -- Slider functionality
                local currentValue = defaultValue
                
                local function updateSlider(input)
                    local trackPos = SliderTrack.AbsolutePosition.X
                    local trackSize = SliderTrack.AbsoluteSize.X
                    local mousePos = input.Position.X
                    
                    local relativePos = math.clamp((mousePos - trackPos) / trackSize, 0, 1)
                    local value = minValue + relativePos * (maxValue - minValue)
                    
                    -- Apply increment
                    value = math.floor(value / increment + 0.5) * increment
                    value = math.clamp(value, minValue, maxValue)
                    
                    -- Update slider visuals
                    SliderFill.Size = UDim2.new((value - minValue) / (maxValue - minValue), 0, 1, 0)
                    SliderThumb.Position = UDim2.new((value - minValue) / (maxValue - minValue), -5, 0.5, -5)
                    
                    -- Update value display
                    SliderValue.Text = tostring(value)
                    
                    -- Call callback if value changed
                    if value ~= currentValue then
                        currentValue = value
                        callback(value)
                    end
                end
                
                -- Handle slider interaction
                local dragging = false
                
                SliderHitbox.MouseButton1Down:Connect(function(input)
                    dragging = true
                    updateSlider({Position = input})
                end)
                
                game:GetService("UserInputService").InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        dragging = false
                    end
                end)
                
                game:GetService("UserInputService").InputChanged:Connect(function(input)
                    if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                        updateSlider(input)
                    end
                end)
                
                -- Add slider to section items
                table.insert(sectionItems, SliderContainer)
                
                -- Update section size (sliders take more space)
                SectionContent.Size = UDim2.new(1, 0, 0, #sectionItems * 40 + 20)
                SectionContainer.Size = UDim2.new(1, -20, 0, 30 + #sectionItems * 40 + 20)
                
                -- Return slider object with API methods
                local sliderObj = {}
                
                function sliderObj:Set(value)
                    value = math.clamp(value, minValue, maxValue)
                    value = math.floor(value / increment + 0.5) * increment
                    
                    -- Update slider visuals
                    SliderFill.Size = UDim2.new((value - minValue) / (maxValue - minValue), 0, 1, 0)
                    SliderThumb.Position = UDim2.new((value - minValue) / (maxValue - minValue), -5, 0.5, -5)
                    
                    -- Update value display
                    SliderValue.Text = tostring(value)
                    
                    -- Update value and call callback
                    currentValue = value
                    callback(value)
                end
                
                function sliderObj:GetValue()
                    return currentValue
                end
                
                return sliderObj
            end
            
            return sectionObj
        end
        
        return tabObj
    end
    
    return window
end

-- Library initialization
function ZusumeLib:Init()
    -- This function can be used for final setup steps
    print("ZusumeLib initialized")
end

return ZusumeLib