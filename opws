-- ZusumeHub Script for Roblox
-- Original Author: Zysume
-- Version: 1.0.1 (Fixed)
-- Last Updated: April 2025
-- Description: A comprehensive script for autofarming, teleportation, and combat enhancements in Roblox games.

-- Services
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local VirtualInputManager = game:GetService("VirtualInputManager")
local StarterGui = game:GetService("StarterGui")

-- Check if essential services are available
if not LocalPlayer then
    warn("LocalPlayer not found. The script will wait for it.")
    repeat wait(1) 
        LocalPlayer = Players.LocalPlayer 
    until LocalPlayer
end

-- Wait for LocalPlayer to fully load in a safer way
if not LocalPlayer.Character then
    LocalPlayer.CharacterAdded:Wait()
end

-- Fixed Library Loading with Protected Calls
-- Use loadstring directly with pcall to avoid HTTP errors
local TeleportGUILibrary
local success, errorOrLibrary = pcall(function()
    return loadstring(game:HttpGet("https://raw.githubusercontent.com/ZusumeHub/ZusumeHub/refs/heads/main/LibraryNewUI"))()
end)

if success then
    TeleportGUILibrary = errorOrLibrary
else
    warn("Failed to load library: " .. tostring(errorOrLibrary))
    -- Create a basic notification function as fallback
    local function basicNotification(text)
        print("[ZusumeHub] " .. text)
        pcall(function()
            StarterGui:SetCore("SendNotification", {
                Title = "ZusumeHub Error",
                Text = text,
                Duration = 5
            })
        end)
    end
    
    basicNotification("Failed to load UI library. Check internet connection.")
    return
end

-- Ensure ContentFrame exists
local ContentFrame = TeleportGUILibrary.ContentFrame
if not ContentFrame then
    TeleportGUILibrary.createNotification("ContentFrame not found in the library. Script cannot proceed.", "error")
    return
end

-- Variables for Autofarming and Combat Features
local wallhackActive = false
local wallhackConnection = nil

local isAutoFloorActive = false
local currentTargetMob2 = nil
local autoFloorLoop = nil
local lastNotificationTime2 = 0
local teleportedToCurrentMob2 = false
local sizeModified2 = false
local autoHarvestRunning = false
local autoHarvestConnection = nil
local autoFloorCheckbox = nil
local isDeathProcessing = false

local isAutofarming = false
local currentTargetMob = nil
local autofarmLoop = nil
local lastNotificationTime = 0
local teleportedToCurrentMob = false
local sizeModified = false

local isSuppliesAutofarming = false
local suppliesAutofarmLoop = nil

local targetFoundTime = 0
local targetDelaySeconds = 0.5

local isAutoStoryActive = false
local autoStoryConnection = nil

local walkSpeedValue = 16
local walkSpeedInput = nil

local jumpHeightValue = 7.2
local jumpHeightInput = nil

local flyingPlatformValue = 2
local flyingPlatformInput = nil
local flyingPlatformAdjusting = false

-- Utility Functions with Error Handling
-- Function to simulate a key press safely
local function pressKey(keyCode)
    pcall(function()
        VirtualInputManager:SendKeyEvent(true, keyCode, false, game)
        wait(0.1)
        VirtualInputManager:SendKeyEvent(false, keyCode, false, game)
    end)
end

-- Safer function to find drop parts with proximity prompts
local function findDropPartsWithPrompts()
    local dropParts = {}
    local success, errorMsg = pcall(function()
        local dropFolder = workspace:FindFirstChild("Drop")
        if dropFolder and dropFolder:IsA("Folder") then
            for _, child in pairs(dropFolder:GetChildren()) do
                if child:IsA("BasePart") and child.Name ~= "Drop" then
                    local proximityPrompt = child:FindFirstChild("ProximityPrompt")
                    if proximityPrompt then
                        table.insert(dropParts, child)
                    end
                end
            end
        end
    end)
    
    if not success then
        warn("Error finding drop parts: " .. errorMsg)
    end
    
    return dropParts
end

-- Function to fire a proximity prompt with safety checks
local function enhancedFireProximityPrompt(prompt, attempts)
    if not prompt then return end
    
    attempts = attempts or 3
    local promptPart = prompt.Parent
    local character = LocalPlayer.Character
    
    if not character then
        TeleportGUILibrary.createNotification("Character not found", "error")
        return
    end
    
    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    if not humanoidRootPart or not promptPart then
        TeleportGUILibrary.createNotification("HumanoidRootPart or prompt part missing", "error")
        return
    end
    
    -- Safe teleport
    pcall(function()
        humanoidRootPart.CFrame = CFrame.new(promptPart.Position + Vector3.new(0, 1, 0))
    end)
    
    wait(0.5)
    
    -- Check if fireproximityprompt exists
    if not fireproximityprompt then
        TeleportGUILibrary.createNotification("fireproximityprompt function not available", "error")
        return
    end
    
    for i = 1, attempts do
        pcall(function()
            fireproximityprompt(prompt)
            TeleportGUILibrary.createNotification("Firing prompt attempt " .. i, "info")
        end)
        wait(0.7)
    end
    wait(1)
end

-- Function to teleport to a part and interact with its proximity prompt
local function teleportAndStickToPrompt(part)
    if not part then return false end
    
    local character = LocalPlayer.Character
    if not character then
        return false
    end
    
    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    if not humanoidRootPart then
        return false
    end
    
    local proximityPrompt = part:FindFirstChild("ProximityPrompt")
    if not proximityPrompt then
        TeleportGUILibrary.createNotification("No proximity prompt found on part", "warning")
        return false
    end
    
    -- Safe teleport
    pcall(function()
        humanoidRootPart.CFrame = CFrame.new(part.Position + Vector3.new(0, 2, 0))
    end)
    
    wait(0.5)
    enhancedFireProximityPrompt(proximityPrompt)
    return true
end

-- Function to find the nearest mob within a radius
local function findNearestMob(radius, maxDistance)
    local character = LocalPlayer.Character
    local humanoidRootPart = character and character:FindFirstChild("HumanoidRootPart")
    if not humanoidRootPart then
        return nil
    end
    
    local nearestMob = nil
    local shortestDistance = maxDistance or radius
    
    -- Protected call to find mobs
    local success, result = pcall(function()
        local unitsFolder = workspace:FindFirstChild("Units")
        if unitsFolder then
            for _, unit in pairs(unitsFolder:GetChildren()) do
                local model = unit:FindFirstChild("MODEL")
                if model then
                    local mobRootPart = model:FindFirstChild("HumanoidRootPart")
                    if mobRootPart then
                        local hp = unit:GetAttribute("HP")
                        if hp and hp > 0 then
                            local distance = (humanoidRootPart.Position - mobRootPart.Position).Magnitude
                            if distance < shortestDistance then
                                shortestDistance = distance
                                nearestMob = unit
                            end
                        end
                    end
                end
            end
        end
        return nearestMob
    end)
    
    if success then
        return result
    else
        warn("Error finding nearest mob: " .. tostring(result))
        return nil
    end
end

-- Function to incrementally increase the size of the HumanoidRootPart safely
local function incrementHumanoidRootPartSize(humanoidRootPart, maxHeight)
    if not humanoidRootPart then return end
    
    local originalSize = Vector3.new(2, 2, 1)
    
    pcall(function()
        humanoidRootPart.Size = Vector3.new(originalSize.X, 2, originalSize.Z)
    end)
    
    spawn(function()
        for i = 3, maxHeight do
            wait(0.3)
            if humanoidRootPart and humanoidRootPart.Parent then
                pcall(function()
                    humanoidRootPart.Size = Vector3.new(originalSize.X, i, originalSize.Z)
                end)
            else
                break
            end
        end
    end)
end

-- Function to incrementally adjust HumanoidRootPart.Size.Y for Flying Platform
local function adjustFlyingPlatformHeight(humanoidRootPart, targetHeight)
    if not humanoidRootPart or flyingPlatformAdjusting then
        return
    end
    
    flyingPlatformAdjusting = true
    
    pcall(function()
        local originalSize = humanoidRootPart.Size
        local currentY = originalSize.Y
        local step = currentY < targetHeight and 1 or -1
        
        while (step > 0 and currentY < targetHeight) or (step < 0 and currentY > targetHeight) do
            currentY = currentY + step
            humanoidRootPart.Size = Vector3.new(originalSize.X, currentY, originalSize.Z)
            wait(0.2)
            if not humanoidRootPart or not humanoidRootPart.Parent then
                break
            end
        end
    end)
    
    flyingPlatformAdjusting = false
end

-- Function to reset the HumanoidRootPart size to default
local function resetHumanoidRootPartSize()
    pcall(function()
        local character = LocalPlayer.Character
        if character then
            local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
            if humanoidRootPart then
                humanoidRootPart.Size = Vector3.new(2, 2, 1)
                flyingPlatformValue = 2
                if flyingPlatformInput then
                    flyingPlatformInput.setValue(2)
                end
            end
        end
    end)
end

-- Function to enable wallhack (noclip)
local function enableWallhack()
    if wallhackConnection then
        return
    end
    
    wallhackActive = true
    
    -- Protected connection setup
    pcall(function()
        wallhackConnection = RunService.Stepped:Connect(function()
            if not wallhackActive then
                if wallhackConnection then
                    wallhackConnection:Disconnect()
                    wallhackConnection = nil
                end
                return
            end
            
            local character = LocalPlayer.Character
            if character then
                for _, part in pairs(character:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = false
                    end
                end
            end
        end)
    end)
    
    TeleportGUILibrary.createNotification("Wallhack enabled", "success")
end

-- Function to disable wallhack (restore collision)
local function disableWallhack()
    wallhackActive = false
    
    if wallhackConnection then
        pcall(function() 
            wallhackConnection:Disconnect() 
        end)
        wallhackConnection = nil
    end
    
    pcall(function()
        local character = LocalPlayer.Character
        if character then
            for _, part in pairs(character:GetDescendants()) do
                if part:IsA("BasePart") and part.Name ~= "HumanoidRootPart" then
                    part.CanCollide = true
                end
            end
        end
    end)
    
    TeleportGUILibrary.createNotification("Wallhack disabled", "warning")
end

-- Function to tween the player to a position safely
local function tweenToPosition(position, duration)
    local character = LocalPlayer.Character
    if not character then
        return nil
    end
    
    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    if not humanoidRootPart then
        return nil
    end
    
    local tween = nil
    pcall(function()
        local tweenInfo = TweenInfo.new(duration or 1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
        tween = TweenService:Create(humanoidRootPart, tweenInfo, {CFrame = CFrame.new(position)})
        tween:Play()
    end)
    
    return tween
end

-- Function to start the DrugStore dungeon (initial teleport)
local function startDrugStoreDungeonFirst()
    pcall(function()
        local args = {
            [1] = {
                CF = CFrame.new(2177.754638671875, -196.92501831054688, 196.78997802734375) * CFrame.Angles(0, 0, 0),
                Type = "SyncCF"
            }
        }
        game:GetService("ReplicatedStorage").Remote.CharacterRE:FireServer(unpack(args))
        TeleportGUILibrary.createNotification("Preparing DrugStore dungeon", "info")
    end)
end

-- Function to start the DrugStore dungeon
local function startDrugStoreDungeon()
    pcall(function()
        local args = {
            [1] = {
                ID = "T1DrugStore",
                Type = "Start",
                Diff = 3
            }
        }
        game:GetService("ReplicatedStorage").Remote.DungeonRE:FireServer(unpack(args))
        TeleportGUILibrary.createNotification("Started DrugStore dungeon", "info")
    end)
end

-- Function to start autofarming supplies
local function startSuppliesAutofarm()
    if suppliesAutofarmLoop then
        return
    end
    
    isSuppliesAutofarming = true
    enableWallhack()
    
    pcall(function()
        startDrugStoreDungeonFirst()
        wait(2)
        startDrugStoreDungeon()
    end)
    
    suppliesAutofarmLoop = coroutine.create(function()
        while isSuppliesAutofarming do
            local success, result = pcall(function()
                local dropParts = findDropPartsWithPrompts()
                
                if #dropParts > 0 then
                    TeleportGUILibrary.createNotification("Found " .. #dropParts .. " supply items to collect", "info")
                    
                    for i, part in ipairs(dropParts) do
                        if not isSuppliesAutofarming then
                            break
                        end
                        
                        TeleportGUILibrary.createNotification("Collecting supply: " .. part.Name, "info")
                        local interactSuccess = teleportAndStickToPrompt(part)
                        
                        TeleportGUILibrary.createNotification(
                            interactSuccess and "Successfully interacted with: " .. part.Name or "Failed to interact with: " .. part.Name,
                            interactSuccess and "success" or "error"
                        )
                        
                        wait(1)
                    end
                    
                    TeleportGUILibrary.createNotification("Completed supply collection cycle", "success")
                else
                    TeleportGUILibrary.createNotification("No supply items found to collect", "warning")
                    startDrugStoreDungeon()
                end
            end)
            
            if not success then
                TeleportGUILibrary.createNotification("Error in supplies autofarm: " .. tostring(result), "error")
            end
            
            wait(3)
        end
    end)
    
    coroutine.resume(suppliesAutofarmLoop)
end

-- Function to stop autofarming supplies
local function stopSuppliesAutofarm()
    isSuppliesAutofarming = false
    suppliesAutofarmLoop = nil
    disableWallhack()
    TeleportGUILibrary.createNotification("Autofarm Supplies stopped", "warning")
end

-- Function to start autofarming nearest mobs
local function startAutofarm()
    if autofarmLoop then
        return
    end
    
    isAutofarming = true
    
    -- Protected setup
    pcall(function()
        local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
        local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
        
        autofarmLoop = RunService.Heartbeat:Connect(function()
            if not isAutofarming then
                if autofarmLoop then
                    autofarmLoop:Disconnect()
                    autofarmLoop = nil
                end
                resetHumanoidRootPartSize()
                return
            end
            
            if currentTargetMob then
                local model = currentTargetMob:FindFirstChild("MODEL")
                if not model or not model:FindFirstChild("HumanoidRootPart") then
                    currentTargetMob = nil
                    teleportedToCurrentMob = false
                    TeleportGUILibrary.createNotification("Target defeated, finding new target", "info")
                    return
                end
                
                local hp = currentTargetMob:GetAttribute("HP")
                if not hp or hp < 1 then
                    currentTargetMob = nil
                    teleportedToCurrentMob = false
                    TeleportGUILibrary.createNotification("Target defeated, finding new target", "info")
                    return
                end
                
                if not teleportedToCurrentMob then
                    pcall(function()
                        local mobPosition = currentTargetMob.MODEL.HumanoidRootPart.Position
                        humanoidRootPart.CFrame = CFrame.new(Vector3.new(mobPosition.X, mobPosition.Y + 5, mobPosition.Z))
                        teleportedToCurrentMob = true
                        
                        if sizeModified and humanoidRootPart.Size.Y < 10 then
                            incrementHumanoidRootPartSize(humanoidRootPart, 10)
                        end
                    end)
                    return
                end
            else
                local nearestMob = findNearestMob(15, 15)
                if nearestMob then
                    currentTargetMob = nearestMob
                    teleportedToCurrentMob = false
                    
                    pcall(function()
                        if not sizeModified then
                            incrementHumanoidRootPartSize(humanoidRootPart, 10)
                            sizeModified = true
                        end
                    end)
                    
                    TeleportGUILibrary.createNotification("Found new target: " .. nearestMob.Name, "info")
                else
                    local currentTime = os.time()
                    if currentTime - lastNotificationTime >= 5 then
                        TeleportGUILibrary.createNotification("No targets found nearby", "warning")
                        lastNotificationTime = currentTime
                    end
                end
            end
        end)
    end)
end

-- Function to stop autofarming nearest mobs
local function stopAutofarm()
    isAutofarming = false
    currentTargetMob = nil
    teleportedToCurrentMob = false
    sizeModified = false
    
    if autofarmLoop then
        pcall(function() 
            autofarmLoop:Disconnect() 
        end)
        autofarmLoop = nil
    end
    
    resetHumanoidRootPartSize()
    TeleportGUILibrary.createNotification("Autofarm stopped", "warning")
end

-- Function to start Auto Floor
local function startAutoFloor()
    if autoFloorLoop then
        return
    end
    
    isAutoFloorActive = true
    autoHarvestRunning = true
    
    -- Activate InfExplore safely
    pcall(function()
        local args = {
            [1] = {
                T = "InfExplore"
            }
        }
        game:GetService("ReplicatedStorage").Remote.ExploreRE:FireServer(unpack(args))
        TeleportGUILibrary.createNotification("Activated InfExplore", "info")
    end)
    
    wait(2)
    
    -- Get character safely
    local character
    pcall(function()
        character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    end)
    
    if not character then
        TeleportGUILibrary.createNotification("Character not found. Auto Floor cannot start.", "error")
        isAutoFloorActive = false
        return
    end
    
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    if not humanoidRootPart then
        TeleportGUILibrary.createNotification("HumanoidRootPart not found. Auto Floor cannot start.", "error")
        isAutoFloorActive = false
        return
    end
    
    local lastTargetTime = os.time()
    
    -- Notify user that Auto Harvest is activated with Auto Floor
    pcall(function()
        StarterGui:SetCore("SendNotification", {
            Title = "Auto Harvest",
            Text = "Auto Harvest activated with Auto Floor!",
            Duration = 5
        })
    end)
    
    -- Start auto harvest loop safely
    pcall(function()
        autoHarvestConnection = RunService.Heartbeat:Connect(function()
            if not autoHarvestRunning or not isAutoFloorActive or isDeathProcessing then
                if autoHarvestConnection then
                    autoHarvestConnection:Disconnect()
                    autoHarvestConnection = nil
                end
                return
            end
            
            local hasTarget = false
            pcall(function()
                hasTarget = currentTargetMob2 and currentTargetMob2:FindFirstChild("MODEL") and currentTargetMob2.MODEL:FindFirstChild("HumanoidRootPart")
                if hasTarget then
                    local hp = currentTargetMob2:GetAttribute("HP")
                    hasTarget = hp and hp > 0
                end
            end)
            
            if hasTarget then
                pressKey(Enum.KeyCode.F)
                wait(0.2)
            else
                pressKey(Enum.KeyCode.F)
                wait(1)
                pressKey(Enum.KeyCode.E)
                wait(2)
            end
        end)
    end)
    
    -- Start auto floor loop safely
    pcall(function()
        autoFloorLoop = RunService.Heartbeat:Connect(function()
            if not isAutoFloorActive then
                if autoFloorLoop then
                    autoFloorLoop:Disconnect()
                    autoFloorLoop = nil
                end
                
                if autoHarvestConnection then
                    autoHarvestConnection:Disconnect()
                    autoHarvestConnection = nil
                    autoHarvestRunning = false
                    
                    pcall(function()
                        StarterGui:SetCore("SendNotification", {
                            Title = "Auto Harvest",
                            Text = "Auto Harvest stopped with Auto Floor!",
                            Duration = 5
                        })
                    end)
                end
                
                resetHumanoidRootPartSize()
                return
            end
            
            if currentTargetMob2 then
                lastTargetTime = os.time()
                
                local valid = false
                pcall(function()
                    valid = currentTargetMob2:FindFirstChild("MODEL") and currentTargetMob2.MODEL:FindFirstChild("HumanoidRootPart")
                    local hp = currentTargetMob2:GetAttribute("HP")
                    valid = valid and hp and hp > 0
                end)
                
                if not valid then
                    currentTargetMob2 = nil
                    teleportedToCurrentMob2 = false
                    TeleportGUILibrary.createNotification("Target defeated, finding new target", "info")
                    return
                end
                
                local currentTime = os.time()
                local timeElapsedSinceFound = currentTime - targetFoundTime
                
                if not teleportedToCurrentMob2 and timeElapsedSinceFound >= targetDelaySeconds then
                    pcall(function()
                        local mobPosition = currentTargetMob2.MODEL.HumanoidRootPart.Position
                        humanoidRootPart.CFrame = CFrame.new(Vector3.new(mobPosition.X, mobPosition.Y + 20, mobPosition.Z))
                        teleportedToCurrentMob2 = true
                        
                        if sizeModified2 and humanoidRootPart.Size.Y < 20 then
                            incrementHumanoidRootPartSize(humanoidRootPart, 20)
                        end
                    end)
                    
                    TeleportGUILibrary.createNotification("Teleported to target after delay", "success")
                    return
                elseif not teleportedToCurrentMob2 and timeElapsedSinceFound < targetDelaySeconds then
                    local remainingTime = targetDelaySeconds - timeElapsedSinceFound
                    if math.floor(remainingTime) ~= math.floor(remainingTime + 0.1) then
                        TeleportGUILibrary.createNotification("Waiting " .. math.ceil(remainingTime) .. " seconds before teleporting", "info")
                    end
                    return
                end
            else
                local nearestMob = findNearestMob(80, 80)
                if nearestMob then
                    currentTargetMob2 = nearestMob
                    teleportedToCurrentMob2 = false
                    lastTargetTime = os.time()
                    targetFoundTime = os.time()
                    
                    pcall(function()
                        if not sizeModified2 then
                            incrementHumanoidRootPartSize(humanoidRootPart, 20)
                            sizeModified2 = true
                        end
                    end)
                    
                    TeleportGUILibrary.createNotification(
                        "Found new target: " .. nearestMob.Name .. ". Waiting " .. targetDelaySeconds .. " seconds before teleporting",
                        "info"
                    )
                else
                    local currentTime = os.time()
                    local timeWithoutTarget = currentTime - lastTargetTime
                    
                    if timeWithoutTarget >= 3 and sizeModified2 then
                        resetHumanoidRootPartSize()
                        sizeModified2 = false
                        TeleportGUILibrary.createNotification("Reset character size - no targets found for 3 seconds", "warning")
                    end
                    
                    if currentTime - lastNotificationTime2 >= 5 then
                        TeleportGUILibrary.createNotification("No targets found nearby", "warning")
                        lastNotificationTime2 = currentTime
                    end
                end
            end
        end)
    end)
end

-- Function to stop Auto Floor
local function stopAutoFloor()
    isAutoFloorActive = false
    currentTargetMob2 = nil
    teleportedToCurrentMob2 = false
    sizeModified2 = false
    
    if autoFloorLoop then
        pcall(function() 
            autoFloorLoop:Disconnect() 
        end)
        autoFloorLoop = nil
    end
    
    if autoHarvestConnection then
        pcall(function() 
            autoHarvestConnection:Disconnect() 
        end)
        autoHarvestConnection = nil
        autoHarvestRunning = false
        
        pcall(function()
            StarterGui:SetCore("SendNotification", {
                Title = "Auto Harvest",
                Text = "Auto Harvest stopped with Auto Floor!",
                Duration = 5
            })
        end)
    end
    
    resetHumanoidRootPartSize()
    
    if autoFloorCheckbox then
        pcall(function() 
            autoFloorCheckbox:SetState(false) 
        end)
    end
    
    TeleportGUILibrary.createNotification("Auto Floor stopped", "warning")
end

-- Function to start Auto Story
local function startAutoStory()
    if autoStoryConnection then
        return
    end
    
    isAutoStoryActive = true
    
    pcall(function()
        autoStoryConnection = RunService.Heartbeat:Connect(function()
            if not isAutoStoryActive then
                if autoStoryConnection then
                    autoStoryConnection:Disconnect()
                    autoStoryConnection = nil
                end
                return
            end
            
            pressKey(Enum.KeyCode.F)
            pressKey(Enum.KeyCode.E)
            wait(0.5)
            pressKey(Enum.KeyCode.E)
            wait(0.5)
        end)
    end)
end

-- Function to stop Auto Story
local function stopAutoStory()
    isAutoStoryActive = false
    
    if autoStoryConnection then
        pcall(function() 
            autoStoryConnection:Disconnect() 
        end)
        autoStoryConnection = nil
    end
end

-- Function to apply WalkSpeed with limits and error handling
local function applyWalkSpeed(speed)
    pcall(function()
        local character = LocalPlayer.Character
        if character then
            local humanoid = character:FindFirstChild("Humanoid")
            if humanoid then
                -- Apply limits: 0 to 999
                if speed < 0 then
                    speed = 0
                    TeleportGUILibrary.createNotification("WalkSpeed cannot be less than 0!", "error")
                elseif speed > 999 then
                    speed = 999
                    TeleportGUILibrary.createNotification("WalkSpeed cannot be more than 999!", "error")
                end
                
                humanoid.WalkSpeed = speed
                walkSpeedValue = speed
                
                if walkSpeedInput then
                    walkSpeedInput.setValue(speed)
                end
                
                TeleportGUILibrary.createNotification("WalkSpeed set to " .. speed, "success")
            end
        end
    end)
end

-- Function to apply JumpHeight with limits and error handling
-- Function to apply JumpHeight with limits and error handling
local function applyJumpHeight(height)
    pcall(function()
        local character = LocalPlayer.Character
        if character then
            local humanoid = character:FindFirstChild("Humanoid")
            if humanoid then
                -- Apply limits: 0 to 250
                if height < 0 then
                    height = 0
                    TeleportGUILibrary.createNotification("JumpHeight cannot be less than 0!", "error")
                elseif height > 250 then
                    height = 250
                    TeleportGUILibrary.createNotification("JumpHeight cannot be more than 250!", "error")
                end
                
                humanoid.JumpPower = height
                jumpHeightValue = height
                
                if jumpHeightInput then
                    jumpHeightInput.setValue(height)
                end
                
                TeleportGUILibrary.createNotification("JumpHeight set to " .. height, "success")
            end
        end
    end)
end

-- Function to apply Flying Platform height
local function applyFlyingPlatform(height)
    pcall(function()
        local character = LocalPlayer.Character
        if character then
            local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
            if humanoidRootPart then
                -- Apply limits: 2 to 50
                if height < 2 then
                    height = 2
                    TeleportGUILibrary.createNotification("Platform height cannot be less than 2!", "error")
                elseif height > 50 then
                    height = 50
                    TeleportGUILibrary.createNotification("Platform height cannot be more than 50!", "error")
                end
                
                flyingPlatformValue = height
                
                if flyingPlatformInput then
                    flyingPlatformInput.setValue(height)
                end
                
                adjustFlyingPlatformHeight(humanoidRootPart, height)
                TeleportGUILibrary.createNotification("Flying Platform height set to " .. height, "success")
            end
        end
    end)
end

-- Setup death handling to avoid issues with features when character dies
pcall(function()
    LocalPlayer.CharacterAdded:Connect(function(character)
        isDeathProcessing = false
        
        character:WaitForChild("Humanoid").Died:Connect(function()
            isDeathProcessing = true
            
            -- Reset all active features
            if isAutofarming then
                stopAutofarm()
            end
            
            if isAutoFloorActive then
                stopAutoFloor()
            end
            
            if isSuppliesAutofarming then
                stopSuppliesAutofarm()
            end
            
            if isAutoStoryActive then
                stopAutoStory()
            end
            
            if wallhackActive then
                disableWallhack()
            end
            
            TeleportGUILibrary.createNotification("Character died - all features have been reset", "warning")
            wait(3)
            isDeathProcessing = false
        end)
    end)
end)

-- Initialize the GUI
-- Organize everything into tabs
local mainTab = TeleportGUILibrary.createTab("Main")
local autofarmTab = TeleportGUILibrary.createTab("Autofarm")
local combatTab = TeleportGUILibrary.createTab("Combat")
local teleportTab = TeleportGUILibrary.createTab("Teleport")
local miscTab = TeleportGUILibrary.createTab("Misc")

-- Main Tab Content
mainTab:addLabel("Welcome to ZusumeHub v1.0.1")
mainTab:addLabel("Fixed UI and Script Issues")
mainTab:addSeparator()
mainTab:addLabel("Main Features:")
mainTab:addLabel("• Autofarm - Multiple autofarm options")
mainTab:addLabel("• Combat - Enhanced combat abilities")
mainTab:addLabel("• Teleport - Quick location teleports")
mainTab:addLabel("• Misc - Utility features")
mainTab:addSeparator()
mainTab:addButton("Destroy GUI", function()
    -- Stop all features
    if isAutofarming then
        stopAutofarm()
    end
    
    if isAutoFloorActive then
        stopAutoFloor()
    end
    
    if isSuppliesAutofarming then
        stopSuppliesAutofarm()
    end
    
    if isAutoStoryActive then
        stopAutoStory()
    end
    
    if wallhackActive then
        disableWallhack()
    end
    
    -- Reset character
    resetHumanoidRootPartSize()
    
    -- Destroy GUI
    TeleportGUILibrary.destroyGUI()
end)

-- Autofarm Tab Content
local autofarmSection = autofarmTab:addSection("Mob Autofarm")
autofarmSection:addToggle("Nearest Mobs Autofarm", false, function(state)
    if state then
        startAutofarm()
    else
        stopAutofarm()
    end
end)

-- Add auto floor with protected creation
pcall(function()
    autoFloorCheckbox = autofarmSection:addToggle("Auto Floor", false, function(state)
        if state then
            startAutoFloor()
        else
            stopAutoFloor()
        end
    end)
end)

autofarmSection:addToggle("Auto Story", false, function(state)
    if state then
        startAutoStory()
    else
        stopAutoStory()
    end
end)

local suppliesSection = autofarmTab:addSection("Supplies Autofarm")
suppliesSection:addToggle("Autofarm Supplies", false, function(state)
    if state then
        startSuppliesAutofarm()
    else
        stopSuppliesAutofarm()
    end
end)

-- Combat Tab Content
local movementSection = combatTab:addSection("Movement Enhancements")
movementSection:addToggle("Wallhack (Noclip)", false, function(state)
    if state then
        enableWallhack()
    else
        disableWallhack()
    end
end)

-- Safe creation of walkspeed slider
pcall(function()
    walkSpeedInput = movementSection:addSlider("WalkSpeed", 16, 0, 200, function(value)
        applyWalkSpeed(value)
    end)
end)

-- Safe creation of jump height slider
pcall(function()
    jumpHeightInput = movementSection:addSlider("Jump Height", 7.2, 0, 100, function(value)
        applyJumpHeight(value)
    end)
end)

-- Safe creation of flying platform slider
pcall(function()
    flyingPlatformInput = movementSection:addSlider("Flying Platform", 2, 2, 50, function(value)
        applyFlyingPlatform(value)
    end)
end)

-- Teleport Tab Content
local teleportSection = teleportTab:addSection("Key Locations")

-- Add teleport buttons with error handling
teleportSection:addButton("Spawn", function()
    local tween = tweenToPosition(Vector3.new(-24, 2.5, -102), 3)
    if tween then
        TeleportGUILibrary.createNotification("Teleporting to Spawn", "info")
    else
        TeleportGUILibrary.createNotification("Failed to teleport to Spawn", "error")
    end
end)

teleportSection:addButton("Guild", function()
    local tween = tweenToPosition(Vector3.new(248, 6, -65), 3)
    if tween then
        TeleportGUILibrary.createNotification("Teleporting to Guild", "info")
    else
        TeleportGUILibrary.createNotification("Failed to teleport to Guild", "error")
    end
end)

teleportSection:addButton("Training Area", function()
    local tween = tweenToPosition(Vector3.new(42, 3, -30), 3)
    if tween then
        TeleportGUILibrary.createNotification("Teleporting to Training Area", "info")
    else
        TeleportGUILibrary.createNotification("Failed to teleport to Training Area", "error")
    end
end)

teleportSection:addButton("Blacksmith", function()
    local tween = tweenToPosition(Vector3.new(91, 2.5, -81), 3)
    if tween then
        TeleportGUILibrary.createNotification("Teleporting to Blacksmith", "info")
    else
        TeleportGUILibrary.createNotification("Failed to teleport to Blacksmith", "error")
    end
end)

-- Misc Tab Content
local utilitySection = miscTab:addSection("Utility")
utilitySection:addButton("Reset Character", function()
    -- Reset all active features
    if isAutofarming then
        stopAutofarm()
    end
    
    if isAutoFloorActive then
        stopAutoFloor()
    end
    
    if isSuppliesAutofarming then
        stopSuppliesAutofarm()
    end
    
    if isAutoStoryActive then
        stopAutoStory()
    end
    
    if wallhackActive then
        disableWallhack()
    end
    
    -- Reset character size
    resetHumanoidRootPartSize()
    
    -- Reset character using built-in reset
    pcall(function()
        LocalPlayer.Character:BreakJoints()
    end)
    
    TeleportGUILibrary.createNotification("Character reset", "info")
end)

utilitySection:addButton("Reset WalkSpeed", function()
    applyWalkSpeed(16)
end)

utilitySection:addButton("Reset Jump Height", function()
    applyJumpHeight(7.2)
end)

utilitySection:addButton("Reset Flying Platform", function()
    applyFlyingPlatform(2)
end)

local creditsSection = miscTab:addSection("Credits")
creditsSection:addLabel("ZusumeHub v1.0.1 (Fixed)")
creditsSection:addLabel("Created by Zysume")
creditsSection:addLabel("Last Updated: April 2025")

-- Initialize with correct speeds
pcall(function()
    -- Setup initial values
    local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    local humanoid = character:WaitForChild("Humanoid")
    
    -- Apply initial settings
    applyWalkSpeed(16)
    applyJumpHeight(7.2)
    
    -- Send welcome notification
    TeleportGUILibrary.createNotification("ZusumeHub v1.0.1 loaded successfully!", "success")
    TeleportGUILibrary.createNotification("Fixed library loading and UI issues", "info")
end)

-- Error handling for the entire script
pcall(function()
    -- Additional cleanup on script end
    game:GetService("Players").PlayerRemoving:Connect(function(player)
        if player == LocalPlayer then
            -- Clean up when player leaves
            if isAutofarming then
                stopAutofarm()
            end
            
            if isAutoFloorActive then
                stopAutoFloor()
            end
            
            if isSuppliesAutofarming then
                stopSuppliesAutofarm()
            end
            
            if isAutoStoryActive then
                stopAutoStory()
            end
            
            if wallhackActive then
                disableWallhack()
            end
        end
    end)
end)

-- End of script