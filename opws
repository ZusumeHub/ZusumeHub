-- ZusumeHub Script for Roblox
-- Original Author: Zysume
-- Version: 1.0
-- Last Updated: April 2025
-- Description: A comprehensive script for autofarming, teleportation, and combat enhancements in Roblox games.

-- Services
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local VirtualInputManager = game:GetService("VirtualInputManager")
local StarterGui = game:GetService("StarterGui")

-- Fetch and Load the Library
local libraryUrl = "https://raw.githubusercontent.com/ZusumeHub/ZusumeHub/refs/heads/main/LibraryNewUI"
local success, libraryCode = pcall(function()
    return game:HttpGet(libraryUrl)
end)

if not success then
    warn("Failed to fetch the library: " .. tostring(libraryCode))
    return
end

local TeleportGUILibrary
success, TeleportGUILibrary = pcall(function()
    return loadstring(libraryCode)()
end)

if not success or not TeleportGUILibrary then
    warn("Failed to load the library: " .. tostring(TeleportGUILibrary))
    return
end

local ContentFrame = TeleportGUILibrary.ContentFrame
if not ContentFrame then
    warn("ContentFrame not found in the library")
    return
end

-- Variables for Autofarming and Combat Features
local wallhackActive = false
local wallhackConnection = nil

local isAutoFloorActive = false
local currentTargetMob2 = nil
local autoFloorLoop = nil
local lastNotificationTime2 = 0
local teleportedToCurrentMob2 = false
local sizeModified2 = false
local autoHarvestRunning = false
local autoHarvestConnection = nil
local autoFloorCheckbox = nil
local isDeathProcessing = false

local isAutofarming = false
local currentTargetMob = nil
local autofarmLoop = nil
local lastNotificationTime = 0
local teleportedToCurrentMob = false
local sizeModified = false

local isSuppliesAutofarming = false
local suppliesAutofarmLoop = nil

local targetFoundTime = 0
local targetDelaySeconds = 0.5

local isAutoStoryActive = false
local autoStoryConnection = nil

local walkSpeedValue = 16
local walkSpeedInput = nil

local jumpHeightValue = 7.2 -- Default JumpHeight (Roblox default is approximately 7.2 studs)
local jumpHeightInput = nil

local flyingPlatformValue = 2 -- Default HumanoidRootPart.Size.Y
local flyingPlatformInput = nil
local flyingPlatformAdjusting = false

-- Utility Functions
-- Function to simulate a key press
local function pressKey(keyCode)
    VirtualInputManager:SendKeyEvent(true, keyCode, false, game)
    wait(0.1)
    VirtualInputManager:SendKeyEvent(false, keyCode, false, game)
end

-- Function to find drop parts with proximity prompts
local function findDropPartsWithPrompts()
    local dropParts = {}
    local dropFolder = workspace:FindFirstChild("Drop")
    if dropFolder and dropFolder:IsA("Folder") then
        for _, child in pairs(dropFolder:GetChildren()) do
            if child:IsA("BasePart") and child.Name ~= "Drop" then
                local proximityPrompt = child:FindFirstChild("ProximityPrompt")
                if proximityPrompt then
                    table.insert(dropParts, child)
                end
            end
        end
    end
    return dropParts
end

-- Function to fire a proximity prompt with retry logic
local function enhancedFireProximityPrompt(prompt, attempts)
    attempts = attempts or 3
    local promptPart = prompt.Parent
    local character = LocalPlayer.Character
    local humanoidRootPart = character and character:FindFirstChild("HumanoidRootPart")
    if not humanoidRootPart or not promptPart then
        return
    end
    humanoidRootPart.CFrame = CFrame.new(promptPart.Position + Vector3.new(0, 1, 0))
    wait(0.5)
    for i = 1, attempts do
        fireproximityprompt(prompt)
        TeleportGUILibrary.createNotification("Firing prompt attempt " .. i, "info")
        wait(0.7)
    end
    wait(1)
end

-- Function to teleport to a part and interact with its proximity prompt
local function teleportAndStickToPrompt(part)
    local character = LocalPlayer.Character
    if not character then
        return false
    end
    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    if not humanoidRootPart then
        return false
    end
    local proximityPrompt = part:FindFirstChild("ProximityPrompt")
    if not proximityPrompt then
        return false
    end
    humanoidRootPart.CFrame = CFrame.new(part.Position + Vector3.new(0, 2, 0))
    wait(0.5)
    enhancedFireProximityPrompt(proximityPrompt)
    return true
end

-- Function to find the nearest mob within a radius
local function findNearestMob(radius, maxDistance)
    local character = LocalPlayer.Character
    local humanoidRootPart = character and character:FindFirstChild("HumanoidRootPart")
    if not humanoidRootPart then
        return nil
    end
    local nearestMob = nil
    local shortestDistance = maxDistance or radius
    local unitsFolder = workspace:FindFirstChild("Units")
    if unitsFolder then
        for _, unit in pairs(unitsFolder:GetChildren()) do
            local model = unit:FindFirstChild("MODEL")
            if model then
                local mobRootPart = model:FindFirstChild("HumanoidRootPart")
                if mobRootPart then
                    local hp = unit:GetAttribute("HP")
                    if hp and hp > 0 then
                        local distance = (humanoidRootPart.Position - mobRootPart.Position).Magnitude
                        if distance < shortestDistance then
                            shortestDistance = distance
                            nearestMob = unit
                        end
                    end
                end
            end
        end
    end
    return nearestMob
end

-- Function to incrementally increase the size of the HumanoidRootPart
local function incrementHumanoidRootPartSize(humanoidRootPart, maxHeight)
    local originalSize = Vector3.new(2, 2, 1)
    humanoidRootPart.Size = Vector3.new(originalSize.X, 2, originalSize.Z)
    spawn(function()
        for i = 3, maxHeight do
            wait(0.3)
            if humanoidRootPart and humanoidRootPart.Parent then
                humanoidRootPart.Size = Vector3.new(originalSize.X, i, originalSize.Z)
            else
                break
            end
        end
    end)
end

-- Function to incrementally adjust HumanoidRootPart.Size.Y for Flying Platform
local function adjustFlyingPlatformHeight(humanoidRootPart, targetHeight)
    if flyingPlatformAdjusting then
        return
    end
    flyingPlatformAdjusting = true
    local originalSize = humanoidRootPart.Size
    local currentY = originalSize.Y
    local step = currentY < targetHeight and 1 or -1
    while (step > 0 and currentY < targetHeight) or (step < 0 and currentY > targetHeight) do
        currentY = currentY + step
        humanoidRootPart.Size = Vector3.new(originalSize.X, currentY, originalSize.Z)
        wait(0.2)
        if not humanoidRootPart or not humanoidRootPart.Parent then
            break
        end
    end
    flyingPlatformAdjusting = false
end

-- Function to reset the HumanoidRootPart size to default
local function resetHumanoidRootPartSize()
    local character = LocalPlayer.Character
    if character then
        local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
        if humanoidRootPart then
            humanoidRootPart.Size = Vector3.new(2, 2, 1)
            flyingPlatformValue = 2
            if flyingPlatformInput then
                flyingPlatformInput.setValue(2)
            end
        end
    end
end

-- Function to enable wallhack (noclip)
local function enableWallhack()
    if wallhackConnection then
        return
    end
    wallhackActive = true
    wallhackConnection = RunService.Stepped:Connect(function()
        if not wallhackActive then
            if wallhackConnection then
                wallhackConnection:Disconnect()
                wallhackConnection = nil
            end
            return
        end
        local character = LocalPlayer.Character
        if character then
            for _, part in pairs(character:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CanCollide = false
                end
            end
        end
    end)
    TeleportGUILibrary.createNotification("Wallhack enabled", "success")
end

-- Function to disable wallhack (restore collision)
local function disableWallhack()
    wallhackActive = false
    if wallhackConnection then
        wallhackConnection:Disconnect()
        wallhackConnection = nil
    end
    local character = LocalPlayer.Character
    if character then
        for _, part in pairs(character:GetDescendants()) do
            if part:IsA("BasePart") and part.Name ~= "HumanoidRootPart" then
                part.CanCollide = true
            end
        end
    end
    TeleportGUILibrary.createNotification("Wallhack disabled", "warning")
end

-- Function to tween the player to a position
local function tweenToPosition(position, duration)
    local character = LocalPlayer.Character
    if not character then
        return
    end
    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    if not humanoidRootPart then
        return
    end
    local tweenInfo = TweenInfo.new(duration or 1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
    local tween = TweenService:Create(humanoidRootPart, tweenInfo, {CFrame = CFrame.new(position)})
    tween:Play()
    return tween
end

-- Function to start the DrugStore dungeon (initial teleport)
local function startDrugStoreDungeonFirst()
    local args = {
        [1] = {
            CF = CFrame.new(2177.754638671875, -196.92501831054688, 196.78997802734375) * CFrame.Angles(0, 0, 0),
            Type = "SyncCF"
        }
    }
    game:GetService("ReplicatedStorage").Remote.CharacterRE:FireServer(unpack(args))
    TeleportGUILibrary.createNotification("Preparing DrugStore dungeon", "info")
end

-- Function to start the DrugStore dungeon
local function startDrugStoreDungeon()
    local args = {
        [1] = {
            ID = "T1DrugStore",
            Type = "Start",
            Diff = 3
        }
    }
    game:GetService("ReplicatedStorage").Remote.DungeonRE:FireServer(unpack(args))
    TeleportGUILibrary.createNotification("Started DrugStore dungeon", "info")
end

-- Function to start autofarming supplies
local function startSuppliesAutofarm()
    if suppliesAutofarmLoop then
        return
    end
    isSuppliesAutofarming = true
    enableWallhack()
    startDrugStoreDungeonFirst()
    wait(2)
    startDrugStoreDungeon()
    supplies AutofarmLoop = coroutine.create(function()
        while isSuppliesAutofarming do
            local dropParts = findDropPartsWithPrompts()
            if #dropParts > 0 then
                TeleportGUILibrary.createNotification("Found " .. #dropParts .. " supply items to collect", "info")
                for i, part in ipairs(dropParts) do
                    if not isSuppliesAutofarming then
                        break
                    end
                    TeleportGUILibrary.createNotification("Collecting supply: " .. part.Name, "info")
                    local success = teleportAndStickToPrompt(part)
                    TeleportGUILibrary.createNotification(
                        success and "Successfully interacted with: " .. part.Name or "Failed to interact with: " .. part.Name,
                        success and "success" or "error"
                    )
                    wait(1)
                end
                TeleportGUILibrary.createNotification("Completed supply collection cycle", "success")
            else
                TeleportGUILibrary.createNotification("No supply items found to collect", "warning")
                startDrugStoreDungeon()
            end
            wait(3)
        end
    end)
    coroutine.resume(suppliesAutofarmLoop)
end

-- Function to stop autofarming supplies
local function stopSuppliesAutofarm()
    isSuppliesAutofarming = false
    suppliesAutofarmLoop = nil
    disableWallhack()
    TeleportGUILibrary.createNotification("Autofarm Supplies stopped", "warning")
end

-- Function to start autofarming nearest mobs
local function startAutofarm()
    if autofarmLoop then
        return
    end
    isAutofarming = true
    local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    autofarmLoop = RunService.Heartbeat:Connect(function()
        if not isAutofarming then
            if autofarmLoop then
                autofarmLoop:Disconnect()
                autofarmLoop = nil
            end
            resetHumanoidRootPartSize()
            return
        end
        if currentTargetMob then
            local model = currentTargetMob:FindFirstChild("MODEL")
            if not model or not model:FindFirstChild("HumanoidRootPart") then
                currentTargetMob = nil
                teleportedToCurrentMob = false
                TeleportGUILibrary.createNotification("Target defeated, finding new target", "info")
                return
            end
            local hp = currentTargetMob:GetAttribute("HP")
            if not hp or hp < 1 then
                currentTargetMob = nil
                teleportedToCurrentMob = false
                TeleportGUILibrary.createNotification("Target defeated, finding new target", "info")
                return
            end
            if not teleportedToCurrentMob then
                local mobPosition = currentTargetMob.MODEL.HumanoidRootPart.Position
                humanoidRootPart.CFrame = CFrame.new(Vector3.new(mobPosition.X, mobPosition.Y + 5, mobPosition.Z))
                teleportedToCurrentMob = true
                if not sizeModified then
                    incrementHumanoidRootPartSize(humanoidRootPart, 10)
                    sizeModified = true
                end
                return
            end
        else
            local nearestMob = findNearestMob(15, 15)
            if nearestMob then
                currentTargetMob = nearestMob
                targetFoundTime = tick()
                TeleportGUILibrary.createNotification("New target acquired: " .. nearestMob.Name, "success")
            else
                if tick() - targetFoundTime > targetDelaySeconds then
                    TeleportGUILibrary.createNotification("No targets found within range", "warning")
                    targetFoundTime = tick()
                end
            end
        end
    end)
end

-- Function to stop autofarming nearest mobs
local function stopAutofarm()
    isAutofarming = false
    if autofarmLoop then
        autofarmLoop:Disconnect()
        autofarmLoop = nil
    end
    currentTargetMob = nil
    teleportedToCurrentMob = false
    sizeModified = false
    resetHumanoidRootPartSize()
    TeleportGUILibrary.createNotification("Autofarm Nearest stopped", "warning")
end

-- Function to start auto floor
local function startAutoFloor()
    if autoFloorLoop then
        return
    end
    isAutoFloorActive = true
    local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    autoFloorLoop = RunService.Heartbeat:Connect(function()
        if not isAutoFloorActive then
            if autoFloorLoop then
                autoFloorLoop:Disconnect()
                autoFloorLoop = nil
            end
            resetHumanoidRootPartSize()
            return
        end
        if currentTargetMob2 then
            local model = currentTargetMob2:FindFirstChild("MODEL")
            if not model or not model:FindFirstChild("HumanoidRootPart") then
                currentTargetMob2 = nil
                teleportedToCurrentMob2 = false
                TeleportGUILibrary.createNotification("Target defeated, finding new target", "info")
                return
            end
            local hp = currentTargetMob2:GetAttribute("HP")
            if not hp or hp < 1 then
                currentTargetMob2 = nil
                teleportedToCurrentMob2 = false
                TeleportGUILibrary.createNotification("Target defeated, finding new target", "info")
                return
            end
            if not teleportedToCurrentMob2 then
                local mobPosition = currentTargetMob2.MODEL.HumanoidRootPart.Position
                local tween = tweenToPosition(Vector3.new(mobPosition.X, mobPosition.Y + 15, mobPosition.Z), 0.5)
                tween.Completed:Connect(function()
                    teleportedToCurrentMob2 = true
                    if not sizeModified2 then
                        humanoidRootPart.Size = Vector3.new(2, 10, 1)
                        sizeModified2 = true
                    end
                end)
                return
            end
        else
            local nearestMob = findNearestMob(50, 50)
            if nearestMob then
                currentTargetMob2 = nearestMob
                lastNotificationTime2 = tick()
                TeleportGUILibrary.createNotification("New floor target: " .. nearestMob.Name, "success")
            else
                if tick() - lastNotificationTime2 > 3 then
                    resetHumanoidRootPartSize()
                    sizeModified2 = false
                    TeleportGUILibrary.createNotification("No targets found within 50 studs", "warning")
                    lastNotificationTime2 = tick()
                end
            end
        end
    end)
end

-- Function to stop auto floor
local function stopAutoFloor()
    isAutoFloorActive = false
    if autoFloorLoop then
        autoFloorLoop:Disconnect()
        autoFloorLoop = nil
    end
    currentTargetMob2 = nil
    teleportedToCurrentMob2 = false
    sizeModified2 = false
    resetHumanoidRootPartSize()
    TeleportGUILibrary.createNotification("Auto Floor stopped", "warning")
end

-- Function to start auto story
local function startAutoStory()
    if autoStoryConnection then
        return
    end
    isAutoStoryActive = true
    autoStoryConnection = RunService.Heartbeat:Connect(function()
        if not isAutoStoryActive then
            if autoStoryConnection then
                autoStoryConnection:Disconnect()
                autoStoryConnection = nil
            end
            return
        end
        pressKey(Enum.KeyCode.E)
        wait(0.5)
    end)
    TeleportGUILibrary.createNotification("Auto Story enabled", "success")
end

-- Function to stop auto story
local function stopAutoStory()
    isAutoStoryActive = false
    if autoStoryConnection then
        autoStoryConnection:Disconnect()
        autoStoryConnection = nil
    end
    TeleportGUILibrary.createNotification("Auto Story disabled", "warning")
end

-- Function to handle player death
local function onCharacterDeath()
    if isDeathProcessing then
        return
    end
    isDeathProcessing = true
    if isAutofarming then
        stopAutofarm()
        wait(5)
        startAutofarm()
        TeleportGUILibrary.createNotification("Player died, restarting Autofarm Nearest", "info")
    end
    if isAutoFloorActive then
        stopAutoFloor()
        wait(5)
        startAutoFloor()
        TeleportGUILibrary.createNotification("Player died, restarting Auto Floor", "info")
    end
    if isSuppliesAutofarming then
        stopSuppliesAutofarm()
        wait(5)
        startSuppliesAutofarm()
        TeleportGUILibrary.createNotification("Player died, restarting Autofarm Supplies", "info")
    end
    if isAutoStoryActive then
        stopAutoStory()
        wait(5)
        startAutoStory()
        TeleportGUILibrary.createNotification("Player died, restarting Auto Story", "info")
    end
    isDeathProcessing = false
end

-- Function to handle WalkSpeed changes
local function onWalkSpeedChange(newValue)
    local numValue = tonumber(newValue)
    if numValue and numValue >= 0 and numValue <= 999 then
        walkSpeedValue = numValue
        local humanoid = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid")
        if humanoid then
            humanoid.WalkSpeed = walkSpeedValue
            TeleportGUILibrary.createNotification("WalkSpeed set to " .. walkSpeedValue, "success")
        end
    else
        TeleportGUILibrary.createNotification("Invalid WalkSpeed value (0-999)", "error")
        if walkSpeedInput then
            walkSpeedInput.setValue(walkSpeedValue)
        end
    end
end

-- Function to handle JumpHeight changes
local function onJumpHeightChange(newValue)
    local numValue = tonumber(newValue)
    if numValue and numValue >= 0 and numValue <= 999 then
        jumpHeightValue = numValue
        local humanoid = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid")
        if humanoid then
            humanoid.JumpHeight = jumpHeightValue
            TeleportGUILibrary.createNotification("JumpHeight set to " .. jumpHeightValue, "success")
        end
    else
        TeleportGUILibrary.createNotification("Invalid JumpHeight value (0-999)", "error")
        if jumpHeightInput then
            jumpHeightInput.setValue(jumpHeightValue)
        end
    end
end

-- Function to handle Flying Platform changes
local function onFlyingPlatformChange(newValue)
    local numValue = tonumber(newValue)
    if numValue and numValue >= 0 and numValue <= 999 then
        flyingPlatformValue = numValue
        local character = LocalPlayer.Character
        local humanoidRootPart = character and character:FindFirstChild("HumanoidRootPart")
        if humanoidRootPart then
            adjustFlyingPlatformHeight(humanoidRootPart, flyingPlatformValue)
            TeleportGUILibrary.createNotification("Flying Platform height set to " .. flyingPlatformValue, "success")
        end
    else
        TeleportGUILibrary.createNotification("Invalid Flying Platform value (0-999)", "error")
        if flyingPlatformInput then
            flyingPlatformInput.setValue(flyingPlatformValue)
        end
    end
end

-- Create GUI Sections and Elements
-- MAIN HACKS Section
local teleportSection, teleportSeparator = TeleportGUILibrary.createSection("MAIN HACKS", 10)

-- Auto Story Checkbox
local autoStoryCheckbox, getAutoStoryState = TeleportGUILibrary.createCheckbox(
    "AutoStory",
    "Auto Story",
    UDim2.new(0.05, 0, 0, 45),
    ContentFrame,
    function(state)
        if state then
            startAutoStory()
        else
            stopAutoStory()
        end
    end
)

-- Auto Floor Checkbox
local autoFloorCheckbox, getAutoFloorState = TeleportGUILibrary.createCheckbox(
    "AutoFloor",
    "Auto Floor",
    UDim2.new(0.05, 0, 0, 75),
    ContentFrame,
    function(state)
        if state then
            startAutoFloor()
        else
            stopAutoFloor()
        end
    end
)

-- Autofarm Nearest Checkbox
local autofarmCheckbox, getAutofarmState = TeleportGUILibrary.createCheckbox(
    "AutofarmNearest",
    "Autofarm Nearest",
    UDim2.new(0.05, 0, 0, 105),
    ContentFrame,
    function(state)
        if state then
            startAutofarm()
        else
            stopAutofarm()
        end
    end
)

-- Autofarm Supplies Checkbox
local suppliesCheckbox, getSuppliesState = TeleportGUILibrary.createCheckbox(
    "AutofarmSupplies",
    "Autofarm Supplies [OP]",
    UDim2.new(0.05, 0, 0, 135),
    ContentFrame,
    function(state)
        if state then
            startSuppliesAutofarm()
        else
            stopSuppliesAutofarm()
        end
    end
)

-- PLAYER SETTING Section
local combatSection, combatSeparator = TeleportGUILibrary.createSection("PLAYER SETTING", 175)

-- WalkSpeed Input
local walkSpeedContainer, walkSpeedInput = TeleportGUILibrary.createTextInput(
    "WalkSpeed",
    "WalkSpeed",
    walkSpeedValue,
    UDim2.new(0.05, 0, 0, 210),
    ContentFrame,
    onWalkSpeedChange
)

-- JumpHeight Input
local jumpHeightContainer, jumpHeightInput = TeleportGUILibrary.createTextInput(
    "JumpHeight",
    "JumpHeight",
    jumpHeightValue,
    UDim2.new(0.05, 0, 0, 240),
    ContentFrame,
    onJumpHeightChange
)

-- Flying Platform Input
local flyingPlatformContainer, flyingPlatformInput = TeleportGUILibrary.create poddTextInput(
    "FlyingPlatform",
    "Flying Platform",
    flyingPlatformValue,
    UDim2.new(0.05, 0, 0, 270),
    ContentFrame,
    onFlyingPlatformChange
)

-- Wallhack Checkbox
local wallhackCheckbox, getWallhackState = TeleportGUILibrary.createCheckbox(
    "Wallhack",
    "Wallhack (NoClip)",
    UDim2.new(0.05, 0, 0, 300),
    ContentFrame,
    function(state)
        if state then
            enableWallhack()
        else
            disableWallhack()
        end
    end
)

-- Update Canvas Size
TeleportGUILibrary.updateCanvasSize(340)

-- Connect Character Death Handler
LocalPlayer.CharacterAdded:Connect(function(character)
    local humanoid = character:WaitForChild("Humanoid")
    humanoid.Died:Connect(onCharacterDeath)
end)

if LocalPlayer.Character then
    local humanoid = LocalPlayer.Character:FindFirstChild("Humanoid")
    if humanoid then
        humanoid.Died:Connect(onCharacterDeath)
    end
end

-- Initial Notification
TeleportGUILibrary.createNotification("ZusumeHub loaded successfully!", "success")