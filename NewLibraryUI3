local Players = game:GetService("Players")
local UIS = game:GetService("UserInputService")
local ContextActionService = game:GetService("ContextActionService")
local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")
local TweenService = game:GetService("TweenService")
local CoreGui = game:GetService("CoreGui")

local TeleportGUILibrary = {}

-- Constants for Notification and UI
local FONT = Enum.Font.GothamBold
local CORNER_RADIUS = UDim.new(0, 6)
local COLORS = {
    Frame = Color3.fromRGB(35, 35, 40),
    Text = Color3.fromRGB(255, 255, 255),
    Accent = Color3.fromRGB(114, 137, 218), -- Discord blue
    Success = Color3.fromRGB(87, 242, 135),
    Error = Color3.fromRGB(255, 89, 89),
    Warning = Color3.fromRGB(255, 201, 79),
    Input = Color3.fromRGB(55, 55, 60),
}

-- Create GUI
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "TeleportGUI"
ScreenGui.ResetOnSpawn = false
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
ScreenGui.Parent = PlayerGui

-- Main Frame
local MainFrame = Instance.new("Frame")
MainFrame.Name = "MainFrame"
MainFrame.Size = UDim2.new(0, 250, 0, 300)
MainFrame.Position = UDim2.new(0.5, -125, 0.5, -150)
MainFrame.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
MainFrame.BorderSizePixel = 0
MainFrame.ClipsDescendants = true
MainFrame.Parent = ScreenGui

-- Round the corners
local UICorner = Instance.new("UICorner")
UICorner.CornerRadius = UDim.new(0, 10)
UICorner.Parent = MainFrame

-- Top Bar
local TopBar = Instance.new("Frame")
TopBar.Name = "TopBar"
TopBar.Size = UDim2.new(1, 0, 0, 30)
TopBar.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
TopBar.BorderSizePixel = 0
TopBar.Parent = MainFrame

-- Title (centered properly regardless of other elements)
local Title = Instance.new("TextLabel")
Title.Name = "Title"
Title.Size = UDim2.new(1, 0, 1, 0)  -- Full width of TopBar
Title.BackgroundTransparency = 1
Title.TextColor3 = Color3.fromRGB(255, 255, 255)
Title.TextSize = 16
Title.Font = Enum.Font.GothamBold
Title.Text = "Nothing"
Title.TextXAlignment = Enum.TextXAlignment.Center  -- Center alignment
Title.Parent = TopBar

local MinimizeButton = Instance.new("TextButton")
MinimizeButton.Name = "MinimizeButton"
MinimizeButton.Size = UDim2.new(0, 25, 0, 25)
MinimizeButton.Position = UDim2.new(1, -28, 0, 2)
MinimizeButton.BackgroundColor3 = Color3.fromRGB(55, 55, 60)  -- Updated to match Input color from COLORS
MinimizeButton.BorderSizePixel = 0
MinimizeButton.Font = Enum.Font.GothamBold
MinimizeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
MinimizeButton.Text = "-"
MinimizeButton.TextSize = 16
MinimizeButton.Parent = TopBar
MinimizeButton.ZIndex = 2  -- Higher ZIndex to appear above the title

-- Round the minimize button
local MinimizeCorner = Instance.new("UICorner")
MinimizeCorner.CornerRadius = UDim.new(0, 5)
MinimizeCorner.Parent = MinimizeButton

-- ScrollingFrame to contain all content
local ScrollingFrame = Instance.new("ScrollingFrame")
ScrollingFrame.Name = "ScrollingFrame"
ScrollingFrame.Size = UDim2.new(1, 0, 1, -60)
ScrollingFrame.Position = UDim2.new(0, 0, 0, 30)
ScrollingFrame.BackgroundTransparency = 1
ScrollingFrame.ScrollBarThickness = 6
ScrollingFrame.ScrollBarImageColor3 = Color3.fromRGB(100, 100, 100)
ScrollingFrame.HorizontalScrollBarInset = Enum.ScrollBarInset.None
ScrollingFrame.CanvasSize = UDim2.new(0, 0, 0, 0) -- Will be updated dynamically
ScrollingFrame.Parent = MainFrame

-- Content Frame within the ScrollingFrame
local ContentFrame = Instance.new("Frame")
ContentFrame.Name = "ContentFrame"
ContentFrame.Size = UDim2.new(1, 0, 0, 0) -- Will be updated dynamically
ContentFrame.BackgroundTransparency = 1
ContentFrame.Parent = ScrollingFrame

-- YouTube Label (adjusted with padding)
local YouTubeLabel = Instance.new("TextLabel")
YouTubeLabel.Name = "YouTubeLabel"
YouTubeLabel.Size = UDim2.new(1, 0, 0, 30)
YouTubeLabel.Position = UDim2.new(0, 0, 1, -30)
YouTubeLabel.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
YouTubeLabel.BorderSizePixel = 0
YouTubeLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
YouTubeLabel.TextSize = 16
YouTubeLabel.Font = Enum.Font.GothamBold
YouTubeLabel.Text = "Youtube: Zysume"
YouTubeLabel.TextXAlignment = Enum.TextXAlignment.Left  -- Left alignment
YouTubeLabel.Parent = MainFrame
YouTubeLabel.ZIndex = 2
YouTubeLabel.Visible = true

-- Add padding for YouTube Label
local UIPadding = Instance.new("UIPadding")
UIPadding.PaddingLeft = UDim.new(0, 15)  -- 15 pixel padding from left
UIPadding.Parent = YouTubeLabel

-- Function to create a section (label + separator)
function TeleportGUILibrary.createSection(sectionName, positionY)
    local sectionLabel = Instance.new("TextLabel")
    sectionLabel.Name = sectionName .. "Label"
    sectionLabel.Size = UDim2.new(0.9, 0, 0, 25)
    sectionLabel.Position = UDim2.new(0.05, 0, 0, positionY)
    sectionLabel.BackgroundTransparency = 1
    sectionLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    sectionLabel.TextSize = 16
    sectionLabel.Font = Enum.Font.GothamBold
    sectionLabel.Text = sectionName
    sectionLabel.TextXAlignment = Enum.TextXAlignment.Left
    sectionLabel.Parent = ContentFrame

    local separator = Instance.new("Frame")
    separator.Name = sectionName .. "Separator"
    separator.Size = UDim2.new(0.9, 0, 0, 1)
    separator.Position = UDim2.new(0.05, 0, 0, positionY + 30)
    separator.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
    separator.BorderSizePixel = 0
    separator.Parent = ContentFrame

    return sectionLabel, separator
end

-- Function to create custom checkbox with auto-apply
function TeleportGUILibrary.createCheckbox(name, text, position, parent, onToggle)
    local checkboxContainer = Instance.new("Frame")
    checkboxContainer.Name = name .. "Container"
    checkboxContainer.Size = UDim2.new(0.9, 0, 0, 28)
    checkboxContainer.Position = position
    checkboxContainer.BackgroundTransparency = 1
    checkboxContainer.Parent = parent
    
    local checkboxBG = Instance.new("Frame")
checkboxBG.Name = "Background"
checkboxBG.Size = UDim2.new(0, 20, 0, 20)
checkboxBG.Position = UDim2.new(1, -20, 0.5, -10)
checkboxBG.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
checkboxBG.BorderSizePixel = 0
checkboxBG.Parent = checkboxContainer
    
    local checkboxCorner = Instance.new("UICorner")
    checkboxCorner.CornerRadius = UDim.new(0, 5)
    checkboxCorner.Parent = checkboxBG
    
    local checkmark = Instance.new("Frame")
    checkmark.Name = "Checkmark"
    checkmark.Size = UDim2.new(0, 0, 0, 0)
    checkmark.AnchorPoint = Vector2.new(0.5, 0.5)
    checkmark.Position = UDim2.new(0.5, 0, 0.5, 0)
    checkmark.BackgroundColor3 = Color3.fromRGB(70, 200, 120)
    checkmark.BorderSizePixel = 0
    checkmark.Visible = true
    checkmark.Parent = checkboxBG
    
    local checkmarkCorner = Instance.new("UICorner")
    checkmarkCorner.CornerRadius = UDim.new(0, 3)
    checkmarkCorner.Parent = checkmark
    
    local checkboxLabel = Instance.new("TextLabel")
checkboxLabel.Name = "Label"
checkboxLabel.Size = UDim2.new(1, -28, 1, 0)
checkboxLabel.Position = UDim2.new(0, 0, 0, 0)
checkboxLabel.BackgroundTransparency = 1
checkboxLabel.TextColor3 = Color3.fromRGB(220, 220, 220)
checkboxLabel.TextSize = 14
checkboxLabel.Font = FONT
checkboxLabel.Text = text
checkboxLabel.TextXAlignment = Enum.TextXAlignment.Left
checkboxLabel.Parent = checkboxContainer
    
    local checkboxButton = Instance.new("TextButton")
    checkboxButton.Name = "Button"
    checkboxButton.Size = UDim2.new(1, 0, 1, 0)
    checkboxButton.BackgroundTransparency = 1
    checkboxButton.Text = ""
    checkboxButton.Parent = checkboxContainer
    
    local checked = false
    
    checkboxButton.MouseButton1Click:Connect(function()
        checked = not checked
        
        if checked then
            local expandTween = TweenService:Create(
                checkmark,
                TweenInfo.new(0.3, Enum.EasingStyle.Back, Enum.EasingDirection.Out),
                {Size = UDim2.new(0.8, 0, 0.8, 0)}
            )
            expandTween:Play()
            checkboxLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        else
            local shrinkTween = TweenService:Create(
                checkmark,
                TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.In),
                {Size = UDim2.new(0, 0, 0, 0)}
            )
            shrinkTween:Play()
            checkboxLabel.TextColor3 = Color3.fromRGB(220, 220, 220)
        end
        
        if onToggle then
            onToggle(checked)
        end
    end)
    
    return checkboxContainer, function() return checked end
end

-- NEW FEATURE: Text Input with label
function TeleportGUILibrary.createTextInput(name, labelText, defaultValue, position, parent, onChange)
    -- Container for the whole input element
    local inputContainer = Instance.new("Frame")
    inputContainer.Name = name .. "Container"
    inputContainer.Size = UDim2.new(0.9, 0, 0, 32)
    inputContainer.Position = position
    inputContainer.BackgroundTransparency = 1
    inputContainer.Parent = parent
    
    -- Label
    local inputLabel = Instance.new("TextLabel")
    inputLabel.Name = "Label"
    inputLabel.Size = UDim2.new(0.5, -10, 1, 0)
    inputLabel.BackgroundTransparency = 1
    inputLabel.TextColor3 = Color3.fromRGB(220, 220, 220)
    inputLabel.TextSize = 14
    inputLabel.Font = FONT
    inputLabel.Text = labelText
    inputLabel.TextXAlignment = Enum.TextXAlignment.Left
    inputLabel.Parent = inputContainer
    
    -- Input Box Background
    local inputBG = Instance.new("Frame")
    inputBG.Name = "Background"
    inputBG.Size = UDim2.new(0.5, 0, 0, 25)
    inputBG.Position = UDim2.new(0.5, 0, 0.5, -12.5)
    inputBG.BackgroundColor3 = COLORS.Input
    inputBG.BorderSizePixel = 0
    inputBG.Parent = inputContainer
    
    -- Round the corners of the input box
    local inputCorner = Instance.new("UICorner")
    inputCorner.CornerRadius = UDim.new(0, 5)
    inputCorner.Parent = inputBG
    
    -- The actual TextBox
    local textBox = Instance.new("TextBox")
    textBox.Name = "TextBox"
    textBox.Size = UDim2.new(0.9, 0, 1, 0)
    textBox.Position = UDim2.new(0.05, 0, 0, 0)
    textBox.BackgroundTransparency = 1
    textBox.TextColor3 = Color3.fromRGB(255, 255, 255)
    textBox.TextSize = 14
    textBox.Font = FONT
    textBox.Text = tostring(defaultValue)
    textBox.PlaceholderText = "Enter value..."
    textBox.PlaceholderColor3 = Color3.fromRGB(180, 180, 180)
    textBox.TextXAlignment = Enum.TextXAlignment.Center
    textBox.ClearTextOnFocus = false
    textBox.Parent = inputBG
    
    -- Store the current value
    local currentValue = defaultValue
    
    -- Handle focus
    textBox.Focused:Connect(function()
        TweenService:Create(
            inputBG,
            TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
            {BackgroundColor3 = Color3.fromRGB(70, 70, 80)}
        ):Play()
    end)
    
    textBox.FocusLost:Connect(function(enterPressed)
        TweenService:Create(
            inputBG,
            TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
            {BackgroundColor3 = COLORS.Input}
        ):Play()
        
        if enterPressed then
            local newValue = textBox.Text
            -- Try to convert to number if possible
            local numValue = tonumber(newValue)
            if numValue then
                newValue = numValue
            end
            
            -- Only call onChange if the value actually changed
            if newValue ~= currentValue then
                currentValue = newValue
                if onChange then
                    onChange(newValue)
                end
            end
        else
            -- Revert to current value if user didn't press enter
            textBox.Text = tostring(currentValue)
        end
    end)
    
    -- Return the container and functions to get/set the value
    return inputContainer, {
        getValue = function() return currentValue end,
        setValue = function(value)
            currentValue = value
            textBox.Text = tostring(value)
            if onChange then
                onChange(value)
            end
        end
    }
end

-- Add this function to the TeleportGUILibrary

function TeleportGUILibrary.createDropdown(name, labelText, options, defaultOption, position, parent, callback)
    -- Container for the whole dropdown element
    local dropdownContainer = Instance.new("Frame")
    dropdownContainer.Name = name .. "Container"
    dropdownContainer.Size = UDim2.new(0.9, 0, 0, 32)
    dropdownContainer.Position = position
    dropdownContainer.BackgroundTransparency = 1
    dropdownContainer.Parent = parent
    
    -- Label
    local dropdownLabel = Instance.new("TextLabel")
    dropdownLabel.Name = "Label"
    dropdownLabel.Size = UDim2.new(0.5, -10, 1, 0)
    dropdownLabel.BackgroundTransparency = 1
    dropdownLabel.TextColor3 = Color3.fromRGB(220, 220, 220)
    dropdownLabel.TextSize = 14
    dropdownLabel.Font = FONT
    dropdownLabel.Text = labelText
    dropdownLabel.TextXAlignment = Enum.TextXAlignment.Left
    dropdownLabel.Parent = dropdownContainer
    
    -- Dropdown Button Background
    local dropdownBG = Instance.new("Frame")
    dropdownBG.Name = "Background"
    dropdownBG.Size = UDim2.new(0.5, 0, 0, 25)
    dropdownBG.Position = UDim2.new(0.5, 0, 0.5, -12.5)
    dropdownBG.BackgroundColor3 = COLORS.Input
    dropdownBG.BorderSizePixel = 0
    dropdownBG.Parent = dropdownContainer
    
    -- Round the corners of the dropdown button
    local dropdownCorner = Instance.new("UICorner")
    dropdownCorner.CornerRadius = UDim.new(0, 5)
    dropdownCorner.Parent = dropdownBG
    
    -- The selected value text
    local selectedText = Instance.new("TextLabel")
    selectedText.Name = "SelectedText"
    selectedText.Size = UDim2.new(0.85, 0, 1, 0) 
    selectedText.Position = UDim2.new(0.05, 0, 0, 0)
    selectedText.BackgroundTransparency = 1
    selectedText.TextColor3 = Color3.fromRGB(255, 255, 255)
    selectedText.TextSize = 14
    selectedText.Font = FONT
    selectedText.Text = defaultOption or "Select..."
    selectedText.TextXAlignment = Enum.TextXAlignment.Left
    selectedText.Parent = dropdownBG
    
    -- Arrow icon
    local arrowIcon = Instance.new("TextLabel")
    arrowIcon.Name = "ArrowIcon"
    arrowIcon.Size = UDim2.new(0, 20, 0, 20)
    arrowIcon.Position = UDim2.new(1, -25, 0.5, -10)
    arrowIcon.BackgroundTransparency = 1
    arrowIcon.TextColor3 = Color3.fromRGB(255, 255, 255)
    arrowIcon.TextSize = 16
    arrowIcon.Font = FONT
    arrowIcon.Text = "▼"
    arrowIcon.TextYAlignment = Enum.TextYAlignment.Center
    arrowIcon.Parent = dropdownBG
    
    -- Dropdown Button
    local dropdownButton = Instance.new("TextButton")
    dropdownButton.Name = "Button"
    dropdownButton.Size = UDim2.new(1, 0, 1, 0)
    dropdownButton.BackgroundTransparency = 1
    dropdownButton.Text = ""
    dropdownButton.Parent = dropdownBG
    
    -- Dropdown Menu Container (initially hidden)
    local menuContainer = Instance.new("Frame")
    menuContainer.Name = "MenuContainer"
    menuContainer.Size = UDim2.new(1, 0, 0, 0) -- Will expand when opened
    menuContainer.Position = UDim2.new(0, 0, 1, 0)
    menuContainer.BackgroundColor3 = COLORS.Input
    menuContainer.BorderSizePixel = 0
    menuContainer.ClipsDescendants = true
    menuContainer.Visible = false
    menuContainer.ZIndex = 10
    menuContainer.Parent = dropdownBG
    
    -- Round the corners of the menu container
    local menuCorner = Instance.new("UICorner")
    menuCorner.CornerRadius = UDim.new(0, 5)
    menuCorner.Parent = menuContainer
    
    -- ScrollingFrame for options
    local optionsScrollFrame = Instance.new("ScrollingFrame")
    optionsScrollFrame.Name = "OptionsScrollFrame"
    optionsScrollFrame.Size = UDim2.new(1, 0, 1, 0)
    optionsScrollFrame.BackgroundTransparency = 1
    optionsScrollFrame.BorderSizePixel = 0
    optionsScrollFrame.ScrollBarThickness = 4
    optionsScrollFrame.ScrollBarImageColor3 = Color3.fromRGB(100, 100, 100)
    optionsScrollFrame.ZIndex = 11
    optionsScrollFrame.Parent = menuContainer
    
    -- List layout for options
    local optionsList = Instance.new("UIListLayout")
    optionsList.Name = "OptionsList"
    optionsList.SortOrder = Enum.SortOrder.LayoutOrder
    optionsList.Padding = UDim.new(0, 2)
    optionsList.Parent = optionsScrollFrame
    
    -- Create option buttons
    local currentValue = defaultOption or options[1] or "Select..."
    local isOpen = false
    local optionHeight = 25
    local maxVisibleOptions = 4
    
    -- Function to create option buttons
    local function createOptions()
        -- Clear existing options
        for _, child in pairs(optionsScrollFrame:GetChildren()) do
            if child:IsA("TextButton") then
                child:Destroy()
            end
        end
        
        -- Calculate total height needed
        local totalOptionsHeight = #options * (optionHeight + 2) -- Height + padding
        optionsScrollFrame.CanvasSize = UDim2.new(0, 0, 0, totalOptionsHeight)
        
        -- Create new option buttons
        for i, option in ipairs(options) do
            local optionButton = Instance.new("TextButton")
            optionButton.Name = "Option_" .. option
            optionButton.Size = UDim2.new(1, -8, 0, optionHeight)
            optionButton.Position = UDim2.new(0, 4, 0, (i-1) * (optionHeight + 2))
            optionButton.BackgroundColor3 = COLORS.Frame
            optionButton.TextColor3 = Color3.fromRGB(255, 255, 255)
            optionButton.TextSize = 14
            optionButton.Font = FONT
            optionButton.Text = option
            optionButton.TextXAlignment = Enum.TextXAlignment.Left
            optionButton.TextYAlignment = Enum.TextYAlignment.Center
            optionButton.ZIndex = 12
            optionButton.Parent = optionsScrollFrame
            
            -- Option button corner
            local optionCorner = Instance.new("UICorner")
            optionCorner.CornerRadius = UDim.new(0, 3)
            optionCorner.Parent = optionButton
            
            -- Left padding for text
            local textPadding = Instance.new("UIPadding")
            textPadding.PaddingLeft = UDim.new(0, 8)
            textPadding.Parent = optionButton
            
            -- Hover effect
            optionButton.MouseEnter:Connect(function()
                TweenService:Create(optionButton, TweenInfo.new(0.2), {BackgroundColor3 = COLORS.Accent}):Play()
            end)
            
            optionButton.MouseLeave:Connect(function()
                TweenService:Create(optionButton, TweenInfo.new(0.2), {BackgroundColor3 = COLORS.Frame}):Play()
            end)
            
            -- Option selection
            optionButton.MouseButton1Click:Connect(function()
                currentValue = option
                selectedText.Text = option
                
                -- Close the dropdown
                isOpen = false
                arrowIcon.Text = "▼"
                
                -- Collapse the menu with animation
                TweenService:Create(
                    menuContainer, 
                    TweenInfo.new(0.3, Enum.EasingStyle.Quart, Enum.EasingDirection.In),
                    {Size = UDim2.new(1, 0, 0, 0)}
                ):Play()
                
                -- Hide after animation completes
                wait(0.3)
                menuContainer.Visible = false
                
                -- Call the callback
                if callback then
                    callback(option)
                end
            end)
        end
    end
    
    -- Toggle dropdown menu
    dropdownButton.MouseButton1Click:Connect(function()
        isOpen = not isOpen
        
        if isOpen then
            -- Update options before opening
            createOptions()
            
            -- Change arrow direction
            arrowIcon.Text = "▲"
            
            -- Show and expand the menu with animation
            menuContainer.Visible = true
            local visibleOptionsHeight = math.min(#options, maxVisibleOptions) * (optionHeight + 2)
            
            TweenService:Create(
                menuContainer, 
                TweenInfo.new(0.3, Enum.EasingStyle.Quart, Enum.EasingDirection.Out),
                {Size = UDim2.new(1, 0, 0, visibleOptionsHeight)}
            ):Play()
        else
            -- Change arrow direction
            arrowIcon.Text = "▼"
            
            -- Collapse the menu with animation
            TweenService:Create(
                menuContainer, 
                TweenInfo.new(0.3, Enum.EasingStyle.Quart, Enum.EasingDirection.In),
                {Size = UDim2.new(1, 0, 0, 0)}
            ):Play()
            
            -- Hide after animation completes
            wait(0.3)
            menuContainer.Visible = false
        end
    end)
    
    -- Initialize with default options
    if options and #options > 0 then
        if not defaultOption then
            selectedText.Text = options[1]
            currentValue = options[1]
        end
    end
    
    -- Return the container and methods for getting/setting the value
    return dropdownContainer, {
        getValue = function() return currentValue end,
        setValue = function(value)
            -- Check if value is in options
            local found = false
            for _, option in ipairs(options) do
                if option == value then
                    found = true
                    break
                end
            end
            
            if found then
                currentValue = value
                selectedText.Text = value
                if callback then
                    callback(value)
                end
            else
                warn("Dropdown setValue: Value '" .. tostring(value) .. "' not found in options")
            end
        end,
        setOptions = function(newOptions, newDefault)
            options = newOptions
            if newDefault then
                currentValue = newDefault
                selectedText.Text = newDefault
            elseif #newOptions > 0 then
                currentValue = newOptions[1]
                selectedText.Text = newOptions[1]
            else
                currentValue = "Select..."
                selectedText.Text = "Select..."
            end
            
            -- If dropdown is open, update the options
            if isOpen then
                createOptions()
            end
            
            if callback then
                callback(currentValue)
            end
        end
    }
end

function TeleportGUILibrary.createButton(name, text, position, parent, onClick)
    -- Create main container
    local buttonContainer = Instance.new("Frame")
    buttonContainer.Name = name .. "Container"
    buttonContainer.Size = UDim2.new(0.9, 0, 0, 28) -- Match checkbox height
    buttonContainer.Position = position
    buttonContainer.BackgroundTransparency = 1
    buttonContainer.Parent = parent
    
    -- Button label (left aligned)
    local buttonLabel = Instance.new("TextLabel")
    buttonLabel.Name = "Label"
    buttonLabel.Size = UDim2.new(1, -70, 1, 0) -- Leave space for button
    buttonLabel.Position = UDim2.new(0, 0, 0, 0)
    buttonLabel.BackgroundTransparency = 1
    buttonLabel.TextColor3 = Color3.fromRGB(220, 220, 220)
    buttonLabel.TextSize = 14
    buttonLabel.Font = FONT -- Using the same font constant as checkbox
    buttonLabel.Text = text
    buttonLabel.TextXAlignment = Enum.TextXAlignment.Left
    buttonLabel.Parent = buttonContainer
    
    -- Button background (right aligned)
    local buttonBG = Instance.new("Frame")
    buttonBG.Name = "Background"
    buttonBG.Size = UDim2.new(0, 60, 0, 22)
    buttonBG.Position = UDim2.new(1, -60, 0.5, -11) -- Center vertically
    buttonBG.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
    buttonBG.BorderSizePixel = 0
    buttonBG.ClipsDescendants = true -- Contain ripple effect
    buttonBG.Parent = buttonContainer
    
    -- Round corners
    local buttonCorner = Instance.new("UICorner")
    buttonCorner.CornerRadius = UDim.new(0, 5)
    buttonCorner.Parent = buttonBG
    
    -- Ripple effect
    local ripple = Instance.new("Frame")
    ripple.Name = "Ripple"
    ripple.Size = UDim2.new(0, 0, 0, 0)
    ripple.AnchorPoint = Vector2.new(0.5, 0.5)
    ripple.Position = UDim2.new(0.5, 0, 0.5, 0)
    ripple.BackgroundColor3 = Color3.fromRGB(120, 230, 160) -- Lighter green color
    ripple.BackgroundTransparency = 0.5
    ripple.BorderSizePixel = 0
    ripple.Visible = false
    ripple.Parent = buttonBG
    
    -- Ripple corners
    local rippleCorner = Instance.new("UICorner")
    rippleCorner.CornerRadius = UDim.new(1, 0)
    rippleCorner.Parent = ripple
    
    -- Interactive button
    local button = Instance.new("TextButton")
    button.Name = "Button"
    button.Size = UDim2.new(1, 0, 1, 0)
    button.BackgroundTransparency = 1
    button.Text = ""
    button.Parent = buttonContainer -- Cover the entire container for easier clicking
    
    -- Add cooldown flag
    local isOnCooldown = false
    
    -- Hover effect
    button.MouseEnter:Connect(function()
        if not isOnCooldown then
            buttonLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
            TweenService:Create(buttonBG, TweenInfo.new(0.2), 
                {BackgroundColor3 = Color3.fromRGB(80, 80, 80)}):Play()
        end
    end)
    
    button.MouseLeave:Connect(function()
        if not isOnCooldown then
            buttonLabel.TextColor3 = Color3.fromRGB(220, 220, 220)
            TweenService:Create(buttonBG, TweenInfo.new(0.2), 
                {BackgroundColor3 = Color3.fromRGB(70, 70, 70)}):Play()
        end
    end)
    
    -- Click effects
    button.MouseButton1Down:Connect(function(x, y)
        if not isOnCooldown then
            -- Show ripple at center of button
            ripple.Position = UDim2.new(0.5, 0, 0.5, 0)
            ripple.Size = UDim2.new(0, 0, 0, 0)
            ripple.Visible = true
            
            -- Expand ripple
            local maxSize = math.max(buttonBG.AbsoluteSize.X, buttonBG.AbsoluteSize.Y) * 2
            TweenService:Create(ripple, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), 
                {Size = UDim2.new(0, maxSize, 0, maxSize)}):Play()
        end
    end)
    
    button.MouseButton1Click:Connect(function()
        if not isOnCooldown then
            -- Set cooldown flag
            isOnCooldown = true
            
            -- Change color on click (lighter green)
            TweenService:Create(buttonBG, TweenInfo.new(0.2), 
                {BackgroundColor3 = Color3.fromRGB(120, 230, 160)}):Play()
            
            -- Call callback
            if onClick then
                onClick()
            end
            
            -- Return to normal color
            task.delay(1, function()
                if buttonBG and buttonBG.Parent then
                    TweenService:Create(buttonBG, TweenInfo.new(0.3), 
                        {BackgroundColor3 = Color3.fromRGB(70, 70, 70)}):Play()
                end
            end)
            
            -- Fade out ripple
            task.delay(1, function()
                if ripple and ripple.Parent then
                    TweenService:Create(ripple, TweenInfo.new(0.3), 
                        {BackgroundTransparency = 1}):Play()
                    
                    task.delay(1, function()
                        if ripple and ripple.Parent then
                            ripple.Visible = false
                            ripple.BackgroundTransparency = 0.5
                        end
                    end)
                end
            end)
            
            -- Reset cooldown after 3 seconds
            task.delay(3, function()
                isOnCooldown = false
            end)
        end
    end)
    
    return buttonContainer, button
end

-- Function to create notification
function TeleportGUILibrary.createNotification(message, type)
    local notifColor = COLORS.Accent
    if type == "success" then
        notifColor = COLORS.Success
    elseif type == "error" then
        notifColor = COLORS.Error
    elseif type == "warning" then
        notifColor = COLORS.Warning
    end
    
    local NotifGui = Instance.new("ScreenGui")
    local NotifFrame = Instance.new("Frame")
    local NotifText = Instance.new("TextLabel")
    local UICorner = Instance.new("UICorner")
    local StatusBar = Instance.new("Frame")
    local StatusBarCorner = Instance.new("UICorner")
    
    -- Configure notification GUI
    NotifGui.Name = "TeleportNotification"
    NotifGui.DisplayOrder = 999
    NotifGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    local parentSuccess = false
    pcall(function()
        if syn and syn.protect_gui then
            syn.protect_gui(NotifGui)
            NotifGui.Parent = CoreGui
            parentSuccess = true
        elseif gethui then
            NotifGui.Parent = gethui()
            parentSuccess = true
        else
            NotifGui.Parent = PlayerGui
            parentSuccess = true
        end
    end)
    if not parentSuccess then
        print("Error: Failed to parent notification GUI.")
        return
    end
    
    NotifFrame.Name = "NotifFrame"
    NotifFrame.Parent = NotifGui
    NotifFrame.BackgroundColor3 = COLORS.Frame
    NotifFrame.Position = UDim2.new(1, 10, 0.8, 0)
    NotifFrame.Size = UDim2.new(0, 280, 0, 60)
    NotifFrame.BackgroundTransparency = 0.1
    NotifFrame.BorderSizePixel = 0
    NotifFrame.ZIndex = 100
    
    UICorner.Parent = NotifFrame
    UICorner.CornerRadius = CORNER_RADIUS
    
    NotifText.Name = "NotifText"
    NotifText.Parent = NotifFrame
    NotifText.BackgroundTransparency = 1
    NotifText.Position = UDim2.new(0, 10, 0, 5)
    NotifText.Size = UDim2.new(1, -20, 1, -15)
    NotifText.Font = FONT
    NotifText.Text = message
    NotifText.TextColor3 = COLORS.Text
    NotifText.TextSize = 16
    NotifText.TextWrapped = true
    NotifText.TextXAlignment = Enum.TextXAlignment.Left
    NotifText.TextYAlignment = Enum.TextYAlignment.Top
    NotifText.ZIndex = 101
    
    StatusBar.Name = "StatusBar"
    StatusBar.Parent = NotifFrame
    StatusBar.BackgroundColor3 = notifColor
    StatusBar.Position = UDim2.new(0, 10, 1, -8)
    StatusBar.Size = UDim2.new(1, -20, 0, 3)
    StatusBar.ZIndex = 101
    
    StatusBarCorner.Parent = StatusBar
    StatusBarCorner.CornerRadius = UDim.new(1, 0)
    
    -- Animate notification
    TweenService:Create(NotifFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quint), {Position = UDim2.new(1, -300, 0.8, 0)}):Play()
    
    -- Create countdown tween
    local statusTween = TweenService:Create(StatusBar, TweenInfo.new(3, Enum.EasingStyle.Linear), {Size = UDim2.new(0, 0, 0, 3)})
    statusTween:Play()
    
    statusTween.Completed:Connect(function()
        TweenService:Create(NotifFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quint), {Position = UDim2.new(1, 10, 0.8, 0)}):Play()
        wait(0.5)
        NotifGui:Destroy()
    end)
end

-- Expose ContentFrame for adding sectionss
TeleportGUILibrary.ContentFrame = ContentFrame

-- Expose a function to update CanvasSize
function TeleportGUILibrary.updateCanvasSize(contentHeight)
    ScrollingFrame.CanvasSize = UDim2.new(0, 0, 0, contentHeight)
    ContentFrame.Size = UDim2.new(1, 0, 0, contentHeight)
end

-- Make GUI draggable (both vertically and horizontally)
local dragging = false
local dragInput
local dragStart
local startPos
local isMobile = UIS.TouchEnabled and not UIS.KeyboardEnabled and not UIS.MouseEnabled

-- Function to update drag position
local function updateDrag(input)
    local delta = input.Position - dragStart
    MainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
end

-- Function to disable camera movement
local function disableCamera(actionName, inputState, inputObject)
    if dragging then
        return Enum.ContextActionResult.Sink -- Consume the input to prevent camera movement
    end
    return Enum.ContextActionResult.Pass
end

-- Dragging for PC (Mouse)
TopBar.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        dragStart = input.Position
        startPos = MainFrame.Position
        
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

TopBar.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement then
        dragInput = input
    end
end)

UIS.InputChanged:Connect(function(input)
    if input == dragInput and dragging then
        updateDrag(input)
    end
end)

-- Dragging for Mobile (Touch)
if isMobile then
    local touchConnection
    local touchEndedConnection

    -- Bind action to disable camera movement during drag
    ContextActionService:BindAction("DisableCameraMovement", disableCamera, false, Enum.UserInputType.Touch)

    TopBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = MainFrame.Position

            -- Handle touch movement
            touchConnection = UIS.TouchMoved:Connect(function(touchInput)
                if touchInput == input and dragging then
                    updateDrag(touchInput)
                end
            end)

            -- Clean up when touch ends
            touchEndedConnection = UIS.TouchEnded:Connect(function(touchInput)
                if touchInput == input then
                    dragging = false
                    if touchConnection then
                        touchConnection:Disconnect()
                    end
                    if touchEndedConnection then
                        touchEndedConnection:Disconnect()
                    end
                end
            end)
        end
    end)

    -- Unbind the action when the GUI is destroyed
    ScreenGui.AncestryChanged:Connect(function()
        if not ScreenGui:IsDescendantOf(game) then
            ContextActionService:UnbindAction("DisableCameraMovement")
        end
    end)
end

-- Minimize Status
local isMinimized = false
local originalSize = MainFrame.Size

-- Close GUI function we dont need this for now

-- Minimize function
MinimizeButton.MouseButton1Click:Connect(function()
    if isMinimized then
        MainFrame:TweenSize(originalSize, Enum.EasingDirection.Out, Enum.EasingStyle.Quart, 0.3, true)
        ScrollingFrame.Visible = true
        YouTubeLabel.Visible = true
        MinimizeButton.Text = "-"
    else
        originalSize = MainFrame.Size
        MainFrame:TweenSize(UDim2.new(0, 250, 0, 30), Enum.EasingDirection.Out, Enum.EasingStyle.Quart, 0.3, true)
        ScrollingFrame.Visible = false
        YouTubeLabel.Visible = false
        MinimizeButton.Text = "+"
    end
    isMinimized = not isMinimized
end)

-- Make the GUI reappear with a keybind (Press "M" to toggle visibility)
UIS.InputEnded:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.M then
        ScreenGui.Enabled = not ScreenGui.Enabled
    end
end)

return TeleportGUILibrary