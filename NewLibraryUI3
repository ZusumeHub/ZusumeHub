local Players = game:GetService("Players")
local UIS = game:GetService("UserInputService")
local ContextActionService = game:GetService("ContextActionService")
local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")
local TweenService = game:GetService("TweenService")
local CoreGui = game:GetService("CoreGui")

local TeleportGUILibrary = {}

-- Constants for Notification and UI
local FONT = Enum.Font.GothamBold
local CORNER_RADIUS = UDim.new(0, 6)
local COLORS = {
    Frame = Color3.fromRGB(35, 35, 40),
    Text = Color3.fromRGB(255, 255, 255),
    Accent = Color3.fromRGB(114, 137, 218), -- Discord blue 
    Success = Color3.fromRGB(87, 242, 135),
    Error = Color3.fromRGB(255, 89, 89),
    Warning = Color3.fromRGB(255, 201, 79),
}

-- Create GUI
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "TeleportGUI"
ScreenGui.ResetOnSpawn = false
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
ScreenGui.Parent = PlayerGui

-- Main Frame
local MainFrame = Instance.new("Frame")
MainFrame.Name = "MainFrame"
MainFrame.Size = UDim2.new(0, 250, 0, 300)
MainFrame.Position = UDim2.new(0.5, -125, 0.5, -150)
MainFrame.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
MainFrame.BorderSizePixel = 0
MainFrame.ClipsDescendants = true
MainFrame.Parent = ScreenGui

-- Round the corners
local UICorner = Instance.new("UICorner")
UICorner.CornerRadius = UDim.new(0, 10)
UICorner.Parent = MainFrame

-- Top Bar
local TopBar = Instance.new("Frame")
TopBar.Name = "TopBar"
TopBar.Size = UDim2.new(1, 0, 0, 30)
TopBar.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
TopBar.BorderSizePixel = 0
TopBar.Parent = MainFrame

-- Title
local Title = Instance.new("TextLabel")
Title.Name = "Title"
Title.Size = UDim2.new(1, -60, 1, 0)
Title.Position = UDim2.new(0, 10, 0, 0)
Title.BackgroundTransparency = 1
Title.TextColor3 = Color3.fromRGB(255, 255, 255)
Title.TextSize = 16
Title.Font = Enum.Font.GothamBold
Title.Text = "you noob Sv_Azidan lol"
Title.TextXAlignment = Enum.TextXAlignment.Left
Title.Parent = TopBar

-- Close Button
local CloseButton = Instance.new("TextButton")
CloseButton.Name = "CloseButton"
CloseButton.Size = UDim2.new(0, 25, 0, 25)
CloseButton.Position = UDim2.new(1, -28, 0, 2)
CloseButton.BackgroundColor3 = Color3.fromRGB(255, 70, 70)
CloseButton.BorderSizePixel = 0
CloseButton.Font = Enum.Font.GothamBold
CloseButton.TextColor3 = Color3.fromRGB(255, 255, 255)
CloseButton.Text = "X"
CloseButton.TextSize = 14
CloseButton.Parent = TopBar

-- Round the close button
local CloseCorner = Instance.new("UICorner")
CloseCorner.CornerRadius = UDim.new(0, 5)
CloseCorner.Parent = CloseButton

-- Minimize Button
local MinimizeButton = Instance.new("TextButton")
MinimizeButton.Name = "MinimizeButton"
MinimizeButton.Size = UDim2.new(0, 25, 0, 25)
MinimizeButton.Position = UDim2.new(1, -58, 0, 2)
MinimizeButton.BackgroundColor3 = Color3.fromRGB(70, 70, 255)
MinimizeButton.BorderSizePixel = 0
MinimizeButton.Font = Enum.Font.GothamBold
MinimizeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
MinimizeButton.Text = "-"
MinimizeButton.TextSize = 16
MinimizeButton.Parent = TopBar

-- Round the minimize button
local MinimizeCorner = Instance.new("UICorner")
MinimizeCorner.CornerRadius = UDim.new(0, 5)
MinimizeCorner.Parent = MinimizeButton

-- ScrollingFrame to contain all content
local ScrollingFrame = Instance.new("ScrollingFrame")
ScrollingFrame.Name = "ScrollingFrame"
ScrollingFrame.Size = UDim2.new(1, 0, 1, -60)
ScrollingFrame.Position = UDim2.new(0, 0, 0, 30)
ScrollingFrame.BackgroundTransparency = 1
ScrollingFrame.ScrollBarThickness = 6
ScrollingFrame.ScrollBarImageColor3 = Color3.fromRGB(100, 100, 100)
ScrollingFrame.HorizontalScrollBarInset = Enum.ScrollBarInset.None
ScrollingFrame.CanvasSize = UDim2.new(0, 0, 0, 0) -- Will be updated dynamically
ScrollingFrame.Parent = MainFrame

-- Content Frame within the ScrollingFrame
local ContentFrame = Instance.new("Frame")
ContentFrame.Name = "ContentFrame"
ContentFrame.Size = UDim2.new(1, 0, 0, 0) -- Will be updated dynamically
ContentFrame.BackgroundTransparency = 1
ContentFrame.Parent = ScrollingFrame

-- YouTube Label (fixed at the bottom of MainFrame)
local YouTubeLabel = Instance.new("TextLabel")
YouTubeLabel.Name = "YouTubeLabel"
YouTubeLabel.Size = UDim2.new(1, 0, 0, 30)
YouTubeLabel.Position = UDim2.new(0, 0, 1, -30)
YouTubeLabel.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
YouTubeLabel.BorderSizePixel = 0
YouTubeLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
YouTubeLabel.TextSize = 16
YouTubeLabel.Font = Enum.Font.GothamBold
YouTubeLabel.Text = "Youtube: Zysume"
YouTubeLabel.TextXAlignment = Enum.TextXAlignment.Center
YouTubeLabel.Parent = MainFrame
YouTubeLabel.ZIndex = 2
YouTubeLabel.Visible = true

-- Function to create a section (label + separator)
function TeleportGUILibrary.createSection(sectionName, positionY)
    local sectionLabel = Instance.new("TextLabel")
    sectionLabel.Name = sectionName .. "Label"
    sectionLabel.Size = UDim2.new(0.9, 0, 0, 25)
    sectionLabel.Position = UDim2.new(0.05, 0, 0, positionY)
    sectionLabel.BackgroundTransparency = 1
    sectionLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    sectionLabel.TextSize = 16
    sectionLabel.Font = Enum.Font.GothamBold
    sectionLabel.Text = sectionName
    sectionLabel.TextXAlignment = Enum.TextXAlignment.Left
    sectionLabel.Parent = ContentFrame

    local separator = Instance.new("Frame")
    separator.Name = sectionName .. "Separator"
    separator.Size = UDim2.new(0.9, 0, 0, 1)
    separator.Position = UDim2.new(0.05, 0, 0, positionY + 30)
    separator.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
    separator.BorderSizePixel = 0
    separator.Parent = ContentFrame

    return sectionLabel, separator
end

-- Function to create custom checkbox with auto-apply
function TeleportGUILibrary.createCheckbox(name, text, position, parent, onToggle)
    local checkboxContainer = Instance.new("Frame")
    checkboxContainer.Name = name .. "Container"
    checkboxContainer.Size = UDim2.new(0.9, 0, 0, 28)
    checkboxContainer.Position = position
    checkboxContainer.BackgroundTransparency = 1
    checkboxContainer.Parent = parent
    
    local checkboxBG = Instance.new("Frame")
    checkboxBG.Name = "Background"
    checkboxBG.Size = UDim2.new(0, 20, 0, 20)
    checkboxBG.Position = UDim2.new(0, 0, 0.5, -10)
    checkboxBG.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
    checkboxBG.BorderSizePixel = 0
    checkboxBG.Parent = checkboxContainer
    
    local checkboxCorner = Instance.new("UICorner")
    checkboxCorner.CornerRadius = UDim.new(0, 5)
    checkboxCorner.Parent = checkboxBG
    
    local checkmark = Instance.new("Frame")
    checkmark.Name = "Checkmark"
    checkmark.Size = UDim2.new(0, 0, 0, 0)
    checkmark.AnchorPoint = Vector2.new(0.5, 0.5)
    checkmark.Position = UDim2.new(0.5, 0, 0.5, 0)
    checkmark.BackgroundColor3 = Color3.fromRGB(70, 200, 120)
    checkmark.BorderSizePixel = 0
    checkmark.Visible = true
    checkmark.Parent = checkboxBG
    
    local checkmarkCorner = Instance.new("UICorner")
    checkmarkCorner.CornerRadius = UDim.new(0, 3)
    checkmarkCorner.Parent = checkmark
    
    local checkboxLabel = Instance.new("TextLabel")
    checkboxLabel.Name = "Label"
    checkboxLabel.Size = UDim2.new(0, 180, 1, 0)
    checkboxLabel.Position = UDim2.new(0, 28, 0, 0)
    checkboxLabel.BackgroundTransparency = 1
    checkboxLabel.TextColor3 = Color3.fromRGB(220, 220, 220)
    checkboxLabel.TextSize = 14
    checkboxLabel.Font = FONT -- Changed to use bold font
    checkboxLabel.Text = text
    checkboxLabel.TextXAlignment = Enum.TextXAlignment.Left
    checkboxLabel.Parent = checkboxContainer
    
    local checkboxButton = Instance.new("TextButton")
    checkboxButton.Name = "Button"
    checkboxButton.Size = UDim2.new(1, 0, 1, 0)
    checkboxButton.BackgroundTransparency = 1
    checkboxButton.Text = ""
    checkboxButton.Parent = checkboxContainer
    
    local checked = false
    
    checkboxButton.MouseButton1Click:Connect(function()
        checked = not checked
        
        if checked then
            local expandTween = TweenService:Create(
                checkmark,
                TweenInfo.new(0.3, Enum.EasingStyle.Back, Enum.EasingDirection.Out),
                {Size = UDim2.new(0.8, 0, 0.8, 0)}
            )
            expandTween:Play()
            checkboxLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        else
            local shrinkTween = TweenService:Create(
                checkmark,
                TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.In),
                {Size = UDim2.new(0, 0, 0, 0)}
            )
            shrinkTween:Play()
            checkboxLabel.TextColor3 = Color3.fromRGB(220, 220, 220)
        end
        
        if onToggle then
            onToggle(checked)
        end
    end)
    
    return checkboxContainer, function() return checked end
end

-- Add this function to your TeleportGUILibrary

function TeleportGUILibrary.createDropdown(props)
    local name = props.Name or "Dropdown"
    local default = props.Default or ""
    local options = props.Options or {}
    local callback = props.Callback or function() end
    local position = props.Position or UDim2.new(0.05, 0, 0, 0)
    local parent = props.Parent or TeleportGUILibrary.ContentFrame
    
    -- Main container
    local dropdownContainer = Instance.new("Frame")
    dropdownContainer.Name = name .. "Container"
    dropdownContainer.Size = UDim2.new(0.9, 0, 0, 35)
    dropdownContainer.Position = position
    dropdownContainer.BackgroundTransparency = 1
    dropdownContainer.Parent = parent
    
    -- Label
    local dropdownLabel = Instance.new("TextLabel")
    dropdownLabel.Name = "Label"
    dropdownLabel.Size = UDim2.new(1, 0, 0, 20)
    dropdownLabel.BackgroundTransparency = 1
    dropdownLabel.TextColor3 = Color3.fromRGB(220, 220, 220)
    dropdownLabel.TextSize = 14
    dropdownLabel.Font = FONT
    dropdownLabel.Text = name
    dropdownLabel.TextXAlignment = Enum.TextXAlignment.Left
    dropdownLabel.Parent = dropdownContainer
    
    -- Main button (shows selected option)
    local dropdownButton = Instance.new("TextButton")
    dropdownButton.Name = "DropdownButton"
    dropdownButton.Size = UDim2.new(1, 0, 0, 35)
    dropdownButton.Position = UDim2.new(0, 0, 0, 20)
    dropdownButton.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
    dropdownButton.BorderSizePixel = 0
    dropdownButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    dropdownButton.TextSize = 14
    dropdownButton.Font = FONT
    dropdownButton.Text = default
    dropdownButton.TextXAlignment = Enum.TextXAlignment.Left
    dropdownButton.TextTruncate = Enum.TextTruncate.AtEnd
    dropdownButton.AutoButtonColor = false
    dropdownButton.ClipsDescendants = true
    dropdownButton.Parent = dropdownContainer
    
    -- Add padding to text
    local textPadding = Instance.new("UIPadding")
    textPadding.PaddingLeft = UDim.new(0, 10)
    textPadding.Parent = dropdownButton
    
    -- Round the button corners
    local dropdownCorner = Instance.new("UICorner")
    dropdownCorner.CornerRadius = UDim.new(0, 6)
    dropdownCorner.Parent = dropdownButton
    
    -- Arrow indicator
    local arrowIndicator = Instance.new("TextLabel")
    arrowIndicator.Name = "ArrowIndicator"
    arrowIndicator.Size = UDim2.new(0, 20, 0, 20)
    arrowIndicator.Position = UDim2.new(1, -25, 0.5, -10)
    arrowIndicator.BackgroundTransparency = 1
    arrowIndicator.TextColor3 = Color3.fromRGB(255, 255, 255)
    arrowIndicator.TextSize = 18
    arrowIndicator.Font = FONT
    arrowIndicator.Text = "▼"
    arrowIndicator.Parent = dropdownButton
    
    -- Options container (initially hidden)
    local optionsContainer = Instance.new("Frame")
    optionsContainer.Name = "OptionsContainer"
    optionsContainer.Size = UDim2.new(1, 0, 0, 0) -- Will be set dynamically
    optionsContainer.Position = UDim2.new(0, 0, 1, 0)
    optionsContainer.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    optionsContainer.BorderSizePixel = 0
    optionsContainer.Visible = false
    optionsContainer.ZIndex = 10
    optionsContainer.ClipsDescendants = true
    optionsContainer.Parent = dropdownButton
    
    -- Round the options container corners
    local optionsCorner = Instance.new("UICorner")
    optionsCorner.CornerRadius = UDim.new(0, 6)
    optionsCorner.Parent = optionsContainer
    
    -- ScrollingFrame for options when there are many
    local optionsScrollingFrame = Instance.new("ScrollingFrame")
    optionsScrollingFrame.Name = "OptionsScrollingFrame"
    optionsScrollingFrame.Size = UDim2.new(1, 0, 1, 0)
    optionsScrollingFrame.BackgroundTransparency = 1
    optionsScrollingFrame.BorderSizePixel = 0
    optionsScrollingFrame.ScrollBarThickness = 4
    optionsScrollingFrame.ScrollBarImageColor3 = Color3.fromRGB(100, 100, 100)
    optionsScrollingFrame.ZIndex = 11
    optionsScrollingFrame.Parent = optionsContainer
    
    -- Options list layout
    local optionsLayout = Instance.new("UIListLayout")
    optionsLayout.SortOrder = Enum.SortOrder.LayoutOrder
    optionsLayout.Parent = optionsScrollingFrame
    
    -- Track the current selected option
    local currentSelected = default
    
    -- Function to update dropdown
    local function updateDropdown()
        dropdownButton.Text = currentSelected
        if callback then
            callback(currentSelected)
        end
    end
    
    -- Function to toggle dropdown visibility
    local isOpen = false
    local function toggleDropdown()
        isOpen = not isOpen
        
        if isOpen then
            -- Show options
            optionsContainer.Visible = true
            arrowIndicator.Text = "▲"
            
            -- Calculate height based on number of options (max of 4 visible at once)
            local optionsHeight = math.min(#options * 35, 4 * 35)
            
            -- Animate opening
            local openTween = TweenService:Create(
                optionsContainer,
                TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                {Size = UDim2.new(1, 0, 0, optionsHeight)}
            )
            openTween:Play()
            
            -- Update scroll frame canvas size
            optionsScrollingFrame.CanvasSize = UDim2.new(0, 0, 0, #options * 35)
        else
            -- Animate closing
            local closeTween = TweenService:Create(
                optionsContainer,
                TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.In),
                {Size = UDim2.new(1, 0, 0, 0)}
            )
            closeTween:Play()
            
            closeTween.Completed:Connect(function()
                if not isOpen then -- Check again in case it was reopened during animation
                    optionsContainer.Visible = false
                    arrowIndicator.Text = "▼"
                end
            end)
        end
    end
    
    -- Create option buttons
    for i, option in ipairs(options) do
        local optionButton = Instance.new("TextButton")
        optionButton.Name = "Option_" .. option
        optionButton.Size = UDim2.new(1, 0, 0, 35)
        optionButton.BackgroundColor3 = Color3.fromRGB(55, 55, 55)
        optionButton.BorderSizePixel = 0
        optionButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        optionButton.TextSize = 14
        optionButton.Font = FONT
        optionButton.Text = option
        optionButton.TextXAlignment = Enum.TextXAlignment.Left
        optionButton.ZIndex = 12
        optionButton.LayoutOrder = i
        optionButton.AutoButtonColor = false
        optionButton.Parent = optionsScrollingFrame
        
        -- Add text padding
        local optionPadding = Instance.new("UIPadding")
        optionPadding.PaddingLeft = UDim.new(0, 10)
        optionPadding.Parent = optionButton
        
        -- Hover effect
        optionButton.MouseEnter:Connect(function()
            TweenService:Create(
                optionButton,
                TweenInfo.new(0.1, Enum.EasingStyle.Quad),
                {BackgroundColor3 = Color3.fromRGB(70, 70, 70)}
            ):Play()
        end)
        
        optionButton.MouseLeave:Connect(function()
            TweenService:Create(
                optionButton,
                TweenInfo.new(0.1, Enum.EasingStyle.Quad),
                {BackgroundColor3 = Color3.fromRGB(55, 55, 55)}
            ):Play()
        end)
        
        -- Select option
        optionButton.MouseButton1Click:Connect(function()
            currentSelected = option
            updateDropdown()
            toggleDropdown()
        end)
    end
    
    -- Toggle dropdown visibility when clicked
    dropdownButton.MouseButton1Click:Connect(toggleDropdown)
    
    -- Close dropdown when clicking outside
    local closeDetector
    closeDetector = UIS.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            local position = input.Position
            local guiObjects = PlayerGui:GetGuiObjectsAtPosition(position.X, position.Y)
            
            local isClickInside = false
            for _, obj in pairs(guiObjects) do
                if obj:IsDescendantOf(dropdownContainer) then
                    isClickInside = true
                    break
                end
            end
            
            if not isClickInside and isOpen then
                toggleDropdown()
            end
        end
    end)
    
    -- Clean up connection when button is destroyed
    dropdownButton.AncestryChanged:Connect(function()
        if not dropdownButton:IsDescendantOf(game) then
            if closeDetector then
                closeDetector:Disconnect()
            end
        end
    end)
    
    -- Initialize with default value
    updateDropdown()
    
    return {
        container = dropdownContainer,
        getValue = function() return currentSelected end,
        setValue = function(value)
            if table.find(options, value) then
                currentSelected = value
                updateDropdown()
            else
                warn("Invalid dropdown value: " .. tostring(value))
            end
        end,
        setOptions = function(newOptions)
            options = newOptions
            
            -- Clear existing options
            for _, child in pairs(optionsScrollingFrame:GetChildren()) do
                if child:IsA("TextButton") then
                    child:Destroy()
                end
            end
            
            -- Create new option buttons
            for i, option in ipairs(options) do
                local optionButton = Instance.new("TextButton")
                optionButton.Name = "Option_" .. option
                optionButton.Size = UDim2.new(1, 0, 0, 35)
                optionButton.BackgroundColor3 = Color3.fromRGB(55, 55, 55)
                optionButton.BorderSizePixel = 0
                optionButton.TextColor3 = Color3.fromRGB(255, 255, 255)
                optionButton.TextSize = 14
                optionButton.Font = FONT
                optionButton.Text = option
                optionButton.TextXAlignment = Enum.TextXAlignment.Left
                optionButton.ZIndex = 12
                optionButton.LayoutOrder = i
                optionButton.AutoButtonColor = false
                optionButton.Parent = optionsScrollingFrame
                
                -- Add text padding
                local optionPadding = Instance.new("UIPadding")
                optionPadding.PaddingLeft = UDim.new(0, 10)
                optionPadding.Parent = optionButton
                
                -- Hover effect
                optionButton.MouseEnter:Connect(function()
                    TweenService:Create(
                        optionButton,
                        TweenInfo.new(0.1, Enum.EasingStyle.Quad),
                        {BackgroundColor3 = Color3.fromRGB(70, 70, 70)}
                    ):Play()
                end)
                
                optionButton.MouseLeave:Connect(function()
                    TweenService:Create(
                        optionButton,
                        TweenInfo.new(0.1, Enum.EasingStyle.Quad),
                        {BackgroundColor3 = Color3.fromRGB(55, 55, 55)}
                    ):Play()
                end)
                
                -- Select option
                optionButton.MouseButton1Click:Connect(function()
                    currentSelected = option
                    updateDropdown()
                    toggleDropdown()
                end)
            end
            
            -- Update canvas size
            optionsScrollingFrame.CanvasSize = UDim2.new(0, 0, 0, #options * 35)
            
            -- Reset selected value if it's no longer in options
            if not table.find(options, currentSelected) and #options > 0 then
                currentSelected = options[1]
                updateDropdown()
            end
        end
    }
end

-- Function to create notification
function TeleportGUILibrary.createNotification(message, type)
    local notifColor = COLORS.Accent
    if type == "success" then
        notifColor = COLORS.Success
    elseif type == "error" then
        notifColor = COLORS.Error
    elseif type == "warning" then
        notifColor = COLORS.Warning
    end
    
    local NotifGui = Instance.new("ScreenGui")
    local NotifFrame = Instance.new("Frame")
    local NotifText = Instance.new("TextLabel")
    local UICorner = Instance.new("UICorner")
    local StatusBar = Instance.new("Frame")
    local StatusBarCorner = Instance.new("UICorner")
    
    -- Configure notification GUI
    NotifGui.Name = "TeleportNotification"
    NotifGui.DisplayOrder = 999
    NotifGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    local parentSuccess = false
    pcall(function()
        if syn and syn.protect_gui then
            syn.protect_gui(NotifGui)
            NotifGui.Parent = CoreGui
            parentSuccess = true
        elseif gethui then
            NotifGui.Parent = gethui()
            parentSuccess = true
        else
            NotifGui.Parent = PlayerGui
            parentSuccess = true
        end
    end)
    if not parentSuccess then
        print("Error: Failed to parent notification GUI.")
        return
    end
    
    NotifFrame.Name = "NotifFrame"
    NotifFrame.Parent = NotifGui
    NotifFrame.BackgroundColor3 = COLORS.Frame
    NotifFrame.Position = UDim2.new(1, 10, 0.8, 0)
    NotifFrame.Size = UDim2.new(0, 280, 0, 60)
    NotifFrame.BackgroundTransparency = 0.1
    NotifFrame.BorderSizePixel = 0
    NotifFrame.ZIndex = 100
    
    UICorner.Parent = NotifFrame
    UICorner.CornerRadius = CORNER_RADIUS
    
    NotifText.Name = "NotifText"
    NotifText.Parent = NotifFrame
    NotifText.BackgroundTransparency = 1
    NotifText.Position = UDim2.new(0, 10, 0, 5)
    NotifText.Size = UDim2.new(1, -20, 1, -15)
    NotifText.Font = FONT
    NotifText.Text = message
    NotifText.TextColor3 = COLORS.Text
    NotifText.TextSize = 16
    NotifText.TextWrapped = true
    NotifText.TextXAlignment = Enum.TextXAlignment.Left
    NotifText.TextYAlignment = Enum.TextYAlignment.Top
    NotifText.ZIndex = 101
    
    StatusBar.Name = "StatusBar"
    StatusBar.Parent = NotifFrame
    StatusBar.BackgroundColor3 = notifColor
    StatusBar.Position = UDim2.new(0, 10, 1, -8)
    StatusBar.Size = UDim2.new(1, -20, 0, 3)
    StatusBar.ZIndex = 101
    
    StatusBarCorner.Parent = StatusBar
    StatusBarCorner.CornerRadius = UDim.new(1, 0)
    
    -- Animate notification
    TweenService:Create(NotifFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quint), {Position = UDim2.new(1, -300, 0.8, 0)}):Play()
    
    -- Create countdown tween
    local statusTween = TweenService:Create(StatusBar, TweenInfo.new(3, Enum.EasingStyle.Linear), {Size = UDim2.new(0, 0, 0, 3)})
    statusTween:Play()
    
    statusTween.Completed:Connect(function()
        TweenService:Create(NotifFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quint), {Position = UDim2.new(1, 10, 0.8, 0)}):Play()
        wait(0.5)
        NotifGui:Destroy()
    end)
end

-- Expose ContentFrame for adding sections
TeleportGUILibrary.ContentFrame = ContentFrame

-- Expose a function to update CanvasSize
function TeleportGUILibrary.updateCanvasSize(contentHeight)
    ScrollingFrame.CanvasSize = UDim2.new(0, 0, 0, contentHeight)
    ContentFrame.Size = UDim2.new(1, 0, 0, contentHeight)
end

-- Make GUI draggable (both vertically and horizontally)
local dragging = false
local dragInput
local dragStart
local startPos
local isMobile = UIS.TouchEnabled and not UIS.KeyboardEnabled and not UIS.MouseEnabled

-- Function to update drag position
local function updateDrag(input)
    local delta = input.Position - dragStart
    MainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
end

-- Function to disable camera movement
local function disableCamera(actionName, inputState, inputObject)
    if dragging then
        return Enum.ContextActionResult.Sink -- Consume the input to prevent camera movement
    end
    return Enum.ContextActionResult.Pass
end

-- Dragging for PC (Mouse)
TopBar.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        dragStart = input.Position
        startPos = MainFrame.Position
        
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

TopBar.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement then
        dragInput = input
    end
end)

UIS.InputChanged:Connect(function(input)
    if input == dragInput and dragging then
        updateDrag(input)
    end
end)

-- Dragging for Mobile (Touch)
if isMobile then
    local touchConnection
    local touchEndedConnection

    -- Bind action to disable camera movement during drag
    ContextActionService:BindAction("DisableCameraMovement", disableCamera, false, Enum.UserInputType.Touch)

    TopBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = MainFrame.Position

            -- Handle touch movement
            touchConnection = UIS.TouchMoved:Connect(function(touchInput)
                if touchInput == input and dragging then
                    updateDrag(touchInput)
                end
            end)

            -- Clean up when touch ends
            touchEndedConnection = UIS.TouchEnded:Connect(function(touchInput)
                if touchInput == input then
                    dragging = false
                    if touchConnection then
                        touchConnection:Disconnect()
                    end
                    if touchEndedConnection then
                        touchEndedConnection:Disconnect()
                    end
                end
            end)
        end
    end)

    -- Unbind the action when the GUI is destroyed
    ScreenGui.AncestryChanged:Connect(function()
        if not ScreenGui:IsDescendantOf(game) then
            ContextActionService:UnbindAction("DisableCameraMovement")
        end
    end)
end

-- Minimize Status
local isMinimized = false
local originalSize = MainFrame.Size

-- Close GUI function
CloseButton.MouseButton1Click:Connect(function()
    ScreenGui.Enabled = false
end)

-- Minimize function
MinimizeButton.MouseButton1Click:Connect(function()
    if isMinimized then
        MainFrame:TweenSize(originalSize, Enum.EasingDirection.Out, Enum.EasingStyle.Quart, 0.3, true)
        ScrollingFrame.Visible = true
        YouTubeLabel.Visible = true
        MinimizeButton.Text = "-"
    else
        originalSize = MainFrame.Size
        MainFrame:TweenSize(UDim2.new(0, 250, 0, 30), Enum.EasingDirection.Out, Enum.EasingStyle.Quart, 0.3, true)
        ScrollingFrame.Visible = false
        YouTubeLabel.Visible = false
        MinimizeButton.Text = "+"
    end
    isMinimized = not isMinimized
end)

-- Make the GUI reappear with a keybind (Press "M" to toggle visibility)
UIS.InputEnded:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.M then
        ScreenGui.Enabled = not ScreenGui.Enabled
    end
end)

return TeleportGUILibrary